
STM32 ESP8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006544  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  080066d8  080066d8  000076d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c98  08006c98  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006c98  08006c98  00007c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ca0  08006ca0  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca0  08006ca0  00007ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ca4  08006ca4  00007ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006ca8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          0000044c  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000620  20000620  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000943b  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a34  00000000  00000000  0001163f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  00013078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000641  00000000  00000000  000138b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224e4  00000000  00000000  00013ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a927  00000000  00000000  000363dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0ffb  00000000  00000000  00040d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111cff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032d0  00000000  00000000  00111d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00115014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066bc 	.word	0x080066bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080066bc 	.word	0x080066bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <ESP8266_INIT>:

static char rx_buffer[512];
static ESP_Status SendCommand(const char *cmd, const char *ack, uint32_t timeout);

ESP_Status ESP8266_INIT(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    printf("Initializing ESP8266\n");
 8000e9c:	4810      	ldr	r0, [pc, #64]	@ (8000ee0 <ESP8266_INIT+0x48>)
 8000e9e:	f003 faab 	bl	80043f8 <puts>
    HAL_Delay(1000);
 8000ea2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ea6:	f000 fd85 	bl	80019b4 <HAL_Delay>
    if (SendCommand("AT\r\n", "OK", 2000) != ESP_OK)
 8000eaa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000eae:	490d      	ldr	r1, [pc, #52]	@ (8000ee4 <ESP8266_INIT+0x4c>)
 8000eb0:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <ESP8266_INIT+0x50>)
 8000eb2:	f000 f8f7 	bl	80010a4 <SendCommand>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <ESP8266_INIT+0x2e>
    {
        printf("ESP8266 Not Responding\n");
 8000ebc:	480b      	ldr	r0, [pc, #44]	@ (8000eec <ESP8266_INIT+0x54>)
 8000ebe:	f003 fa9b 	bl	80043f8 <puts>
        return ESP_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e009      	b.n	8000eda <ESP8266_INIT+0x42>
    }
    SendCommand("ATE0\r\n", "OK", 2000); // Disable Echo
 8000ec6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000eca:	4906      	ldr	r1, [pc, #24]	@ (8000ee4 <ESP8266_INIT+0x4c>)
 8000ecc:	4808      	ldr	r0, [pc, #32]	@ (8000ef0 <ESP8266_INIT+0x58>)
 8000ece:	f000 f8e9 	bl	80010a4 <SendCommand>
    printf("ESP8266 Initialized Successfully\n");
 8000ed2:	4808      	ldr	r0, [pc, #32]	@ (8000ef4 <ESP8266_INIT+0x5c>)
 8000ed4:	f003 fa90 	bl	80043f8 <puts>
    return ESP_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	080066d8 	.word	0x080066d8
 8000ee4:	080066f0 	.word	0x080066f0
 8000ee8:	080066f4 	.word	0x080066f4
 8000eec:	080066fc 	.word	0x080066fc
 8000ef0:	08006714 	.word	0x08006714
 8000ef4:	0800671c 	.word	0x0800671c

08000ef8 <ESP8266_CONNECTWIFI>:

ESP_Status ESP8266_CONNECTWIFI(const char *ssid, const char *password)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0a4      	sub	sp, #144	@ 0x90
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
    char cmd[128];
    snprintf(cmd, sizeof(cmd), "AT+CWMODE=1\r\n");
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4a1d      	ldr	r2, [pc, #116]	@ (8000f7c <ESP8266_CONNECTWIFI+0x84>)
 8000f08:	2180      	movs	r1, #128	@ 0x80
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 fa7c 	bl	8004408 <sniprintf>
    if (SendCommand(cmd, "OK", 2000) != ESP_OK)
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f18:	4919      	ldr	r1, [pc, #100]	@ (8000f80 <ESP8266_CONNECTWIFI+0x88>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f8c2 	bl	80010a4 <SendCommand>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d004      	beq.n	8000f30 <ESP8266_CONNECTWIFI+0x38>
    {
        printf("Station Mode Failed\n");
 8000f26:	4817      	ldr	r0, [pc, #92]	@ (8000f84 <ESP8266_CONNECTWIFI+0x8c>)
 8000f28:	f003 fa66 	bl	80043f8 <puts>
        return ESP_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e020      	b.n	8000f72 <ESP8266_CONNECTWIFI+0x7a>
    }
    printf("Connecting To : %s\n", ssid);
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4815      	ldr	r0, [pc, #84]	@ (8000f88 <ESP8266_CONNECTWIFI+0x90>)
 8000f34:	f003 f9f8 	bl	8004328 <iprintf>
    snprintf(cmd, sizeof(cmd), "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8000f38:	f107 0008 	add.w	r0, r7, #8
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <ESP8266_CONNECTWIFI+0x94>)
 8000f44:	2180      	movs	r1, #128	@ 0x80
 8000f46:	f003 fa5f 	bl	8004408 <sniprintf>
    if (SendCommand(cmd, "WIFI CONNECTED", 10000) != ESP_OK)
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f52:	490f      	ldr	r1, [pc, #60]	@ (8000f90 <ESP8266_CONNECTWIFI+0x98>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f8a5 	bl	80010a4 <SendCommand>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <ESP8266_CONNECTWIFI+0x72>
    {
        printf("WiFi Connection Failed\n");
 8000f60:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <ESP8266_CONNECTWIFI+0x9c>)
 8000f62:	f003 fa49 	bl	80043f8 <puts>
        return ESP_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e003      	b.n	8000f72 <ESP8266_CONNECTWIFI+0x7a>
    }
    printf("WiFi Connected\n");
 8000f6a:	480b      	ldr	r0, [pc, #44]	@ (8000f98 <ESP8266_CONNECTWIFI+0xa0>)
 8000f6c:	f003 fa44 	bl	80043f8 <puts>
    return ESP_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3788      	adds	r7, #136	@ 0x88
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	08006740 	.word	0x08006740
 8000f80:	080066f0 	.word	0x080066f0
 8000f84:	08006750 	.word	0x08006750
 8000f88:	08006764 	.word	0x08006764
 8000f8c:	08006778 	.word	0x08006778
 8000f90:	08006790 	.word	0x08006790
 8000f94:	080067a0 	.word	0x080067a0
 8000f98:	080067b8 	.word	0x080067b8

08000f9c <ESP8266_SENDDATATOCLOUD>:

ESP_Status ESP8266_SENDDATATOCLOUD(const char *apiKey, float value1)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0c4      	sub	sp, #272	@ 0x110
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000faa:	6018      	str	r0, [r3, #0]
 8000fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000fb4:	ed83 0a00 	vstr	s0, [r3]
    char cmd[128];
    // Start TCP connection
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 8000fb8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000fbc:	4a2f      	ldr	r2, [pc, #188]	@ (800107c <ESP8266_SENDDATATOCLOUD+0xe0>)
 8000fbe:	2180      	movs	r1, #128	@ 0x80
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f003 fa21 	bl	8004408 <sniprintf>
    if (SendCommand(cmd, "CONNECT", 5000) != ESP_OK)
 8000fc6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fce:	492c      	ldr	r1, [pc, #176]	@ (8001080 <ESP8266_SENDDATATOCLOUD+0xe4>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f867 	bl	80010a4 <SendCommand>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <ESP8266_SENDDATATOCLOUD+0x4a>
    {
        printf("TCP Connection Failed\n");
 8000fdc:	4829      	ldr	r0, [pc, #164]	@ (8001084 <ESP8266_SENDDATATOCLOUD+0xe8>)
 8000fde:	f003 fa0b 	bl	80043f8 <puts>
        return ESP_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e045      	b.n	8001072 <ESP8266_SENDDATATOCLOUD+0xd6>
    }
    // Build and send HTTP request
    char httpReq[128];
    snprintf(httpReq, sizeof(httpReq), "GET /update?api_key=%s&field1=%.2f\r\n", apiKey, value1);
 8000fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000fee:	6818      	ldr	r0, [r3, #0]
 8000ff0:	f7ff faaa 	bl	8000548 <__aeabi_f2d>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8000ffc:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 8001000:	f107 0008 	add.w	r0, r7, #8
 8001004:	e9cd 2300 	strd	r2, r3, [sp]
 8001008:	680b      	ldr	r3, [r1, #0]
 800100a:	4a1f      	ldr	r2, [pc, #124]	@ (8001088 <ESP8266_SENDDATATOCLOUD+0xec>)
 800100c:	2180      	movs	r1, #128	@ 0x80
 800100e:	f003 f9fb 	bl	8004408 <sniprintf>
    snprintf(cmd, sizeof(cmd), "AT+CIPSEND=%d\r\n", (int)strlen(httpReq));
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff f92a 	bl	8000270 <strlen>
 800101c:	4603      	mov	r3, r0
 800101e:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001022:	4a1a      	ldr	r2, [pc, #104]	@ (800108c <ESP8266_SENDDATATOCLOUD+0xf0>)
 8001024:	2180      	movs	r1, #128	@ 0x80
 8001026:	f003 f9ef 	bl	8004408 <sniprintf>
    if (SendCommand(cmd, ">", 2000) != ESP_OK)
 800102a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800102e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001032:	4917      	ldr	r1, [pc, #92]	@ (8001090 <ESP8266_SENDDATATOCLOUD+0xf4>)
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f835 	bl	80010a4 <SendCommand>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <ESP8266_SENDDATATOCLOUD+0xae>
    {
        printf("Send Preparation Failed\n");
 8001040:	4814      	ldr	r0, [pc, #80]	@ (8001094 <ESP8266_SENDDATATOCLOUD+0xf8>)
 8001042:	f003 f9d9 	bl	80043f8 <puts>
        return ESP_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e013      	b.n	8001072 <ESP8266_SENDDATATOCLOUD+0xd6>
    }
    if (SendCommand(httpReq, "SEND OK", 5000) != ESP_OK)
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001052:	4911      	ldr	r1, [pc, #68]	@ (8001098 <ESP8266_SENDDATATOCLOUD+0xfc>)
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f825 	bl	80010a4 <SendCommand>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <ESP8266_SENDDATATOCLOUD+0xce>
    {
        printf("HTTP Send Failed\n");
 8001060:	480e      	ldr	r0, [pc, #56]	@ (800109c <ESP8266_SENDDATATOCLOUD+0x100>)
 8001062:	f003 f9c9 	bl	80043f8 <puts>
        return ESP_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e003      	b.n	8001072 <ESP8266_SENDDATATOCLOUD+0xd6>
    }
    printf("Data Sent To Cloud With Successfully\n");
 800106a:	480d      	ldr	r0, [pc, #52]	@ (80010a0 <ESP8266_SENDDATATOCLOUD+0x104>)
 800106c:	f003 f9c4 	bl	80043f8 <puts>
    return ESP_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	080067c8 	.word	0x080067c8
 8001080:	080067f4 	.word	0x080067f4
 8001084:	080067fc 	.word	0x080067fc
 8001088:	08006814 	.word	0x08006814
 800108c:	0800683c 	.word	0x0800683c
 8001090:	0800684c 	.word	0x0800684c
 8001094:	08006850 	.word	0x08006850
 8001098:	08006868 	.word	0x08006868
 800109c:	08006870 	.word	0x08006870
 80010a0:	08006884 	.word	0x08006884

080010a4 <SendCommand>:

static ESP_Status SendCommand(const char *cmd, const char *ack, uint32_t timeout)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
    uint8_t  ch;
    uint16_t index 	= 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	83fb      	strh	r3, [r7, #30]
    uint32_t start 	= HAL_GetTick();
 80010b4:	f000 fc72 	bl	800199c <HAL_GetTick>
 80010b8:	61b8      	str	r0, [r7, #24]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 80010ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010be:	2100      	movs	r1, #0
 80010c0:	4829      	ldr	r0, [pc, #164]	@ (8001168 <SendCommand+0xc4>)
 80010c2:	f003 faad 	bl	8004620 <memset>
    // Send command
    if (strlen(cmd) > 0)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d03b      	beq.n	8001146 <SendCommand+0xa2>
    {
        HAL_UART_Transmit(&ESP_UART, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff f8ce 	bl	8000270 <strlen>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	68f9      	ldr	r1, [r7, #12]
 80010de:	4823      	ldr	r0, [pc, #140]	@ (800116c <SendCommand+0xc8>)
 80010e0:	f001 ffb6 	bl	8003050 <HAL_UART_Transmit>
    }
    // Receive response
    while ((HAL_GetTick() - start) < timeout && index < sizeof(rx_buffer) - 1)
 80010e4:	e02f      	b.n	8001146 <SendCommand+0xa2>
    {
        if (HAL_UART_Receive(&ESP_UART, &ch, 1, 10) == HAL_OK)
 80010e6:	f107 0117 	add.w	r1, r7, #23
 80010ea:	230a      	movs	r3, #10
 80010ec:	2201      	movs	r2, #1
 80010ee:	481f      	ldr	r0, [pc, #124]	@ (800116c <SendCommand+0xc8>)
 80010f0:	f002 f839 	bl	8003166 <HAL_UART_Receive>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d125      	bne.n	8001146 <SendCommand+0xa2>
        {
            rx_buffer[index++] = ch;
 80010fa:	8bfb      	ldrh	r3, [r7, #30]
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	83fa      	strh	r2, [r7, #30]
 8001100:	461a      	mov	r2, r3
 8001102:	7df9      	ldrb	r1, [r7, #23]
 8001104:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <SendCommand+0xc4>)
 8001106:	5499      	strb	r1, [r3, r2]
            rx_buffer[index] = '\0';
 8001108:	8bfb      	ldrh	r3, [r7, #30]
 800110a:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <SendCommand+0xc4>)
 800110c:	2100      	movs	r1, #0
 800110e:	54d1      	strb	r1, [r2, r3]
            if (strstr(rx_buffer, ack))
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	4815      	ldr	r0, [pc, #84]	@ (8001168 <SendCommand+0xc4>)
 8001114:	f003 fa8c 	bl	8004630 <strstr>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SendCommand+0x7e>
            {
                return ESP_OK; // ACK found
 800111e:	2300      	movs	r3, #0
 8001120:	e01e      	b.n	8001160 <SendCommand+0xbc>
            }

            if (strstr(rx_buffer, "busy"))
 8001122:	4913      	ldr	r1, [pc, #76]	@ (8001170 <SendCommand+0xcc>)
 8001124:	4810      	ldr	r0, [pc, #64]	@ (8001168 <SendCommand+0xc4>)
 8001126:	f003 fa83 	bl	8004630 <strstr>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00a      	beq.n	8001146 <SendCommand+0xa2>
            {
                HAL_Delay(1500);
 8001130:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001134:	f000 fc3e 	bl	80019b4 <HAL_Delay>
                return SendCommand(cmd, ack, timeout); // Retry
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f7ff ffb1 	bl	80010a4 <SendCommand>
 8001142:	4603      	mov	r3, r0
 8001144:	e00c      	b.n	8001160 <SendCommand+0xbc>
    while ((HAL_GetTick() - start) < timeout && index < sizeof(rx_buffer) - 1)
 8001146:	f000 fc29 	bl	800199c <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	429a      	cmp	r2, r3
 8001154:	d903      	bls.n	800115e <SendCommand+0xba>
 8001156:	8bfb      	ldrh	r3, [r7, #30]
 8001158:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 800115c:	d9c3      	bls.n	80010e6 <SendCommand+0x42>
            }
        }
    }
    return ESP_TIMEOUT; // Timeout
 800115e:	2302      	movs	r3, #2
}
 8001160:	4618      	mov	r0, r3
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200001f0 	.word	0x200001f0
 800116c:	20000480 	.word	0x20000480
 8001170:	080068ac 	.word	0x080068ac

08001174 <CheckConnection>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CheckConnection(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	if (ESP8266_INIT() != ESP_OK)
 8001178:	f7ff fe8e 	bl	8000e98 <ESP8266_INIT>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <CheckConnection+0x18>
	{
		  printf("ESP8266 Initialize Failed\n");
 8001182:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <CheckConnection+0x34>)
 8001184:	f003 f938 	bl	80043f8 <puts>
		  Error_Handler();
 8001188:	f000 f99c 	bl	80014c4 <Error_Handler>
	}
	if (ESP8266_CONNECTWIFI("SSID", "Password") != ESP_OK)
 800118c:	4907      	ldr	r1, [pc, #28]	@ (80011ac <CheckConnection+0x38>)
 800118e:	4808      	ldr	r0, [pc, #32]	@ (80011b0 <CheckConnection+0x3c>)
 8001190:	f7ff feb2 	bl	8000ef8 <ESP8266_CONNECTWIFI>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <CheckConnection+0x30>
	{
	  printf("WiFi Connection Failed\n");
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <CheckConnection+0x40>)
 800119c:	f003 f92c 	bl	80043f8 <puts>
	  Error_Handler();
 80011a0:	f000 f990 	bl	80014c4 <Error_Handler>
	}
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	080068b4 	.word	0x080068b4
 80011ac:	080068d0 	.word	0x080068d0
 80011b0:	080068dc 	.word	0x080068dc
 80011b4:	080068e4 	.word	0x080068e4

080011b8 <_write>:
int _write(int file, char *ptr, int len)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 100);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	2364      	movs	r3, #100	@ 0x64
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	4803      	ldr	r0, [pc, #12]	@ (80011dc <_write+0x24>)
 80011ce:	f001 ff3f 	bl	8003050 <HAL_UART_Transmit>
	return len;
 80011d2:	687b      	ldr	r3, [r7, #4]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000438 	.word	0x20000438

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e4:	f000 fb74 	bl	80018d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e8:	f000 f832 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ec:	f000 f942 	bl	8001474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011f0:	f000 f8ec 	bl	80013cc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80011f4:	f000 f914 	bl	8001420 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80011f8:	f000 f894 	bl	8001324 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  CheckConnection();
 80011fc:	f7ff ffba 	bl	8001174 <CheckConnection>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8001200:	4810      	ldr	r0, [pc, #64]	@ (8001244 <main+0x64>)
 8001202:	f000 fc3f 	bl	8001a84 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8001206:	2164      	movs	r1, #100	@ 0x64
 8001208:	480e      	ldr	r0, [pc, #56]	@ (8001244 <main+0x64>)
 800120a:	f000 fd40 	bl	8001c8e <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 800120e:	480d      	ldr	r0, [pc, #52]	@ (8001244 <main+0x64>)
 8001210:	f000 fdc8 	bl	8001da4 <HAL_ADC_GetValue>
 8001214:	4603      	mov	r3, r0
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <main+0x68>)
 800121a:	701a      	strb	r2, [r3, #0]
	  ESP8266_SENDDATATOCLOUD(API_KEY, adc_value);
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <main+0x68>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	ee07 3a90 	vmov	s15, r3
 8001224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001228:	eeb0 0a67 	vmov.f32	s0, s15
 800122c:	4807      	ldr	r0, [pc, #28]	@ (800124c <main+0x6c>)
 800122e:	f7ff feb5 	bl	8000f9c <ESP8266_SENDDATATOCLOUD>
	  HAL_ADC_Stop(&hadc1);
 8001232:	4804      	ldr	r0, [pc, #16]	@ (8001244 <main+0x64>)
 8001234:	f000 fcf8 	bl	8001c28 <HAL_ADC_Stop>
	  HAL_Delay(15000);
 8001238:	f643 2098 	movw	r0, #15000	@ 0x3a98
 800123c:	f000 fbba 	bl	80019b4 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001240:	bf00      	nop
 8001242:	e7dd      	b.n	8001200 <main+0x20>
 8001244:	200003f0 	.word	0x200003f0
 8001248:	200004c8 	.word	0x200004c8
 800124c:	080068fc 	.word	0x080068fc

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b094      	sub	sp, #80	@ 0x50
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	2230      	movs	r2, #48	@ 0x30
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f003 f9de 	bl	8004620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b28      	ldr	r3, [pc, #160]	@ (800131c <SystemClock_Config+0xcc>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	4a27      	ldr	r2, [pc, #156]	@ (800131c <SystemClock_Config+0xcc>)
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001282:	6413      	str	r3, [r2, #64]	@ 0x40
 8001284:	4b25      	ldr	r3, [pc, #148]	@ (800131c <SystemClock_Config+0xcc>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	4b22      	ldr	r3, [pc, #136]	@ (8001320 <SystemClock_Config+0xd0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a21      	ldr	r2, [pc, #132]	@ (8001320 <SystemClock_Config+0xd0>)
 800129a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <SystemClock_Config+0xd0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	2302      	movs	r3, #2
 80012ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b4:	2310      	movs	r3, #16
 80012b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b8:	2302      	movs	r3, #2
 80012ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012bc:	2300      	movs	r3, #0
 80012be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c0:	2308      	movs	r3, #8
 80012c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012c4:	23a8      	movs	r3, #168	@ 0xa8
 80012c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012cc:	2304      	movs	r3, #4
 80012ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 fa13 	bl	8002700 <HAL_RCC_OscConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e0:	f000 f8f0 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e4:	230f      	movs	r3, #15
 80012e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e8:	2302      	movs	r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2105      	movs	r1, #5
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fc74 	bl	8002bf0 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800130e:	f000 f8d9 	bl	80014c4 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3750      	adds	r7, #80	@ 0x50
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001336:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 8001338:	4a22      	ldr	r2, [pc, #136]	@ (80013c4 <MX_ADC1_Init+0xa0>)
 800133a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800133c:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 800133e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001342:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001344:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 8001346:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800134a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800134c:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001352:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 8001354:	2201      	movs	r2, #1
 8001356:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 8001362:	2200      	movs	r2, #0
 8001364:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 8001368:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <MX_ADC1_Init+0xa4>)
 800136a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 8001374:	2201      	movs	r2, #1
 8001376:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 8001382:	2201      	movs	r2, #1
 8001384:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001386:	480e      	ldr	r0, [pc, #56]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 8001388:	f000 fb38 	bl	80019fc <HAL_ADC_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001392:	f000 f897 	bl	80014c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001396:	2304      	movs	r3, #4
 8001398:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800139a:	2301      	movs	r3, #1
 800139c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	4619      	mov	r1, r3
 80013a6:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <MX_ADC1_Init+0x9c>)
 80013a8:	f000 fd0a 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80013b2:	f000 f887 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200003f0 	.word	0x200003f0
 80013c4:	40012000 	.word	0x40012000
 80013c8:	0f000001 	.word	0x0f000001

080013cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	@ (800141c <MX_USART2_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 8001404:	f001 fdd4 	bl	8002fb0 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 f859 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000438 	.word	0x20000438
 800141c:	40004400 	.word	0x40004400

08001420 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_USART6_UART_Init+0x4c>)
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <MX_USART6_UART_Init+0x50>)
 8001428:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <MX_USART6_UART_Init+0x4c>)
 800142c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001430:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_USART6_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_USART6_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <MX_USART6_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_USART6_UART_Init+0x4c>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <MX_USART6_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_USART6_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_USART6_UART_Init+0x4c>)
 8001458:	f001 fdaa 	bl	8002fb0 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001462:	f000 f82f 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000480 	.word	0x20000480
 8001470:	40011400 	.word	0x40011400

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <MX_GPIO_Init+0x4c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a0f      	ldr	r2, [pc, #60]	@ (80014c0 <MX_GPIO_Init+0x4c>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <MX_GPIO_Init+0x4c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <MX_GPIO_Init+0x4c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a08      	ldr	r2, [pc, #32]	@ (80014c0 <MX_GPIO_Init+0x4c>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <MX_GPIO_Init+0x4c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <Error_Handler+0x8>

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <HAL_MspInit+0x4c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	4a0f      	ldr	r2, [pc, #60]	@ (800151c <HAL_MspInit+0x4c>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <HAL_MspInit+0x4c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4a08      	ldr	r2, [pc, #32]	@ (800151c <HAL_MspInit+0x4c>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a17      	ldr	r2, [pc, #92]	@ (800159c <HAL_ADC_MspInit+0x7c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d127      	bne.n	8001592 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <HAL_ADC_MspInit+0x80>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <HAL_ADC_MspInit+0x80>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001550:	6453      	str	r3, [r2, #68]	@ 0x44
 8001552:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <HAL_ADC_MspInit+0x80>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <HAL_ADC_MspInit+0x80>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a0e      	ldr	r2, [pc, #56]	@ (80015a0 <HAL_ADC_MspInit+0x80>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <HAL_ADC_MspInit+0x80>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800157a:	2310      	movs	r3, #16
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157e:	2303      	movs	r3, #3
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <HAL_ADC_MspInit+0x84>)
 800158e:	f000 ff1b 	bl	80023c8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	@ 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40012000 	.word	0x40012000
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000

080015a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	@ 0x30
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a32      	ldr	r2, [pc, #200]	@ (8001690 <HAL_UART_MspInit+0xe8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12c      	bne.n	8001624 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	4b31      	ldr	r3, [pc, #196]	@ (8001694 <HAL_UART_MspInit+0xec>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	4a30      	ldr	r2, [pc, #192]	@ (8001694 <HAL_UART_MspInit+0xec>)
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015da:	4b2e      	ldr	r3, [pc, #184]	@ (8001694 <HAL_UART_MspInit+0xec>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <HAL_UART_MspInit+0xec>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a29      	ldr	r2, [pc, #164]	@ (8001694 <HAL_UART_MspInit+0xec>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b27      	ldr	r3, [pc, #156]	@ (8001694 <HAL_UART_MspInit+0xec>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001602:	230c      	movs	r3, #12
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001612:	2307      	movs	r3, #7
 8001614:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	481e      	ldr	r0, [pc, #120]	@ (8001698 <HAL_UART_MspInit+0xf0>)
 800161e:	f000 fed3 	bl	80023c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001622:	e030      	b.n	8001686 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1c      	ldr	r2, [pc, #112]	@ (800169c <HAL_UART_MspInit+0xf4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d12b      	bne.n	8001686 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <HAL_UART_MspInit+0xec>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	4a17      	ldr	r2, [pc, #92]	@ (8001694 <HAL_UART_MspInit+0xec>)
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	6453      	str	r3, [r2, #68]	@ 0x44
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <HAL_UART_MspInit+0xec>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	f003 0320 	and.w	r3, r3, #32
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <HAL_UART_MspInit+0xec>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a10      	ldr	r2, [pc, #64]	@ (8001694 <HAL_UART_MspInit+0xec>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <HAL_UART_MspInit+0xec>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001666:	23c0      	movs	r3, #192	@ 0xc0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001676:	2308      	movs	r3, #8
 8001678:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	4619      	mov	r1, r3
 8001680:	4807      	ldr	r0, [pc, #28]	@ (80016a0 <HAL_UART_MspInit+0xf8>)
 8001682:	f000 fea1 	bl	80023c8 <HAL_GPIO_Init>
}
 8001686:	bf00      	nop
 8001688:	3730      	adds	r7, #48	@ 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40004400 	.word	0x40004400
 8001694:	40023800 	.word	0x40023800
 8001698:	40020000 	.word	0x40020000
 800169c:	40011400 	.word	0x40011400
 80016a0:	40020800 	.word	0x40020800

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <NMI_Handler+0x4>

080016ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <MemManage_Handler+0x4>

080016bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <UsageFault_Handler+0x4>

080016cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fa:	f000 f93b 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}

08001702 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  return 1;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_kill>:

int _kill(int pid, int sig)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800171c:	f002 ffe8 	bl	80046f0 <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	2216      	movs	r2, #22
 8001724:	601a      	str	r2, [r3, #0]
  return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_exit>:

void _exit (int status)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800173a:	f04f 31ff 	mov.w	r1, #4294967295
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffe7 	bl	8001712 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <_exit+0x12>

08001748 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e00a      	b.n	8001770 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800175a:	f3af 8000 	nop.w
 800175e:	4601      	mov	r1, r0
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	60ba      	str	r2, [r7, #8]
 8001766:	b2ca      	uxtb	r2, r1
 8001768:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf0      	blt.n	800175a <_read+0x12>
  }

  return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017aa:	605a      	str	r2, [r3, #4]
  return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_isatty>:

int _isatty(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	@ (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f002 ff68 	bl	80046f0 <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	@ (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20020000 	.word	0x20020000
 800184c:	00000400 	.word	0x00000400
 8001850:	200004cc 	.word	0x200004cc
 8001854:	20000620 	.word	0x20000620

08001858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <SystemInit+0x20>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001862:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <SystemInit+0x20>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001880:	f7ff ffea 	bl	8001858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001884:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001886:	490d      	ldr	r1, [pc, #52]	@ (80018bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001888:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800189c:	4c0a      	ldr	r4, [pc, #40]	@ (80018c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018aa:	f002 ff27 	bl	80046fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ae:	f7ff fc97 	bl	80011e0 <main>
  bx  lr    
 80018b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018c0:	08006ca8 	.word	0x08006ca8
  ldr r2, =_sbss
 80018c4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018c8:	20000620 	.word	0x20000620

080018cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC_IRQHandler>
	...

080018d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <HAL_Init+0x40>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <HAL_Init+0x40>)
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	@ (8001910 <HAL_Init+0x40>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 fd31 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	200f      	movs	r0, #15
 8001900:	f000 f808 	bl	8001914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fde4 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_InitTick+0x54>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_InitTick+0x58>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fd3b 	bl	80023ae <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f000 fd11 	bl	8002376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	@ (8001970 <HAL_InitTick+0x5c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000000 	.word	0x20000000
 800196c:	20000008 	.word	0x20000008
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008
 8001998:	200004d0 	.word	0x200004d0

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	200004d0 	.word	0x200004d0

080019b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff ffee 	bl	800199c <HAL_GetTick>
 80019c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d005      	beq.n	80019da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ce:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <HAL_Delay+0x44>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019da:	bf00      	nop
 80019dc:	f7ff ffde 	bl	800199c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d8f7      	bhi.n	80019dc <HAL_Delay+0x28>
  {
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000008 	.word	0x20000008

080019fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e033      	b.n	8001a7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fd80 	bl	8001520 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d118      	bne.n	8001a6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a42:	f023 0302 	bic.w	r3, r3, #2
 8001a46:	f043 0202 	orr.w	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fad8 	bl	8002004 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f023 0303 	bic.w	r3, r3, #3
 8001a62:	f043 0201 	orr.w	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a6a:	e001      	b.n	8001a70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Start+0x1a>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e0b2      	b.n	8001c04 <HAL_ADC_Start+0x180>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d018      	beq.n	8001ae6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac4:	4b52      	ldr	r3, [pc, #328]	@ (8001c10 <HAL_ADC_Start+0x18c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	@ (8001c14 <HAL_ADC_Start+0x190>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9a      	lsrs	r2, r3, #18
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ad8:	e002      	b.n	8001ae0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f9      	bne.n	8001ada <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d17a      	bne.n	8001bea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b32:	d106      	bne.n	8001b42 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b38:	f023 0206 	bic.w	r2, r3, #6
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b40:	e002      	b.n	8001b48 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b50:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <HAL_ADC_Start+0x194>)
 8001b52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b5c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d12a      	bne.n	8001bc0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001c1c <HAL_ADC_Start+0x198>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d015      	beq.n	8001ba0 <HAL_ADC_Start+0x11c>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a29      	ldr	r2, [pc, #164]	@ (8001c20 <HAL_ADC_Start+0x19c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d105      	bne.n	8001b8a <HAL_ADC_Start+0x106>
 8001b7e:	4b26      	ldr	r3, [pc, #152]	@ (8001c18 <HAL_ADC_Start+0x194>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00a      	beq.n	8001ba0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a25      	ldr	r2, [pc, #148]	@ (8001c24 <HAL_ADC_Start+0x1a0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d136      	bne.n	8001c02 <HAL_ADC_Start+0x17e>
 8001b94:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <HAL_ADC_Start+0x194>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d130      	bne.n	8001c02 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d129      	bne.n	8001c02 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	e020      	b.n	8001c02 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a15      	ldr	r2, [pc, #84]	@ (8001c1c <HAL_ADC_Start+0x198>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d11b      	bne.n	8001c02 <HAL_ADC_Start+0x17e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d114      	bne.n	8001c02 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	e00b      	b.n	8001c02 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f043 0210 	orr.w	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	20000000 	.word	0x20000000
 8001c14:	431bde83 	.word	0x431bde83
 8001c18:	40012300 	.word	0x40012300
 8001c1c:	40012000 	.word	0x40012000
 8001c20:	40012100 	.word	0x40012100
 8001c24:	40012200 	.word	0x40012200

08001c28 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_Stop+0x16>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e021      	b.n	8001c82 <HAL_ADC_Stop+0x5a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001caa:	d113      	bne.n	8001cd4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cba:	d10b      	bne.n	8001cd4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e063      	b.n	8001d9c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cd4:	f7ff fe62 	bl	800199c <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cda:	e021      	b.n	8001d20 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce2:	d01d      	beq.n	8001d20 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_ADC_PollForConversion+0x6c>
 8001cea:	f7ff fe57 	bl	800199c <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d212      	bcs.n	8001d20 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d00b      	beq.n	8001d20 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f043 0204 	orr.w	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e03d      	b.n	8001d9c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d1d6      	bne.n	8001cdc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f06f 0212 	mvn.w	r2, #18
 8001d36:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d123      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11f      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d60:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d111      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d105      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x1c>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e105      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x228>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	d925      	bls.n	8001e38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68d9      	ldr	r1, [r3, #12]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b1e      	subs	r3, #30
 8001e02:	2207      	movs	r2, #7
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43da      	mvns	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	400a      	ands	r2, r1
 8001e10:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68d9      	ldr	r1, [r3, #12]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	4603      	mov	r3, r0
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4403      	add	r3, r0
 8001e2a:	3b1e      	subs	r3, #30
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	e022      	b.n	8001e7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6919      	ldr	r1, [r3, #16]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	400a      	ands	r2, r1
 8001e5a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4403      	add	r3, r0
 8001e74:	409a      	lsls	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d824      	bhi.n	8001ed0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	3b05      	subs	r3, #5
 8001e98:	221f      	movs	r2, #31
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b05      	subs	r3, #5
 8001ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ece:	e04c      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d824      	bhi.n	8001f22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b23      	subs	r3, #35	@ 0x23
 8001eea:	221f      	movs	r2, #31
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b23      	subs	r3, #35	@ 0x23
 8001f14:	fa00 f203 	lsl.w	r2, r0, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f20:	e023      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	3b41      	subs	r3, #65	@ 0x41
 8001f34:	221f      	movs	r2, #31
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	400a      	ands	r2, r1
 8001f42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b41      	subs	r3, #65	@ 0x41
 8001f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x234>)
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a21      	ldr	r2, [pc, #132]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x238>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d109      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1cc>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b12      	cmp	r3, #18
 8001f7e:	d105      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x238>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d123      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x21e>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d003      	beq.n	8001fa6 <HAL_ADC_ConfigChannel+0x1e6>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b11      	cmp	r3, #17
 8001fa4:	d11b      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d111      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <HAL_ADC_ConfigChannel+0x23c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a10      	ldr	r2, [pc, #64]	@ (8002000 <HAL_ADC_ConfigChannel+0x240>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9a      	lsrs	r2, r3, #18
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	40012300 	.word	0x40012300
 8001ff8:	40012000 	.word	0x40012000
 8001ffc:	20000000 	.word	0x20000000
 8002000:	431bde83 	.word	0x431bde83

08002004 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800200c:	4b79      	ldr	r3, [pc, #484]	@ (80021f4 <ADC_Init+0x1f0>)
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	431a      	orrs	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002038:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	021a      	lsls	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800205c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800207e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6899      	ldr	r1, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002096:	4a58      	ldr	r2, [pc, #352]	@ (80021f8 <ADC_Init+0x1f4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d022      	beq.n	80020e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6899      	ldr	r1, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6899      	ldr	r1, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	e00f      	b.n	8002102 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002100:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0202 	bic.w	r2, r2, #2
 8002110:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6899      	ldr	r1, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7e1b      	ldrb	r3, [r3, #24]
 800211c:	005a      	lsls	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800213e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800214e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215a:	3b01      	subs	r3, #1
 800215c:	035a      	lsls	r2, r3, #13
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	e007      	b.n	8002178 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002176:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002186:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	3b01      	subs	r3, #1
 8002194:	051a      	lsls	r2, r3, #20
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6899      	ldr	r1, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021ba:	025a      	lsls	r2, r3, #9
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	029a      	lsls	r2, r3, #10
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	40012300 	.word	0x40012300
 80021f8:	0f000001 	.word	0x0f000001

080021fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800222c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222e:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	60d3      	str	r3, [r2, #12]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	@ (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	@ (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	@ 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	@ 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f7ff ff8e 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	@ (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff47 	bl	80021fc <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002388:	f7ff ff5c 	bl	8002244 <__NVIC_GetPriorityGrouping>
 800238c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff ff8e 	bl	80022b4 <NVIC_EncodePriority>
 8002398:	4602      	mov	r2, r0
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff5d 	bl	8002260 <__NVIC_SetPriority>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ffb0 	bl	800231c <SysTick_Config>
 80023bc:	4603      	mov	r3, r0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	@ 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	e16b      	b.n	80026bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e4:	2201      	movs	r2, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	f040 815a 	bne.w	80026b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d005      	beq.n	800241a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002416:	2b02      	cmp	r3, #2
 8002418:	d130      	bne.n	800247c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002450:	2201      	movs	r2, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 0201 	and.w	r2, r3, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b03      	cmp	r3, #3
 8002486:	d017      	beq.n	80024b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d123      	bne.n	800250c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	08da      	lsrs	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3208      	adds	r2, #8
 8002506:	69b9      	ldr	r1, [r7, #24]
 8002508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0203 	and.w	r2, r3, #3
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80b4 	beq.w	80026b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b60      	ldr	r3, [pc, #384]	@ (80026d4 <HAL_GPIO_Init+0x30c>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	4a5f      	ldr	r2, [pc, #380]	@ (80026d4 <HAL_GPIO_Init+0x30c>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800255c:	6453      	str	r3, [r2, #68]	@ 0x44
 800255e:	4b5d      	ldr	r3, [pc, #372]	@ (80026d4 <HAL_GPIO_Init+0x30c>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800256a:	4a5b      	ldr	r2, [pc, #364]	@ (80026d8 <HAL_GPIO_Init+0x310>)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	3302      	adds	r3, #2
 8002572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	220f      	movs	r2, #15
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a52      	ldr	r2, [pc, #328]	@ (80026dc <HAL_GPIO_Init+0x314>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d02b      	beq.n	80025ee <HAL_GPIO_Init+0x226>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a51      	ldr	r2, [pc, #324]	@ (80026e0 <HAL_GPIO_Init+0x318>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d025      	beq.n	80025ea <HAL_GPIO_Init+0x222>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a50      	ldr	r2, [pc, #320]	@ (80026e4 <HAL_GPIO_Init+0x31c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01f      	beq.n	80025e6 <HAL_GPIO_Init+0x21e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4f      	ldr	r2, [pc, #316]	@ (80026e8 <HAL_GPIO_Init+0x320>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d019      	beq.n	80025e2 <HAL_GPIO_Init+0x21a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4e      	ldr	r2, [pc, #312]	@ (80026ec <HAL_GPIO_Init+0x324>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_GPIO_Init+0x216>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4d      	ldr	r2, [pc, #308]	@ (80026f0 <HAL_GPIO_Init+0x328>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00d      	beq.n	80025da <HAL_GPIO_Init+0x212>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4c      	ldr	r2, [pc, #304]	@ (80026f4 <HAL_GPIO_Init+0x32c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d007      	beq.n	80025d6 <HAL_GPIO_Init+0x20e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4b      	ldr	r2, [pc, #300]	@ (80026f8 <HAL_GPIO_Init+0x330>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_GPIO_Init+0x20a>
 80025ce:	2307      	movs	r3, #7
 80025d0:	e00e      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025d2:	2308      	movs	r3, #8
 80025d4:	e00c      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025d6:	2306      	movs	r3, #6
 80025d8:	e00a      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025da:	2305      	movs	r3, #5
 80025dc:	e008      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025de:	2304      	movs	r3, #4
 80025e0:	e006      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025e2:	2303      	movs	r3, #3
 80025e4:	e004      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e002      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_GPIO_Init+0x228>
 80025ee:	2300      	movs	r3, #0
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	f002 0203 	and.w	r2, r2, #3
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	4093      	lsls	r3, r2
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002600:	4935      	ldr	r1, [pc, #212]	@ (80026d8 <HAL_GPIO_Init+0x310>)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	3302      	adds	r3, #2
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260e:	4b3b      	ldr	r3, [pc, #236]	@ (80026fc <HAL_GPIO_Init+0x334>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002632:	4a32      	ldr	r2, [pc, #200]	@ (80026fc <HAL_GPIO_Init+0x334>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002638:	4b30      	ldr	r3, [pc, #192]	@ (80026fc <HAL_GPIO_Init+0x334>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800265c:	4a27      	ldr	r2, [pc, #156]	@ (80026fc <HAL_GPIO_Init+0x334>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002662:	4b26      	ldr	r3, [pc, #152]	@ (80026fc <HAL_GPIO_Init+0x334>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002686:	4a1d      	ldr	r2, [pc, #116]	@ (80026fc <HAL_GPIO_Init+0x334>)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800268c:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <HAL_GPIO_Init+0x334>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b0:	4a12      	ldr	r2, [pc, #72]	@ (80026fc <HAL_GPIO_Init+0x334>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3301      	adds	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b0f      	cmp	r3, #15
 80026c0:	f67f ae90 	bls.w	80023e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	3724      	adds	r7, #36	@ 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40013800 	.word	0x40013800
 80026dc:	40020000 	.word	0x40020000
 80026e0:	40020400 	.word	0x40020400
 80026e4:	40020800 	.word	0x40020800
 80026e8:	40020c00 	.word	0x40020c00
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40021400 	.word	0x40021400
 80026f4:	40021800 	.word	0x40021800
 80026f8:	40021c00 	.word	0x40021c00
 80026fc:	40013c00 	.word	0x40013c00

08002700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e267      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d075      	beq.n	800280a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800271e:	4b88      	ldr	r3, [pc, #544]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b04      	cmp	r3, #4
 8002728:	d00c      	beq.n	8002744 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272a:	4b85      	ldr	r3, [pc, #532]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002732:	2b08      	cmp	r3, #8
 8002734:	d112      	bne.n	800275c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002736:	4b82      	ldr	r3, [pc, #520]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800273e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002742:	d10b      	bne.n	800275c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	4b7e      	ldr	r3, [pc, #504]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d05b      	beq.n	8002808 <HAL_RCC_OscConfig+0x108>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d157      	bne.n	8002808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e242      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002764:	d106      	bne.n	8002774 <HAL_RCC_OscConfig+0x74>
 8002766:	4b76      	ldr	r3, [pc, #472]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a75      	ldr	r2, [pc, #468]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e01d      	b.n	80027b0 <HAL_RCC_OscConfig+0xb0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x98>
 800277e:	4b70      	ldr	r3, [pc, #448]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6f      	ldr	r2, [pc, #444]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b6d      	ldr	r3, [pc, #436]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6c      	ldr	r2, [pc, #432]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e00b      	b.n	80027b0 <HAL_RCC_OscConfig+0xb0>
 8002798:	4b69      	ldr	r3, [pc, #420]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a68      	ldr	r2, [pc, #416]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 800279e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b66      	ldr	r3, [pc, #408]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a65      	ldr	r2, [pc, #404]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 80027aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7ff f8f0 	bl	800199c <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7ff f8ec 	bl	800199c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	@ 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e207      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0xc0>
 80027de:	e014      	b.n	800280a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff f8dc 	bl	800199c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7ff f8d8 	bl	800199c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	@ 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1f3      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	4b51      	ldr	r3, [pc, #324]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0xe8>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d063      	beq.n	80028de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002816:	4b4a      	ldr	r3, [pc, #296]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002822:	4b47      	ldr	r3, [pc, #284]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800282a:	2b08      	cmp	r3, #8
 800282c:	d11c      	bne.n	8002868 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282e:	4b44      	ldr	r3, [pc, #272]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d116      	bne.n	8002868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	4b41      	ldr	r3, [pc, #260]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_RCC_OscConfig+0x152>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e1c7      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b3b      	ldr	r3, [pc, #236]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4937      	ldr	r1, [pc, #220]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	e03a      	b.n	80028de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002870:	4b34      	ldr	r3, [pc, #208]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7ff f891 	bl	800199c <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7ff f88d 	bl	800199c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e1a8      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	4b2b      	ldr	r3, [pc, #172]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b28      	ldr	r3, [pc, #160]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4925      	ldr	r1, [pc, #148]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
 80028b0:	e015      	b.n	80028de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	4b24      	ldr	r3, [pc, #144]	@ (8002944 <HAL_RCC_OscConfig+0x244>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7ff f870 	bl	800199c <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c0:	f7ff f86c 	bl	800199c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e187      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d036      	beq.n	8002958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d016      	beq.n	8002920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f2:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <HAL_RCC_OscConfig+0x248>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7ff f850 	bl	800199c <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002900:	f7ff f84c 	bl	800199c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e167      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_OscConfig+0x240>)
 8002914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x200>
 800291e:	e01b      	b.n	8002958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002920:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <HAL_RCC_OscConfig+0x248>)
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7ff f839 	bl	800199c <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	e00e      	b.n	800294c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292e:	f7ff f835 	bl	800199c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d907      	bls.n	800294c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e150      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
 8002940:	40023800 	.word	0x40023800
 8002944:	42470000 	.word	0x42470000
 8002948:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	4b88      	ldr	r3, [pc, #544]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 800294e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ea      	bne.n	800292e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8097 	beq.w	8002a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b81      	ldr	r3, [pc, #516]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10f      	bne.n	8002996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	@ 0x40
 8002986:	4b7a      	ldr	r3, [pc, #488]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002996:	4b77      	ldr	r3, [pc, #476]	@ (8002b74 <HAL_RCC_OscConfig+0x474>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d118      	bne.n	80029d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a2:	4b74      	ldr	r3, [pc, #464]	@ (8002b74 <HAL_RCC_OscConfig+0x474>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a73      	ldr	r2, [pc, #460]	@ (8002b74 <HAL_RCC_OscConfig+0x474>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fff5 	bl	800199c <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b6:	f7fe fff1 	bl	800199c <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e10c      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b74 <HAL_RCC_OscConfig+0x474>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x2ea>
 80029dc:	4b64      	ldr	r3, [pc, #400]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e0:	4a63      	ldr	r2, [pc, #396]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e8:	e01c      	b.n	8002a24 <HAL_RCC_OscConfig+0x324>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x30c>
 80029f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a02:	4a5b      	ldr	r2, [pc, #364]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0x324>
 8002a0c:	4b58      	ldr	r3, [pc, #352]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	4a57      	ldr	r2, [pc, #348]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a18:	4b55      	ldr	r3, [pc, #340]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1c:	4a54      	ldr	r2, [pc, #336]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	f023 0304 	bic.w	r3, r3, #4
 8002a22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d015      	beq.n	8002a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe ffb6 	bl	800199c <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7fe ffb2 	bl	800199c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0cb      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4a:	4b49      	ldr	r3, [pc, #292]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ee      	beq.n	8002a34 <HAL_RCC_OscConfig+0x334>
 8002a56:	e014      	b.n	8002a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a58:	f7fe ffa0 	bl	800199c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe ff9c 	bl	800199c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0b5      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a76:	4b3e      	ldr	r3, [pc, #248]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ee      	bne.n	8002a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b39      	ldr	r3, [pc, #228]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	4a38      	ldr	r2, [pc, #224]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80a1 	beq.w	8002be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a9e:	4b34      	ldr	r3, [pc, #208]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d05c      	beq.n	8002b64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d141      	bne.n	8002b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b31      	ldr	r3, [pc, #196]	@ (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe ff70 	bl	800199c <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe ff6c 	bl	800199c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e087      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	4b27      	ldr	r3, [pc, #156]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	019b      	lsls	r3, r3, #6
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	3b01      	subs	r3, #1
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	491b      	ldr	r1, [pc, #108]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b08:	4b1b      	ldr	r3, [pc, #108]	@ (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe ff45 	bl	800199c <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7fe ff41 	bl	800199c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e05c      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b28:	4b11      	ldr	r3, [pc, #68]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x416>
 8002b34:	e054      	b.n	8002be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b36:	4b10      	ldr	r3, [pc, #64]	@ (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe ff2e 	bl	800199c <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe ff2a 	bl	800199c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e045      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x444>
 8002b62:	e03d      	b.n	8002be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d107      	bne.n	8002b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e038      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40007000 	.word	0x40007000
 8002b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <HAL_RCC_OscConfig+0x4ec>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d028      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d121      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d11a      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bac:	4013      	ands	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d111      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800

08002bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0cc      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c04:	4b68      	ldr	r3, [pc, #416]	@ (8002da8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d90c      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b65      	ldr	r3, [pc, #404]	@ (8002da8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b63      	ldr	r3, [pc, #396]	@ (8002da8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0b8      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d020      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c44:	4b59      	ldr	r3, [pc, #356]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4a58      	ldr	r2, [pc, #352]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c5c:	4b53      	ldr	r3, [pc, #332]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a52      	ldr	r2, [pc, #328]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c68:	4b50      	ldr	r3, [pc, #320]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	494d      	ldr	r1, [pc, #308]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d044      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b47      	ldr	r3, [pc, #284]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d119      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e07f      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d003      	beq.n	8002cae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cae:	4b3f      	ldr	r3, [pc, #252]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e06f      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e067      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cce:	4b37      	ldr	r3, [pc, #220]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f023 0203 	bic.w	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4934      	ldr	r1, [pc, #208]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce0:	f7fe fe5c 	bl	800199c <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce8:	f7fe fe58 	bl	800199c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e04f      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 020c 	and.w	r2, r3, #12
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d1eb      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d10:	4b25      	ldr	r3, [pc, #148]	@ (8002da8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d20c      	bcs.n	8002d38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b22      	ldr	r3, [pc, #136]	@ (8002da8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e032      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d44:	4b19      	ldr	r3, [pc, #100]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4916      	ldr	r1, [pc, #88]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d62:	4b12      	ldr	r3, [pc, #72]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	490e      	ldr	r1, [pc, #56]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d76:	f000 f821 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	490a      	ldr	r1, [pc, #40]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d88:	5ccb      	ldrb	r3, [r1, r3]
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	4a09      	ldr	r2, [pc, #36]	@ (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d92:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fdbc 	bl	8001914 <HAL_InitTick>

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023c00 	.word	0x40023c00
 8002dac:	40023800 	.word	0x40023800
 8002db0:	08006910 	.word	0x08006910
 8002db4:	20000000 	.word	0x20000000
 8002db8:	20000004 	.word	0x20000004

08002dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc0:	b090      	sub	sp, #64	@ 0x40
 8002dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd4:	4b59      	ldr	r3, [pc, #356]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d00d      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x40>
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	f200 80a1 	bhi.w	8002f28 <HAL_RCC_GetSysClockFreq+0x16c>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dee:	e09b      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002df0:	4b53      	ldr	r3, [pc, #332]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002df2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002df4:	e09b      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002df6:	4b53      	ldr	r3, [pc, #332]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002df8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dfa:	e098      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e06:	4b4d      	ldr	r3, [pc, #308]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d028      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e12:	4b4a      	ldr	r3, [pc, #296]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	099b      	lsrs	r3, r3, #6
 8002e18:	2200      	movs	r2, #0
 8002e1a:	623b      	str	r3, [r7, #32]
 8002e1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e24:	2100      	movs	r1, #0
 8002e26:	4b47      	ldr	r3, [pc, #284]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e28:	fb03 f201 	mul.w	r2, r3, r1
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	fb00 f303 	mul.w	r3, r0, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	4a43      	ldr	r2, [pc, #268]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e36:	fba0 1202 	umull	r1, r2, r0, r2
 8002e3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e42:	4413      	add	r3, r2
 8002e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e48:	2200      	movs	r2, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	61fa      	str	r2, [r7, #28]
 8002e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e56:	f7fd fea7 	bl	8000ba8 <__aeabi_uldivmod>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4613      	mov	r3, r2
 8002e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e62:	e053      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e64:	4b35      	ldr	r3, [pc, #212]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	617a      	str	r2, [r7, #20]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e76:	f04f 0b00 	mov.w	fp, #0
 8002e7a:	4652      	mov	r2, sl
 8002e7c:	465b      	mov	r3, fp
 8002e7e:	f04f 0000 	mov.w	r0, #0
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	0159      	lsls	r1, r3, #5
 8002e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e8c:	0150      	lsls	r0, r2, #5
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	ebb2 080a 	subs.w	r8, r2, sl
 8002e96:	eb63 090b 	sbc.w	r9, r3, fp
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ea6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002eaa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002eae:	ebb2 0408 	subs.w	r4, r2, r8
 8002eb2:	eb63 0509 	sbc.w	r5, r3, r9
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	00eb      	lsls	r3, r5, #3
 8002ec0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec4:	00e2      	lsls	r2, r4, #3
 8002ec6:	4614      	mov	r4, r2
 8002ec8:	461d      	mov	r5, r3
 8002eca:	eb14 030a 	adds.w	r3, r4, sl
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	eb45 030b 	adc.w	r3, r5, fp
 8002ed4:	607b      	str	r3, [r7, #4]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	028b      	lsls	r3, r1, #10
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eec:	4621      	mov	r1, r4
 8002eee:	028a      	lsls	r2, r1, #10
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	60fa      	str	r2, [r7, #12]
 8002efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f00:	f7fd fe52 	bl	8000ba8 <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	3301      	adds	r3, #1
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002f1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f26:	e002      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3740      	adds	r7, #64	@ 0x40
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	017d7840 	.word	0x017d7840

08002f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000000 	.word	0x20000000

08002f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f64:	f7ff fff0 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0a9b      	lsrs	r3, r3, #10
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	@ (8002f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	08006920 	.word	0x08006920

08002f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f8c:	f7ff ffdc 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0b5b      	lsrs	r3, r3, #13
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	@ (8002fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	08006920 	.word	0x08006920

08002fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e042      	b.n	8003048 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fae6 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	@ 0x24
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fa09 	bl	800340c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	@ 0x28
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b20      	cmp	r3, #32
 800306e:	d175      	bne.n	800315c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_UART_Transmit+0x2c>
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e06e      	b.n	800315e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2221      	movs	r2, #33	@ 0x21
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800308e:	f7fe fc85 	bl	800199c <HAL_GetTick>
 8003092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	88fa      	ldrh	r2, [r7, #6]
 8003098:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030a8:	d108      	bne.n	80030bc <HAL_UART_Transmit+0x6c>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d104      	bne.n	80030bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	e003      	b.n	80030c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030c4:	e02e      	b.n	8003124 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	2180      	movs	r1, #128	@ 0x80
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f8df 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e03a      	b.n	800315e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10b      	bne.n	8003106 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	3302      	adds	r3, #2
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	e007      	b.n	8003116 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	3301      	adds	r3, #1
 8003114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1cb      	bne.n	80030c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	2140      	movs	r1, #64	@ 0x40
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f8ab 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e006      	b.n	800315e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800315c:	2302      	movs	r3, #2
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b08a      	sub	sp, #40	@ 0x28
 800316a:	af02      	add	r7, sp, #8
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b20      	cmp	r3, #32
 8003184:	f040 8081 	bne.w	800328a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_UART_Receive+0x2e>
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e079      	b.n	800328c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2222      	movs	r2, #34	@ 0x22
 80031a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ac:	f7fe fbf6 	bl	800199c <HAL_GetTick>
 80031b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	88fa      	ldrh	r2, [r7, #6]
 80031b6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031c6:	d108      	bne.n	80031da <HAL_UART_Receive+0x74>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d104      	bne.n	80031da <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	e003      	b.n	80031e2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80031e2:	e047      	b.n	8003274 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2120      	movs	r1, #32
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f850 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e042      	b.n	800328c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10c      	bne.n	8003226 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003218:	b29a      	uxth	r2, r3
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	3302      	adds	r3, #2
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	e01f      	b.n	8003266 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800322e:	d007      	beq.n	8003240 <HAL_UART_Receive+0xda>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <HAL_UART_Receive+0xe8>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d106      	bne.n	800324e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e008      	b.n	8003260 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800325a:	b2da      	uxtb	r2, r3
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	3301      	adds	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1b2      	bne.n	80031e4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e000      	b.n	800328c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800328a:	2302      	movs	r3, #2
  }
}
 800328c:	4618      	mov	r0, r3
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a4:	e03b      	b.n	800331e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d037      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ae:	f7fe fb75 	bl	800199c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	6a3a      	ldr	r2, [r7, #32]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d302      	bcc.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e03a      	b.n	800333e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d023      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0x8a>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b80      	cmp	r3, #128	@ 0x80
 80032da:	d020      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0x8a>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b40      	cmp	r3, #64	@ 0x40
 80032e0:	d01d      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d116      	bne.n	800331e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f81d 	bl	8003346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2208      	movs	r2, #8
 8003310:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e00f      	b.n	800333e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4013      	ands	r3, r2
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	429a      	cmp	r2, r3
 800332c:	bf0c      	ite	eq
 800332e:	2301      	moveq	r3, #1
 8003330:	2300      	movne	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	429a      	cmp	r2, r3
 800333a:	d0b4      	beq.n	80032a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003346:	b480      	push	{r7}
 8003348:	b095      	sub	sp, #84	@ 0x54
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	330c      	adds	r3, #12
 800336c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800336e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800337c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3314      	adds	r3, #20
 8003388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	61fb      	str	r3, [r7, #28]
   return(result);
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e5      	bne.n	8003382 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d119      	bne.n	80033f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	330c      	adds	r3, #12
 80033c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f023 0310 	bic.w	r3, r3, #16
 80033d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033de:	61ba      	str	r2, [r7, #24]
 80033e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e2:	6979      	ldr	r1, [r7, #20]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	613b      	str	r3, [r7, #16]
   return(result);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e5      	bne.n	80033be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003400:	bf00      	nop
 8003402:	3754      	adds	r7, #84	@ 0x54
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800340c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003410:	b0c0      	sub	sp, #256	@ 0x100
 8003412:	af00      	add	r7, sp, #0
 8003414:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003428:	68d9      	ldr	r1, [r3, #12]
 800342a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	ea40 0301 	orr.w	r3, r0, r1
 8003434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	431a      	orrs	r2, r3
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	431a      	orrs	r2, r3
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003464:	f021 010c 	bic.w	r1, r1, #12
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003472:	430b      	orrs	r3, r1
 8003474:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003486:	6999      	ldr	r1, [r3, #24]
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	ea40 0301 	orr.w	r3, r0, r1
 8003492:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b8f      	ldr	r3, [pc, #572]	@ (80036d8 <UART_SetConfig+0x2cc>)
 800349c:	429a      	cmp	r2, r3
 800349e:	d005      	beq.n	80034ac <UART_SetConfig+0xa0>
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4b8d      	ldr	r3, [pc, #564]	@ (80036dc <UART_SetConfig+0x2d0>)
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d104      	bne.n	80034b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034ac:	f7ff fd6c 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 80034b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034b4:	e003      	b.n	80034be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034b6:	f7ff fd53 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 80034ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034c8:	f040 810c 	bne.w	80036e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034de:	4622      	mov	r2, r4
 80034e0:	462b      	mov	r3, r5
 80034e2:	1891      	adds	r1, r2, r2
 80034e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034e6:	415b      	adcs	r3, r3
 80034e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034ee:	4621      	mov	r1, r4
 80034f0:	eb12 0801 	adds.w	r8, r2, r1
 80034f4:	4629      	mov	r1, r5
 80034f6:	eb43 0901 	adc.w	r9, r3, r1
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800350a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800350e:	4690      	mov	r8, r2
 8003510:	4699      	mov	r9, r3
 8003512:	4623      	mov	r3, r4
 8003514:	eb18 0303 	adds.w	r3, r8, r3
 8003518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800351c:	462b      	mov	r3, r5
 800351e:	eb49 0303 	adc.w	r3, r9, r3
 8003522:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003532:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003536:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800353a:	460b      	mov	r3, r1
 800353c:	18db      	adds	r3, r3, r3
 800353e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003540:	4613      	mov	r3, r2
 8003542:	eb42 0303 	adc.w	r3, r2, r3
 8003546:	657b      	str	r3, [r7, #84]	@ 0x54
 8003548:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800354c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003550:	f7fd fb2a 	bl	8000ba8 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4b61      	ldr	r3, [pc, #388]	@ (80036e0 <UART_SetConfig+0x2d4>)
 800355a:	fba3 2302 	umull	r2, r3, r3, r2
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	011c      	lsls	r4, r3, #4
 8003562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003566:	2200      	movs	r2, #0
 8003568:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800356c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003570:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003574:	4642      	mov	r2, r8
 8003576:	464b      	mov	r3, r9
 8003578:	1891      	adds	r1, r2, r2
 800357a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800357c:	415b      	adcs	r3, r3
 800357e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003580:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003584:	4641      	mov	r1, r8
 8003586:	eb12 0a01 	adds.w	sl, r2, r1
 800358a:	4649      	mov	r1, r9
 800358c:	eb43 0b01 	adc.w	fp, r3, r1
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800359c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a4:	4692      	mov	sl, r2
 80035a6:	469b      	mov	fp, r3
 80035a8:	4643      	mov	r3, r8
 80035aa:	eb1a 0303 	adds.w	r3, sl, r3
 80035ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035b2:	464b      	mov	r3, r9
 80035b4:	eb4b 0303 	adc.w	r3, fp, r3
 80035b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035d0:	460b      	mov	r3, r1
 80035d2:	18db      	adds	r3, r3, r3
 80035d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80035d6:	4613      	mov	r3, r2
 80035d8:	eb42 0303 	adc.w	r3, r2, r3
 80035dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80035de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035e6:	f7fd fadf 	bl	8000ba8 <__aeabi_uldivmod>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	4b3b      	ldr	r3, [pc, #236]	@ (80036e0 <UART_SetConfig+0x2d4>)
 80035f2:	fba3 2301 	umull	r2, r3, r3, r1
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2264      	movs	r2, #100	@ 0x64
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	1acb      	subs	r3, r1, r3
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003606:	4b36      	ldr	r3, [pc, #216]	@ (80036e0 <UART_SetConfig+0x2d4>)
 8003608:	fba3 2302 	umull	r2, r3, r3, r2
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003614:	441c      	add	r4, r3
 8003616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800361a:	2200      	movs	r2, #0
 800361c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003620:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003624:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	1891      	adds	r1, r2, r2
 800362e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003630:	415b      	adcs	r3, r3
 8003632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003634:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003638:	4641      	mov	r1, r8
 800363a:	1851      	adds	r1, r2, r1
 800363c:	6339      	str	r1, [r7, #48]	@ 0x30
 800363e:	4649      	mov	r1, r9
 8003640:	414b      	adcs	r3, r1
 8003642:	637b      	str	r3, [r7, #52]	@ 0x34
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003650:	4659      	mov	r1, fp
 8003652:	00cb      	lsls	r3, r1, #3
 8003654:	4651      	mov	r1, sl
 8003656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800365a:	4651      	mov	r1, sl
 800365c:	00ca      	lsls	r2, r1, #3
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	4603      	mov	r3, r0
 8003664:	4642      	mov	r2, r8
 8003666:	189b      	adds	r3, r3, r2
 8003668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800366c:	464b      	mov	r3, r9
 800366e:	460a      	mov	r2, r1
 8003670:	eb42 0303 	adc.w	r3, r2, r3
 8003674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003684:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003688:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800368c:	460b      	mov	r3, r1
 800368e:	18db      	adds	r3, r3, r3
 8003690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003692:	4613      	mov	r3, r2
 8003694:	eb42 0303 	adc.w	r3, r2, r3
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800369a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800369e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036a2:	f7fd fa81 	bl	8000ba8 <__aeabi_uldivmod>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <UART_SetConfig+0x2d4>)
 80036ac:	fba3 1302 	umull	r1, r3, r3, r2
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	2164      	movs	r1, #100	@ 0x64
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	3332      	adds	r3, #50	@ 0x32
 80036be:	4a08      	ldr	r2, [pc, #32]	@ (80036e0 <UART_SetConfig+0x2d4>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	f003 0207 	and.w	r2, r3, #7
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4422      	add	r2, r4
 80036d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036d4:	e106      	b.n	80038e4 <UART_SetConfig+0x4d8>
 80036d6:	bf00      	nop
 80036d8:	40011000 	.word	0x40011000
 80036dc:	40011400 	.word	0x40011400
 80036e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036f6:	4642      	mov	r2, r8
 80036f8:	464b      	mov	r3, r9
 80036fa:	1891      	adds	r1, r2, r2
 80036fc:	6239      	str	r1, [r7, #32]
 80036fe:	415b      	adcs	r3, r3
 8003700:	627b      	str	r3, [r7, #36]	@ 0x24
 8003702:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003706:	4641      	mov	r1, r8
 8003708:	1854      	adds	r4, r2, r1
 800370a:	4649      	mov	r1, r9
 800370c:	eb43 0501 	adc.w	r5, r3, r1
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	00eb      	lsls	r3, r5, #3
 800371a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371e:	00e2      	lsls	r2, r4, #3
 8003720:	4614      	mov	r4, r2
 8003722:	461d      	mov	r5, r3
 8003724:	4643      	mov	r3, r8
 8003726:	18e3      	adds	r3, r4, r3
 8003728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800372c:	464b      	mov	r3, r9
 800372e:	eb45 0303 	adc.w	r3, r5, r3
 8003732:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003742:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003752:	4629      	mov	r1, r5
 8003754:	008b      	lsls	r3, r1, #2
 8003756:	4621      	mov	r1, r4
 8003758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800375c:	4621      	mov	r1, r4
 800375e:	008a      	lsls	r2, r1, #2
 8003760:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003764:	f7fd fa20 	bl	8000ba8 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4b60      	ldr	r3, [pc, #384]	@ (80038f0 <UART_SetConfig+0x4e4>)
 800376e:	fba3 2302 	umull	r2, r3, r3, r2
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	011c      	lsls	r4, r3, #4
 8003776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800377a:	2200      	movs	r2, #0
 800377c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003780:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003784:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003788:	4642      	mov	r2, r8
 800378a:	464b      	mov	r3, r9
 800378c:	1891      	adds	r1, r2, r2
 800378e:	61b9      	str	r1, [r7, #24]
 8003790:	415b      	adcs	r3, r3
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003798:	4641      	mov	r1, r8
 800379a:	1851      	adds	r1, r2, r1
 800379c:	6139      	str	r1, [r7, #16]
 800379e:	4649      	mov	r1, r9
 80037a0:	414b      	adcs	r3, r1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037b0:	4659      	mov	r1, fp
 80037b2:	00cb      	lsls	r3, r1, #3
 80037b4:	4651      	mov	r1, sl
 80037b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ba:	4651      	mov	r1, sl
 80037bc:	00ca      	lsls	r2, r1, #3
 80037be:	4610      	mov	r0, r2
 80037c0:	4619      	mov	r1, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	4642      	mov	r2, r8
 80037c6:	189b      	adds	r3, r3, r2
 80037c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037cc:	464b      	mov	r3, r9
 80037ce:	460a      	mov	r2, r1
 80037d0:	eb42 0303 	adc.w	r3, r2, r3
 80037d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037f0:	4649      	mov	r1, r9
 80037f2:	008b      	lsls	r3, r1, #2
 80037f4:	4641      	mov	r1, r8
 80037f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037fa:	4641      	mov	r1, r8
 80037fc:	008a      	lsls	r2, r1, #2
 80037fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003802:	f7fd f9d1 	bl	8000ba8 <__aeabi_uldivmod>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4611      	mov	r1, r2
 800380c:	4b38      	ldr	r3, [pc, #224]	@ (80038f0 <UART_SetConfig+0x4e4>)
 800380e:	fba3 2301 	umull	r2, r3, r3, r1
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2264      	movs	r2, #100	@ 0x64
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	1acb      	subs	r3, r1, r3
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	3332      	adds	r3, #50	@ 0x32
 8003820:	4a33      	ldr	r2, [pc, #204]	@ (80038f0 <UART_SetConfig+0x4e4>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800382c:	441c      	add	r4, r3
 800382e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003832:	2200      	movs	r2, #0
 8003834:	673b      	str	r3, [r7, #112]	@ 0x70
 8003836:	677a      	str	r2, [r7, #116]	@ 0x74
 8003838:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800383c:	4642      	mov	r2, r8
 800383e:	464b      	mov	r3, r9
 8003840:	1891      	adds	r1, r2, r2
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	415b      	adcs	r3, r3
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800384c:	4641      	mov	r1, r8
 800384e:	1851      	adds	r1, r2, r1
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	4649      	mov	r1, r9
 8003854:	414b      	adcs	r3, r1
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003864:	4659      	mov	r1, fp
 8003866:	00cb      	lsls	r3, r1, #3
 8003868:	4651      	mov	r1, sl
 800386a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800386e:	4651      	mov	r1, sl
 8003870:	00ca      	lsls	r2, r1, #3
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	4603      	mov	r3, r0
 8003878:	4642      	mov	r2, r8
 800387a:	189b      	adds	r3, r3, r2
 800387c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800387e:	464b      	mov	r3, r9
 8003880:	460a      	mov	r2, r1
 8003882:	eb42 0303 	adc.w	r3, r2, r3
 8003886:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	663b      	str	r3, [r7, #96]	@ 0x60
 8003892:	667a      	str	r2, [r7, #100]	@ 0x64
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038a0:	4649      	mov	r1, r9
 80038a2:	008b      	lsls	r3, r1, #2
 80038a4:	4641      	mov	r1, r8
 80038a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038aa:	4641      	mov	r1, r8
 80038ac:	008a      	lsls	r2, r1, #2
 80038ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038b2:	f7fd f979 	bl	8000ba8 <__aeabi_uldivmod>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <UART_SetConfig+0x4e4>)
 80038bc:	fba3 1302 	umull	r1, r3, r3, r2
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	2164      	movs	r1, #100	@ 0x64
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	3332      	adds	r3, #50	@ 0x32
 80038ce:	4a08      	ldr	r2, [pc, #32]	@ (80038f0 <UART_SetConfig+0x4e4>)
 80038d0:	fba2 2303 	umull	r2, r3, r2, r3
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	f003 020f 	and.w	r2, r3, #15
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4422      	add	r2, r4
 80038e2:	609a      	str	r2, [r3, #8]
}
 80038e4:	bf00      	nop
 80038e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038ea:	46bd      	mov	sp, r7
 80038ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f0:	51eb851f 	.word	0x51eb851f

080038f4 <__cvt>:
 80038f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038f8:	ec57 6b10 	vmov	r6, r7, d0
 80038fc:	2f00      	cmp	r7, #0
 80038fe:	460c      	mov	r4, r1
 8003900:	4619      	mov	r1, r3
 8003902:	463b      	mov	r3, r7
 8003904:	bfbb      	ittet	lt
 8003906:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800390a:	461f      	movlt	r7, r3
 800390c:	2300      	movge	r3, #0
 800390e:	232d      	movlt	r3, #45	@ 0x2d
 8003910:	700b      	strb	r3, [r1, #0]
 8003912:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003914:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003918:	4691      	mov	r9, r2
 800391a:	f023 0820 	bic.w	r8, r3, #32
 800391e:	bfbc      	itt	lt
 8003920:	4632      	movlt	r2, r6
 8003922:	4616      	movlt	r6, r2
 8003924:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003928:	d005      	beq.n	8003936 <__cvt+0x42>
 800392a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800392e:	d100      	bne.n	8003932 <__cvt+0x3e>
 8003930:	3401      	adds	r4, #1
 8003932:	2102      	movs	r1, #2
 8003934:	e000      	b.n	8003938 <__cvt+0x44>
 8003936:	2103      	movs	r1, #3
 8003938:	ab03      	add	r3, sp, #12
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	ab02      	add	r3, sp, #8
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	ec47 6b10 	vmov	d0, r6, r7
 8003944:	4653      	mov	r3, sl
 8003946:	4622      	mov	r2, r4
 8003948:	f000 ff8a 	bl	8004860 <_dtoa_r>
 800394c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003950:	4605      	mov	r5, r0
 8003952:	d119      	bne.n	8003988 <__cvt+0x94>
 8003954:	f019 0f01 	tst.w	r9, #1
 8003958:	d00e      	beq.n	8003978 <__cvt+0x84>
 800395a:	eb00 0904 	add.w	r9, r0, r4
 800395e:	2200      	movs	r2, #0
 8003960:	2300      	movs	r3, #0
 8003962:	4630      	mov	r0, r6
 8003964:	4639      	mov	r1, r7
 8003966:	f7fd f8af 	bl	8000ac8 <__aeabi_dcmpeq>
 800396a:	b108      	cbz	r0, 8003970 <__cvt+0x7c>
 800396c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003970:	2230      	movs	r2, #48	@ 0x30
 8003972:	9b03      	ldr	r3, [sp, #12]
 8003974:	454b      	cmp	r3, r9
 8003976:	d31e      	bcc.n	80039b6 <__cvt+0xc2>
 8003978:	9b03      	ldr	r3, [sp, #12]
 800397a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800397c:	1b5b      	subs	r3, r3, r5
 800397e:	4628      	mov	r0, r5
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	b004      	add	sp, #16
 8003984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003988:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800398c:	eb00 0904 	add.w	r9, r0, r4
 8003990:	d1e5      	bne.n	800395e <__cvt+0x6a>
 8003992:	7803      	ldrb	r3, [r0, #0]
 8003994:	2b30      	cmp	r3, #48	@ 0x30
 8003996:	d10a      	bne.n	80039ae <__cvt+0xba>
 8003998:	2200      	movs	r2, #0
 800399a:	2300      	movs	r3, #0
 800399c:	4630      	mov	r0, r6
 800399e:	4639      	mov	r1, r7
 80039a0:	f7fd f892 	bl	8000ac8 <__aeabi_dcmpeq>
 80039a4:	b918      	cbnz	r0, 80039ae <__cvt+0xba>
 80039a6:	f1c4 0401 	rsb	r4, r4, #1
 80039aa:	f8ca 4000 	str.w	r4, [sl]
 80039ae:	f8da 3000 	ldr.w	r3, [sl]
 80039b2:	4499      	add	r9, r3
 80039b4:	e7d3      	b.n	800395e <__cvt+0x6a>
 80039b6:	1c59      	adds	r1, r3, #1
 80039b8:	9103      	str	r1, [sp, #12]
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e7d9      	b.n	8003972 <__cvt+0x7e>

080039be <__exponent>:
 80039be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039c0:	2900      	cmp	r1, #0
 80039c2:	bfba      	itte	lt
 80039c4:	4249      	neglt	r1, r1
 80039c6:	232d      	movlt	r3, #45	@ 0x2d
 80039c8:	232b      	movge	r3, #43	@ 0x2b
 80039ca:	2909      	cmp	r1, #9
 80039cc:	7002      	strb	r2, [r0, #0]
 80039ce:	7043      	strb	r3, [r0, #1]
 80039d0:	dd29      	ble.n	8003a26 <__exponent+0x68>
 80039d2:	f10d 0307 	add.w	r3, sp, #7
 80039d6:	461d      	mov	r5, r3
 80039d8:	270a      	movs	r7, #10
 80039da:	461a      	mov	r2, r3
 80039dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80039e0:	fb07 1416 	mls	r4, r7, r6, r1
 80039e4:	3430      	adds	r4, #48	@ 0x30
 80039e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80039ea:	460c      	mov	r4, r1
 80039ec:	2c63      	cmp	r4, #99	@ 0x63
 80039ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80039f2:	4631      	mov	r1, r6
 80039f4:	dcf1      	bgt.n	80039da <__exponent+0x1c>
 80039f6:	3130      	adds	r1, #48	@ 0x30
 80039f8:	1e94      	subs	r4, r2, #2
 80039fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80039fe:	1c41      	adds	r1, r0, #1
 8003a00:	4623      	mov	r3, r4
 8003a02:	42ab      	cmp	r3, r5
 8003a04:	d30a      	bcc.n	8003a1c <__exponent+0x5e>
 8003a06:	f10d 0309 	add.w	r3, sp, #9
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	42ac      	cmp	r4, r5
 8003a0e:	bf88      	it	hi
 8003a10:	2300      	movhi	r3, #0
 8003a12:	3302      	adds	r3, #2
 8003a14:	4403      	add	r3, r0
 8003a16:	1a18      	subs	r0, r3, r0
 8003a18:	b003      	add	sp, #12
 8003a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a1c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003a20:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003a24:	e7ed      	b.n	8003a02 <__exponent+0x44>
 8003a26:	2330      	movs	r3, #48	@ 0x30
 8003a28:	3130      	adds	r1, #48	@ 0x30
 8003a2a:	7083      	strb	r3, [r0, #2]
 8003a2c:	70c1      	strb	r1, [r0, #3]
 8003a2e:	1d03      	adds	r3, r0, #4
 8003a30:	e7f1      	b.n	8003a16 <__exponent+0x58>
	...

08003a34 <_printf_float>:
 8003a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	b08d      	sub	sp, #52	@ 0x34
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003a40:	4616      	mov	r6, r2
 8003a42:	461f      	mov	r7, r3
 8003a44:	4605      	mov	r5, r0
 8003a46:	f000 fe09 	bl	800465c <_localeconv_r>
 8003a4a:	6803      	ldr	r3, [r0, #0]
 8003a4c:	9304      	str	r3, [sp, #16]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fc fc0e 	bl	8000270 <strlen>
 8003a54:	2300      	movs	r3, #0
 8003a56:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a58:	f8d8 3000 	ldr.w	r3, [r8]
 8003a5c:	9005      	str	r0, [sp, #20]
 8003a5e:	3307      	adds	r3, #7
 8003a60:	f023 0307 	bic.w	r3, r3, #7
 8003a64:	f103 0208 	add.w	r2, r3, #8
 8003a68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003a6c:	f8d4 b000 	ldr.w	fp, [r4]
 8003a70:	f8c8 2000 	str.w	r2, [r8]
 8003a74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003a7c:	9307      	str	r3, [sp, #28]
 8003a7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003a86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a8a:	4b9c      	ldr	r3, [pc, #624]	@ (8003cfc <_printf_float+0x2c8>)
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	f7fd f84c 	bl	8000b2c <__aeabi_dcmpun>
 8003a94:	bb70      	cbnz	r0, 8003af4 <_printf_float+0xc0>
 8003a96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a9a:	4b98      	ldr	r3, [pc, #608]	@ (8003cfc <_printf_float+0x2c8>)
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	f7fd f826 	bl	8000af0 <__aeabi_dcmple>
 8003aa4:	bb30      	cbnz	r0, 8003af4 <_printf_float+0xc0>
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	4640      	mov	r0, r8
 8003aac:	4649      	mov	r1, r9
 8003aae:	f7fd f815 	bl	8000adc <__aeabi_dcmplt>
 8003ab2:	b110      	cbz	r0, 8003aba <_printf_float+0x86>
 8003ab4:	232d      	movs	r3, #45	@ 0x2d
 8003ab6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003aba:	4a91      	ldr	r2, [pc, #580]	@ (8003d00 <_printf_float+0x2cc>)
 8003abc:	4b91      	ldr	r3, [pc, #580]	@ (8003d04 <_printf_float+0x2d0>)
 8003abe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003ac2:	bf94      	ite	ls
 8003ac4:	4690      	movls	r8, r2
 8003ac6:	4698      	movhi	r8, r3
 8003ac8:	2303      	movs	r3, #3
 8003aca:	6123      	str	r3, [r4, #16]
 8003acc:	f02b 0304 	bic.w	r3, fp, #4
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	f04f 0900 	mov.w	r9, #0
 8003ad6:	9700      	str	r7, [sp, #0]
 8003ad8:	4633      	mov	r3, r6
 8003ada:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003adc:	4621      	mov	r1, r4
 8003ade:	4628      	mov	r0, r5
 8003ae0:	f000 f9d2 	bl	8003e88 <_printf_common>
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	f040 808d 	bne.w	8003c04 <_printf_float+0x1d0>
 8003aea:	f04f 30ff 	mov.w	r0, #4294967295
 8003aee:	b00d      	add	sp, #52	@ 0x34
 8003af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af4:	4642      	mov	r2, r8
 8003af6:	464b      	mov	r3, r9
 8003af8:	4640      	mov	r0, r8
 8003afa:	4649      	mov	r1, r9
 8003afc:	f7fd f816 	bl	8000b2c <__aeabi_dcmpun>
 8003b00:	b140      	cbz	r0, 8003b14 <_printf_float+0xe0>
 8003b02:	464b      	mov	r3, r9
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bfbc      	itt	lt
 8003b08:	232d      	movlt	r3, #45	@ 0x2d
 8003b0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003b0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d08 <_printf_float+0x2d4>)
 8003b10:	4b7e      	ldr	r3, [pc, #504]	@ (8003d0c <_printf_float+0x2d8>)
 8003b12:	e7d4      	b.n	8003abe <_printf_float+0x8a>
 8003b14:	6863      	ldr	r3, [r4, #4]
 8003b16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003b1a:	9206      	str	r2, [sp, #24]
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	d13b      	bne.n	8003b98 <_printf_float+0x164>
 8003b20:	2306      	movs	r3, #6
 8003b22:	6063      	str	r3, [r4, #4]
 8003b24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003b28:	2300      	movs	r3, #0
 8003b2a:	6022      	str	r2, [r4, #0]
 8003b2c:	9303      	str	r3, [sp, #12]
 8003b2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003b30:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003b34:	ab09      	add	r3, sp, #36	@ 0x24
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	6861      	ldr	r1, [r4, #4]
 8003b3a:	ec49 8b10 	vmov	d0, r8, r9
 8003b3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003b42:	4628      	mov	r0, r5
 8003b44:	f7ff fed6 	bl	80038f4 <__cvt>
 8003b48:	9b06      	ldr	r3, [sp, #24]
 8003b4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003b4c:	2b47      	cmp	r3, #71	@ 0x47
 8003b4e:	4680      	mov	r8, r0
 8003b50:	d129      	bne.n	8003ba6 <_printf_float+0x172>
 8003b52:	1cc8      	adds	r0, r1, #3
 8003b54:	db02      	blt.n	8003b5c <_printf_float+0x128>
 8003b56:	6863      	ldr	r3, [r4, #4]
 8003b58:	4299      	cmp	r1, r3
 8003b5a:	dd41      	ble.n	8003be0 <_printf_float+0x1ac>
 8003b5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003b60:	fa5f fa8a 	uxtb.w	sl, sl
 8003b64:	3901      	subs	r1, #1
 8003b66:	4652      	mov	r2, sl
 8003b68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003b6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8003b6e:	f7ff ff26 	bl	80039be <__exponent>
 8003b72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003b74:	1813      	adds	r3, r2, r0
 8003b76:	2a01      	cmp	r2, #1
 8003b78:	4681      	mov	r9, r0
 8003b7a:	6123      	str	r3, [r4, #16]
 8003b7c:	dc02      	bgt.n	8003b84 <_printf_float+0x150>
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	07d2      	lsls	r2, r2, #31
 8003b82:	d501      	bpl.n	8003b88 <_printf_float+0x154>
 8003b84:	3301      	adds	r3, #1
 8003b86:	6123      	str	r3, [r4, #16]
 8003b88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0a2      	beq.n	8003ad6 <_printf_float+0xa2>
 8003b90:	232d      	movs	r3, #45	@ 0x2d
 8003b92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b96:	e79e      	b.n	8003ad6 <_printf_float+0xa2>
 8003b98:	9a06      	ldr	r2, [sp, #24]
 8003b9a:	2a47      	cmp	r2, #71	@ 0x47
 8003b9c:	d1c2      	bne.n	8003b24 <_printf_float+0xf0>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1c0      	bne.n	8003b24 <_printf_float+0xf0>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e7bd      	b.n	8003b22 <_printf_float+0xee>
 8003ba6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003baa:	d9db      	bls.n	8003b64 <_printf_float+0x130>
 8003bac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003bb0:	d118      	bne.n	8003be4 <_printf_float+0x1b0>
 8003bb2:	2900      	cmp	r1, #0
 8003bb4:	6863      	ldr	r3, [r4, #4]
 8003bb6:	dd0b      	ble.n	8003bd0 <_printf_float+0x19c>
 8003bb8:	6121      	str	r1, [r4, #16]
 8003bba:	b913      	cbnz	r3, 8003bc2 <_printf_float+0x18e>
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	07d0      	lsls	r0, r2, #31
 8003bc0:	d502      	bpl.n	8003bc8 <_printf_float+0x194>
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	440b      	add	r3, r1
 8003bc6:	6123      	str	r3, [r4, #16]
 8003bc8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003bca:	f04f 0900 	mov.w	r9, #0
 8003bce:	e7db      	b.n	8003b88 <_printf_float+0x154>
 8003bd0:	b913      	cbnz	r3, 8003bd8 <_printf_float+0x1a4>
 8003bd2:	6822      	ldr	r2, [r4, #0]
 8003bd4:	07d2      	lsls	r2, r2, #31
 8003bd6:	d501      	bpl.n	8003bdc <_printf_float+0x1a8>
 8003bd8:	3302      	adds	r3, #2
 8003bda:	e7f4      	b.n	8003bc6 <_printf_float+0x192>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e7f2      	b.n	8003bc6 <_printf_float+0x192>
 8003be0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003be6:	4299      	cmp	r1, r3
 8003be8:	db05      	blt.n	8003bf6 <_printf_float+0x1c2>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	6121      	str	r1, [r4, #16]
 8003bee:	07d8      	lsls	r0, r3, #31
 8003bf0:	d5ea      	bpl.n	8003bc8 <_printf_float+0x194>
 8003bf2:	1c4b      	adds	r3, r1, #1
 8003bf4:	e7e7      	b.n	8003bc6 <_printf_float+0x192>
 8003bf6:	2900      	cmp	r1, #0
 8003bf8:	bfd4      	ite	le
 8003bfa:	f1c1 0202 	rsble	r2, r1, #2
 8003bfe:	2201      	movgt	r2, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	e7e0      	b.n	8003bc6 <_printf_float+0x192>
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	055a      	lsls	r2, r3, #21
 8003c08:	d407      	bmi.n	8003c1a <_printf_float+0x1e6>
 8003c0a:	6923      	ldr	r3, [r4, #16]
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	4631      	mov	r1, r6
 8003c10:	4628      	mov	r0, r5
 8003c12:	47b8      	blx	r7
 8003c14:	3001      	adds	r0, #1
 8003c16:	d12b      	bne.n	8003c70 <_printf_float+0x23c>
 8003c18:	e767      	b.n	8003aea <_printf_float+0xb6>
 8003c1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c1e:	f240 80dd 	bls.w	8003ddc <_printf_float+0x3a8>
 8003c22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003c26:	2200      	movs	r2, #0
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f7fc ff4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d033      	beq.n	8003c9a <_printf_float+0x266>
 8003c32:	4a37      	ldr	r2, [pc, #220]	@ (8003d10 <_printf_float+0x2dc>)
 8003c34:	2301      	movs	r3, #1
 8003c36:	4631      	mov	r1, r6
 8003c38:	4628      	mov	r0, r5
 8003c3a:	47b8      	blx	r7
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	f43f af54 	beq.w	8003aea <_printf_float+0xb6>
 8003c42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003c46:	4543      	cmp	r3, r8
 8003c48:	db02      	blt.n	8003c50 <_printf_float+0x21c>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	07d8      	lsls	r0, r3, #31
 8003c4e:	d50f      	bpl.n	8003c70 <_printf_float+0x23c>
 8003c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c54:	4631      	mov	r1, r6
 8003c56:	4628      	mov	r0, r5
 8003c58:	47b8      	blx	r7
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	f43f af45 	beq.w	8003aea <_printf_float+0xb6>
 8003c60:	f04f 0900 	mov.w	r9, #0
 8003c64:	f108 38ff 	add.w	r8, r8, #4294967295
 8003c68:	f104 0a1a 	add.w	sl, r4, #26
 8003c6c:	45c8      	cmp	r8, r9
 8003c6e:	dc09      	bgt.n	8003c84 <_printf_float+0x250>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	079b      	lsls	r3, r3, #30
 8003c74:	f100 8103 	bmi.w	8003e7e <_printf_float+0x44a>
 8003c78:	68e0      	ldr	r0, [r4, #12]
 8003c7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c7c:	4298      	cmp	r0, r3
 8003c7e:	bfb8      	it	lt
 8003c80:	4618      	movlt	r0, r3
 8003c82:	e734      	b.n	8003aee <_printf_float+0xba>
 8003c84:	2301      	movs	r3, #1
 8003c86:	4652      	mov	r2, sl
 8003c88:	4631      	mov	r1, r6
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	47b8      	blx	r7
 8003c8e:	3001      	adds	r0, #1
 8003c90:	f43f af2b 	beq.w	8003aea <_printf_float+0xb6>
 8003c94:	f109 0901 	add.w	r9, r9, #1
 8003c98:	e7e8      	b.n	8003c6c <_printf_float+0x238>
 8003c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	dc39      	bgt.n	8003d14 <_printf_float+0x2e0>
 8003ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d10 <_printf_float+0x2dc>)
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4631      	mov	r1, r6
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	47b8      	blx	r7
 8003caa:	3001      	adds	r0, #1
 8003cac:	f43f af1d 	beq.w	8003aea <_printf_float+0xb6>
 8003cb0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003cb4:	ea59 0303 	orrs.w	r3, r9, r3
 8003cb8:	d102      	bne.n	8003cc0 <_printf_float+0x28c>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	07d9      	lsls	r1, r3, #31
 8003cbe:	d5d7      	bpl.n	8003c70 <_printf_float+0x23c>
 8003cc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cc4:	4631      	mov	r1, r6
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	47b8      	blx	r7
 8003cca:	3001      	adds	r0, #1
 8003ccc:	f43f af0d 	beq.w	8003aea <_printf_float+0xb6>
 8003cd0:	f04f 0a00 	mov.w	sl, #0
 8003cd4:	f104 0b1a 	add.w	fp, r4, #26
 8003cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cda:	425b      	negs	r3, r3
 8003cdc:	4553      	cmp	r3, sl
 8003cde:	dc01      	bgt.n	8003ce4 <_printf_float+0x2b0>
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	e793      	b.n	8003c0c <_printf_float+0x1d8>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	465a      	mov	r2, fp
 8003ce8:	4631      	mov	r1, r6
 8003cea:	4628      	mov	r0, r5
 8003cec:	47b8      	blx	r7
 8003cee:	3001      	adds	r0, #1
 8003cf0:	f43f aefb 	beq.w	8003aea <_printf_float+0xb6>
 8003cf4:	f10a 0a01 	add.w	sl, sl, #1
 8003cf8:	e7ee      	b.n	8003cd8 <_printf_float+0x2a4>
 8003cfa:	bf00      	nop
 8003cfc:	7fefffff 	.word	0x7fefffff
 8003d00:	08006928 	.word	0x08006928
 8003d04:	0800692c 	.word	0x0800692c
 8003d08:	08006930 	.word	0x08006930
 8003d0c:	08006934 	.word	0x08006934
 8003d10:	08006938 	.word	0x08006938
 8003d14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003d1a:	4553      	cmp	r3, sl
 8003d1c:	bfa8      	it	ge
 8003d1e:	4653      	movge	r3, sl
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	4699      	mov	r9, r3
 8003d24:	dc36      	bgt.n	8003d94 <_printf_float+0x360>
 8003d26:	f04f 0b00 	mov.w	fp, #0
 8003d2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d2e:	f104 021a 	add.w	r2, r4, #26
 8003d32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d34:	9306      	str	r3, [sp, #24]
 8003d36:	eba3 0309 	sub.w	r3, r3, r9
 8003d3a:	455b      	cmp	r3, fp
 8003d3c:	dc31      	bgt.n	8003da2 <_printf_float+0x36e>
 8003d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d40:	459a      	cmp	sl, r3
 8003d42:	dc3a      	bgt.n	8003dba <_printf_float+0x386>
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	07da      	lsls	r2, r3, #31
 8003d48:	d437      	bmi.n	8003dba <_printf_float+0x386>
 8003d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d4c:	ebaa 0903 	sub.w	r9, sl, r3
 8003d50:	9b06      	ldr	r3, [sp, #24]
 8003d52:	ebaa 0303 	sub.w	r3, sl, r3
 8003d56:	4599      	cmp	r9, r3
 8003d58:	bfa8      	it	ge
 8003d5a:	4699      	movge	r9, r3
 8003d5c:	f1b9 0f00 	cmp.w	r9, #0
 8003d60:	dc33      	bgt.n	8003dca <_printf_float+0x396>
 8003d62:	f04f 0800 	mov.w	r8, #0
 8003d66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d6a:	f104 0b1a 	add.w	fp, r4, #26
 8003d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d70:	ebaa 0303 	sub.w	r3, sl, r3
 8003d74:	eba3 0309 	sub.w	r3, r3, r9
 8003d78:	4543      	cmp	r3, r8
 8003d7a:	f77f af79 	ble.w	8003c70 <_printf_float+0x23c>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	465a      	mov	r2, fp
 8003d82:	4631      	mov	r1, r6
 8003d84:	4628      	mov	r0, r5
 8003d86:	47b8      	blx	r7
 8003d88:	3001      	adds	r0, #1
 8003d8a:	f43f aeae 	beq.w	8003aea <_printf_float+0xb6>
 8003d8e:	f108 0801 	add.w	r8, r8, #1
 8003d92:	e7ec      	b.n	8003d6e <_printf_float+0x33a>
 8003d94:	4642      	mov	r2, r8
 8003d96:	4631      	mov	r1, r6
 8003d98:	4628      	mov	r0, r5
 8003d9a:	47b8      	blx	r7
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d1c2      	bne.n	8003d26 <_printf_float+0x2f2>
 8003da0:	e6a3      	b.n	8003aea <_printf_float+0xb6>
 8003da2:	2301      	movs	r3, #1
 8003da4:	4631      	mov	r1, r6
 8003da6:	4628      	mov	r0, r5
 8003da8:	9206      	str	r2, [sp, #24]
 8003daa:	47b8      	blx	r7
 8003dac:	3001      	adds	r0, #1
 8003dae:	f43f ae9c 	beq.w	8003aea <_printf_float+0xb6>
 8003db2:	9a06      	ldr	r2, [sp, #24]
 8003db4:	f10b 0b01 	add.w	fp, fp, #1
 8003db8:	e7bb      	b.n	8003d32 <_printf_float+0x2fe>
 8003dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dbe:	4631      	mov	r1, r6
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	47b8      	blx	r7
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d1c0      	bne.n	8003d4a <_printf_float+0x316>
 8003dc8:	e68f      	b.n	8003aea <_printf_float+0xb6>
 8003dca:	9a06      	ldr	r2, [sp, #24]
 8003dcc:	464b      	mov	r3, r9
 8003dce:	4442      	add	r2, r8
 8003dd0:	4631      	mov	r1, r6
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	47b8      	blx	r7
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d1c3      	bne.n	8003d62 <_printf_float+0x32e>
 8003dda:	e686      	b.n	8003aea <_printf_float+0xb6>
 8003ddc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003de0:	f1ba 0f01 	cmp.w	sl, #1
 8003de4:	dc01      	bgt.n	8003dea <_printf_float+0x3b6>
 8003de6:	07db      	lsls	r3, r3, #31
 8003de8:	d536      	bpl.n	8003e58 <_printf_float+0x424>
 8003dea:	2301      	movs	r3, #1
 8003dec:	4642      	mov	r2, r8
 8003dee:	4631      	mov	r1, r6
 8003df0:	4628      	mov	r0, r5
 8003df2:	47b8      	blx	r7
 8003df4:	3001      	adds	r0, #1
 8003df6:	f43f ae78 	beq.w	8003aea <_printf_float+0xb6>
 8003dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b8      	blx	r7
 8003e04:	3001      	adds	r0, #1
 8003e06:	f43f ae70 	beq.w	8003aea <_printf_float+0xb6>
 8003e0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2300      	movs	r3, #0
 8003e12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e16:	f7fc fe57 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e1a:	b9c0      	cbnz	r0, 8003e4e <_printf_float+0x41a>
 8003e1c:	4653      	mov	r3, sl
 8003e1e:	f108 0201 	add.w	r2, r8, #1
 8003e22:	4631      	mov	r1, r6
 8003e24:	4628      	mov	r0, r5
 8003e26:	47b8      	blx	r7
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d10c      	bne.n	8003e46 <_printf_float+0x412>
 8003e2c:	e65d      	b.n	8003aea <_printf_float+0xb6>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	465a      	mov	r2, fp
 8003e32:	4631      	mov	r1, r6
 8003e34:	4628      	mov	r0, r5
 8003e36:	47b8      	blx	r7
 8003e38:	3001      	adds	r0, #1
 8003e3a:	f43f ae56 	beq.w	8003aea <_printf_float+0xb6>
 8003e3e:	f108 0801 	add.w	r8, r8, #1
 8003e42:	45d0      	cmp	r8, sl
 8003e44:	dbf3      	blt.n	8003e2e <_printf_float+0x3fa>
 8003e46:	464b      	mov	r3, r9
 8003e48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003e4c:	e6df      	b.n	8003c0e <_printf_float+0x1da>
 8003e4e:	f04f 0800 	mov.w	r8, #0
 8003e52:	f104 0b1a 	add.w	fp, r4, #26
 8003e56:	e7f4      	b.n	8003e42 <_printf_float+0x40e>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	4642      	mov	r2, r8
 8003e5c:	e7e1      	b.n	8003e22 <_printf_float+0x3ee>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	464a      	mov	r2, r9
 8003e62:	4631      	mov	r1, r6
 8003e64:	4628      	mov	r0, r5
 8003e66:	47b8      	blx	r7
 8003e68:	3001      	adds	r0, #1
 8003e6a:	f43f ae3e 	beq.w	8003aea <_printf_float+0xb6>
 8003e6e:	f108 0801 	add.w	r8, r8, #1
 8003e72:	68e3      	ldr	r3, [r4, #12]
 8003e74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003e76:	1a5b      	subs	r3, r3, r1
 8003e78:	4543      	cmp	r3, r8
 8003e7a:	dcf0      	bgt.n	8003e5e <_printf_float+0x42a>
 8003e7c:	e6fc      	b.n	8003c78 <_printf_float+0x244>
 8003e7e:	f04f 0800 	mov.w	r8, #0
 8003e82:	f104 0919 	add.w	r9, r4, #25
 8003e86:	e7f4      	b.n	8003e72 <_printf_float+0x43e>

08003e88 <_printf_common>:
 8003e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	4616      	mov	r6, r2
 8003e8e:	4698      	mov	r8, r3
 8003e90:	688a      	ldr	r2, [r1, #8]
 8003e92:	690b      	ldr	r3, [r1, #16]
 8003e94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bfb8      	it	lt
 8003e9c:	4613      	movlt	r3, r2
 8003e9e:	6033      	str	r3, [r6, #0]
 8003ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	b10a      	cbz	r2, 8003eae <_printf_common+0x26>
 8003eaa:	3301      	adds	r3, #1
 8003eac:	6033      	str	r3, [r6, #0]
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	0699      	lsls	r1, r3, #26
 8003eb2:	bf42      	ittt	mi
 8003eb4:	6833      	ldrmi	r3, [r6, #0]
 8003eb6:	3302      	addmi	r3, #2
 8003eb8:	6033      	strmi	r3, [r6, #0]
 8003eba:	6825      	ldr	r5, [r4, #0]
 8003ebc:	f015 0506 	ands.w	r5, r5, #6
 8003ec0:	d106      	bne.n	8003ed0 <_printf_common+0x48>
 8003ec2:	f104 0a19 	add.w	sl, r4, #25
 8003ec6:	68e3      	ldr	r3, [r4, #12]
 8003ec8:	6832      	ldr	r2, [r6, #0]
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	42ab      	cmp	r3, r5
 8003ece:	dc26      	bgt.n	8003f1e <_printf_common+0x96>
 8003ed0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ed4:	6822      	ldr	r2, [r4, #0]
 8003ed6:	3b00      	subs	r3, #0
 8003ed8:	bf18      	it	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	0692      	lsls	r2, r2, #26
 8003ede:	d42b      	bmi.n	8003f38 <_printf_common+0xb0>
 8003ee0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ee4:	4641      	mov	r1, r8
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	47c8      	blx	r9
 8003eea:	3001      	adds	r0, #1
 8003eec:	d01e      	beq.n	8003f2c <_printf_common+0xa4>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	6922      	ldr	r2, [r4, #16]
 8003ef2:	f003 0306 	and.w	r3, r3, #6
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	bf02      	ittt	eq
 8003efa:	68e5      	ldreq	r5, [r4, #12]
 8003efc:	6833      	ldreq	r3, [r6, #0]
 8003efe:	1aed      	subeq	r5, r5, r3
 8003f00:	68a3      	ldr	r3, [r4, #8]
 8003f02:	bf0c      	ite	eq
 8003f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f08:	2500      	movne	r5, #0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bfc4      	itt	gt
 8003f0e:	1a9b      	subgt	r3, r3, r2
 8003f10:	18ed      	addgt	r5, r5, r3
 8003f12:	2600      	movs	r6, #0
 8003f14:	341a      	adds	r4, #26
 8003f16:	42b5      	cmp	r5, r6
 8003f18:	d11a      	bne.n	8003f50 <_printf_common+0xc8>
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	e008      	b.n	8003f30 <_printf_common+0xa8>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4652      	mov	r2, sl
 8003f22:	4641      	mov	r1, r8
 8003f24:	4638      	mov	r0, r7
 8003f26:	47c8      	blx	r9
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d103      	bne.n	8003f34 <_printf_common+0xac>
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	3501      	adds	r5, #1
 8003f36:	e7c6      	b.n	8003ec6 <_printf_common+0x3e>
 8003f38:	18e1      	adds	r1, r4, r3
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	2030      	movs	r0, #48	@ 0x30
 8003f3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f42:	4422      	add	r2, r4
 8003f44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	e7c7      	b.n	8003ee0 <_printf_common+0x58>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4622      	mov	r2, r4
 8003f54:	4641      	mov	r1, r8
 8003f56:	4638      	mov	r0, r7
 8003f58:	47c8      	blx	r9
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d0e6      	beq.n	8003f2c <_printf_common+0xa4>
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7d9      	b.n	8003f16 <_printf_common+0x8e>
	...

08003f64 <_printf_i>:
 8003f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	7e0f      	ldrb	r7, [r1, #24]
 8003f6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f6c:	2f78      	cmp	r7, #120	@ 0x78
 8003f6e:	4691      	mov	r9, r2
 8003f70:	4680      	mov	r8, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	469a      	mov	sl, r3
 8003f76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f7a:	d807      	bhi.n	8003f8c <_printf_i+0x28>
 8003f7c:	2f62      	cmp	r7, #98	@ 0x62
 8003f7e:	d80a      	bhi.n	8003f96 <_printf_i+0x32>
 8003f80:	2f00      	cmp	r7, #0
 8003f82:	f000 80d2 	beq.w	800412a <_printf_i+0x1c6>
 8003f86:	2f58      	cmp	r7, #88	@ 0x58
 8003f88:	f000 80b9 	beq.w	80040fe <_printf_i+0x19a>
 8003f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f94:	e03a      	b.n	800400c <_printf_i+0xa8>
 8003f96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f9a:	2b15      	cmp	r3, #21
 8003f9c:	d8f6      	bhi.n	8003f8c <_printf_i+0x28>
 8003f9e:	a101      	add	r1, pc, #4	@ (adr r1, 8003fa4 <_printf_i+0x40>)
 8003fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fa4:	08003ffd 	.word	0x08003ffd
 8003fa8:	08004011 	.word	0x08004011
 8003fac:	08003f8d 	.word	0x08003f8d
 8003fb0:	08003f8d 	.word	0x08003f8d
 8003fb4:	08003f8d 	.word	0x08003f8d
 8003fb8:	08003f8d 	.word	0x08003f8d
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08003f8d 	.word	0x08003f8d
 8003fc4:	08003f8d 	.word	0x08003f8d
 8003fc8:	08003f8d 	.word	0x08003f8d
 8003fcc:	08003f8d 	.word	0x08003f8d
 8003fd0:	08004111 	.word	0x08004111
 8003fd4:	0800403b 	.word	0x0800403b
 8003fd8:	080040cb 	.word	0x080040cb
 8003fdc:	08003f8d 	.word	0x08003f8d
 8003fe0:	08003f8d 	.word	0x08003f8d
 8003fe4:	08004133 	.word	0x08004133
 8003fe8:	08003f8d 	.word	0x08003f8d
 8003fec:	0800403b 	.word	0x0800403b
 8003ff0:	08003f8d 	.word	0x08003f8d
 8003ff4:	08003f8d 	.word	0x08003f8d
 8003ff8:	080040d3 	.word	0x080040d3
 8003ffc:	6833      	ldr	r3, [r6, #0]
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6032      	str	r2, [r6, #0]
 8004004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004008:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800400c:	2301      	movs	r3, #1
 800400e:	e09d      	b.n	800414c <_printf_i+0x1e8>
 8004010:	6833      	ldr	r3, [r6, #0]
 8004012:	6820      	ldr	r0, [r4, #0]
 8004014:	1d19      	adds	r1, r3, #4
 8004016:	6031      	str	r1, [r6, #0]
 8004018:	0606      	lsls	r6, r0, #24
 800401a:	d501      	bpl.n	8004020 <_printf_i+0xbc>
 800401c:	681d      	ldr	r5, [r3, #0]
 800401e:	e003      	b.n	8004028 <_printf_i+0xc4>
 8004020:	0645      	lsls	r5, r0, #25
 8004022:	d5fb      	bpl.n	800401c <_printf_i+0xb8>
 8004024:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004028:	2d00      	cmp	r5, #0
 800402a:	da03      	bge.n	8004034 <_printf_i+0xd0>
 800402c:	232d      	movs	r3, #45	@ 0x2d
 800402e:	426d      	negs	r5, r5
 8004030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004034:	4859      	ldr	r0, [pc, #356]	@ (800419c <_printf_i+0x238>)
 8004036:	230a      	movs	r3, #10
 8004038:	e011      	b.n	800405e <_printf_i+0xfa>
 800403a:	6821      	ldr	r1, [r4, #0]
 800403c:	6833      	ldr	r3, [r6, #0]
 800403e:	0608      	lsls	r0, r1, #24
 8004040:	f853 5b04 	ldr.w	r5, [r3], #4
 8004044:	d402      	bmi.n	800404c <_printf_i+0xe8>
 8004046:	0649      	lsls	r1, r1, #25
 8004048:	bf48      	it	mi
 800404a:	b2ad      	uxthmi	r5, r5
 800404c:	2f6f      	cmp	r7, #111	@ 0x6f
 800404e:	4853      	ldr	r0, [pc, #332]	@ (800419c <_printf_i+0x238>)
 8004050:	6033      	str	r3, [r6, #0]
 8004052:	bf14      	ite	ne
 8004054:	230a      	movne	r3, #10
 8004056:	2308      	moveq	r3, #8
 8004058:	2100      	movs	r1, #0
 800405a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800405e:	6866      	ldr	r6, [r4, #4]
 8004060:	60a6      	str	r6, [r4, #8]
 8004062:	2e00      	cmp	r6, #0
 8004064:	bfa2      	ittt	ge
 8004066:	6821      	ldrge	r1, [r4, #0]
 8004068:	f021 0104 	bicge.w	r1, r1, #4
 800406c:	6021      	strge	r1, [r4, #0]
 800406e:	b90d      	cbnz	r5, 8004074 <_printf_i+0x110>
 8004070:	2e00      	cmp	r6, #0
 8004072:	d04b      	beq.n	800410c <_printf_i+0x1a8>
 8004074:	4616      	mov	r6, r2
 8004076:	fbb5 f1f3 	udiv	r1, r5, r3
 800407a:	fb03 5711 	mls	r7, r3, r1, r5
 800407e:	5dc7      	ldrb	r7, [r0, r7]
 8004080:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004084:	462f      	mov	r7, r5
 8004086:	42bb      	cmp	r3, r7
 8004088:	460d      	mov	r5, r1
 800408a:	d9f4      	bls.n	8004076 <_printf_i+0x112>
 800408c:	2b08      	cmp	r3, #8
 800408e:	d10b      	bne.n	80040a8 <_printf_i+0x144>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	07df      	lsls	r7, r3, #31
 8004094:	d508      	bpl.n	80040a8 <_printf_i+0x144>
 8004096:	6923      	ldr	r3, [r4, #16]
 8004098:	6861      	ldr	r1, [r4, #4]
 800409a:	4299      	cmp	r1, r3
 800409c:	bfde      	ittt	le
 800409e:	2330      	movle	r3, #48	@ 0x30
 80040a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040a8:	1b92      	subs	r2, r2, r6
 80040aa:	6122      	str	r2, [r4, #16]
 80040ac:	f8cd a000 	str.w	sl, [sp]
 80040b0:	464b      	mov	r3, r9
 80040b2:	aa03      	add	r2, sp, #12
 80040b4:	4621      	mov	r1, r4
 80040b6:	4640      	mov	r0, r8
 80040b8:	f7ff fee6 	bl	8003e88 <_printf_common>
 80040bc:	3001      	adds	r0, #1
 80040be:	d14a      	bne.n	8004156 <_printf_i+0x1f2>
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	b004      	add	sp, #16
 80040c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	f043 0320 	orr.w	r3, r3, #32
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	4833      	ldr	r0, [pc, #204]	@ (80041a0 <_printf_i+0x23c>)
 80040d4:	2778      	movs	r7, #120	@ 0x78
 80040d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	6831      	ldr	r1, [r6, #0]
 80040de:	061f      	lsls	r7, r3, #24
 80040e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80040e4:	d402      	bmi.n	80040ec <_printf_i+0x188>
 80040e6:	065f      	lsls	r7, r3, #25
 80040e8:	bf48      	it	mi
 80040ea:	b2ad      	uxthmi	r5, r5
 80040ec:	6031      	str	r1, [r6, #0]
 80040ee:	07d9      	lsls	r1, r3, #31
 80040f0:	bf44      	itt	mi
 80040f2:	f043 0320 	orrmi.w	r3, r3, #32
 80040f6:	6023      	strmi	r3, [r4, #0]
 80040f8:	b11d      	cbz	r5, 8004102 <_printf_i+0x19e>
 80040fa:	2310      	movs	r3, #16
 80040fc:	e7ac      	b.n	8004058 <_printf_i+0xf4>
 80040fe:	4827      	ldr	r0, [pc, #156]	@ (800419c <_printf_i+0x238>)
 8004100:	e7e9      	b.n	80040d6 <_printf_i+0x172>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	f023 0320 	bic.w	r3, r3, #32
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	e7f6      	b.n	80040fa <_printf_i+0x196>
 800410c:	4616      	mov	r6, r2
 800410e:	e7bd      	b.n	800408c <_printf_i+0x128>
 8004110:	6833      	ldr	r3, [r6, #0]
 8004112:	6825      	ldr	r5, [r4, #0]
 8004114:	6961      	ldr	r1, [r4, #20]
 8004116:	1d18      	adds	r0, r3, #4
 8004118:	6030      	str	r0, [r6, #0]
 800411a:	062e      	lsls	r6, r5, #24
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	d501      	bpl.n	8004124 <_printf_i+0x1c0>
 8004120:	6019      	str	r1, [r3, #0]
 8004122:	e002      	b.n	800412a <_printf_i+0x1c6>
 8004124:	0668      	lsls	r0, r5, #25
 8004126:	d5fb      	bpl.n	8004120 <_printf_i+0x1bc>
 8004128:	8019      	strh	r1, [r3, #0]
 800412a:	2300      	movs	r3, #0
 800412c:	6123      	str	r3, [r4, #16]
 800412e:	4616      	mov	r6, r2
 8004130:	e7bc      	b.n	80040ac <_printf_i+0x148>
 8004132:	6833      	ldr	r3, [r6, #0]
 8004134:	1d1a      	adds	r2, r3, #4
 8004136:	6032      	str	r2, [r6, #0]
 8004138:	681e      	ldr	r6, [r3, #0]
 800413a:	6862      	ldr	r2, [r4, #4]
 800413c:	2100      	movs	r1, #0
 800413e:	4630      	mov	r0, r6
 8004140:	f7fc f846 	bl	80001d0 <memchr>
 8004144:	b108      	cbz	r0, 800414a <_printf_i+0x1e6>
 8004146:	1b80      	subs	r0, r0, r6
 8004148:	6060      	str	r0, [r4, #4]
 800414a:	6863      	ldr	r3, [r4, #4]
 800414c:	6123      	str	r3, [r4, #16]
 800414e:	2300      	movs	r3, #0
 8004150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004154:	e7aa      	b.n	80040ac <_printf_i+0x148>
 8004156:	6923      	ldr	r3, [r4, #16]
 8004158:	4632      	mov	r2, r6
 800415a:	4649      	mov	r1, r9
 800415c:	4640      	mov	r0, r8
 800415e:	47d0      	blx	sl
 8004160:	3001      	adds	r0, #1
 8004162:	d0ad      	beq.n	80040c0 <_printf_i+0x15c>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	079b      	lsls	r3, r3, #30
 8004168:	d413      	bmi.n	8004192 <_printf_i+0x22e>
 800416a:	68e0      	ldr	r0, [r4, #12]
 800416c:	9b03      	ldr	r3, [sp, #12]
 800416e:	4298      	cmp	r0, r3
 8004170:	bfb8      	it	lt
 8004172:	4618      	movlt	r0, r3
 8004174:	e7a6      	b.n	80040c4 <_printf_i+0x160>
 8004176:	2301      	movs	r3, #1
 8004178:	4632      	mov	r2, r6
 800417a:	4649      	mov	r1, r9
 800417c:	4640      	mov	r0, r8
 800417e:	47d0      	blx	sl
 8004180:	3001      	adds	r0, #1
 8004182:	d09d      	beq.n	80040c0 <_printf_i+0x15c>
 8004184:	3501      	adds	r5, #1
 8004186:	68e3      	ldr	r3, [r4, #12]
 8004188:	9903      	ldr	r1, [sp, #12]
 800418a:	1a5b      	subs	r3, r3, r1
 800418c:	42ab      	cmp	r3, r5
 800418e:	dcf2      	bgt.n	8004176 <_printf_i+0x212>
 8004190:	e7eb      	b.n	800416a <_printf_i+0x206>
 8004192:	2500      	movs	r5, #0
 8004194:	f104 0619 	add.w	r6, r4, #25
 8004198:	e7f5      	b.n	8004186 <_printf_i+0x222>
 800419a:	bf00      	nop
 800419c:	0800693a 	.word	0x0800693a
 80041a0:	0800694b 	.word	0x0800694b

080041a4 <std>:
 80041a4:	2300      	movs	r3, #0
 80041a6:	b510      	push	{r4, lr}
 80041a8:	4604      	mov	r4, r0
 80041aa:	e9c0 3300 	strd	r3, r3, [r0]
 80041ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041b2:	6083      	str	r3, [r0, #8]
 80041b4:	8181      	strh	r1, [r0, #12]
 80041b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80041b8:	81c2      	strh	r2, [r0, #14]
 80041ba:	6183      	str	r3, [r0, #24]
 80041bc:	4619      	mov	r1, r3
 80041be:	2208      	movs	r2, #8
 80041c0:	305c      	adds	r0, #92	@ 0x5c
 80041c2:	f000 fa2d 	bl	8004620 <memset>
 80041c6:	4b0d      	ldr	r3, [pc, #52]	@ (80041fc <std+0x58>)
 80041c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80041ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004200 <std+0x5c>)
 80041cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <std+0x60>)
 80041d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <std+0x64>)
 80041d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80041d6:	4b0d      	ldr	r3, [pc, #52]	@ (800420c <std+0x68>)
 80041d8:	6224      	str	r4, [r4, #32]
 80041da:	429c      	cmp	r4, r3
 80041dc:	d006      	beq.n	80041ec <std+0x48>
 80041de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041e2:	4294      	cmp	r4, r2
 80041e4:	d002      	beq.n	80041ec <std+0x48>
 80041e6:	33d0      	adds	r3, #208	@ 0xd0
 80041e8:	429c      	cmp	r4, r3
 80041ea:	d105      	bne.n	80041f8 <std+0x54>
 80041ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f4:	f000 baa6 	b.w	8004744 <__retarget_lock_init_recursive>
 80041f8:	bd10      	pop	{r4, pc}
 80041fa:	bf00      	nop
 80041fc:	08004471 	.word	0x08004471
 8004200:	08004493 	.word	0x08004493
 8004204:	080044cb 	.word	0x080044cb
 8004208:	080044ef 	.word	0x080044ef
 800420c:	200004d4 	.word	0x200004d4

08004210 <stdio_exit_handler>:
 8004210:	4a02      	ldr	r2, [pc, #8]	@ (800421c <stdio_exit_handler+0xc>)
 8004212:	4903      	ldr	r1, [pc, #12]	@ (8004220 <stdio_exit_handler+0x10>)
 8004214:	4803      	ldr	r0, [pc, #12]	@ (8004224 <stdio_exit_handler+0x14>)
 8004216:	f000 b869 	b.w	80042ec <_fwalk_sglue>
 800421a:	bf00      	nop
 800421c:	2000000c 	.word	0x2000000c
 8004220:	08006329 	.word	0x08006329
 8004224:	2000001c 	.word	0x2000001c

08004228 <cleanup_stdio>:
 8004228:	6841      	ldr	r1, [r0, #4]
 800422a:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <cleanup_stdio+0x34>)
 800422c:	4299      	cmp	r1, r3
 800422e:	b510      	push	{r4, lr}
 8004230:	4604      	mov	r4, r0
 8004232:	d001      	beq.n	8004238 <cleanup_stdio+0x10>
 8004234:	f002 f878 	bl	8006328 <_fflush_r>
 8004238:	68a1      	ldr	r1, [r4, #8]
 800423a:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <cleanup_stdio+0x38>)
 800423c:	4299      	cmp	r1, r3
 800423e:	d002      	beq.n	8004246 <cleanup_stdio+0x1e>
 8004240:	4620      	mov	r0, r4
 8004242:	f002 f871 	bl	8006328 <_fflush_r>
 8004246:	68e1      	ldr	r1, [r4, #12]
 8004248:	4b06      	ldr	r3, [pc, #24]	@ (8004264 <cleanup_stdio+0x3c>)
 800424a:	4299      	cmp	r1, r3
 800424c:	d004      	beq.n	8004258 <cleanup_stdio+0x30>
 800424e:	4620      	mov	r0, r4
 8004250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004254:	f002 b868 	b.w	8006328 <_fflush_r>
 8004258:	bd10      	pop	{r4, pc}
 800425a:	bf00      	nop
 800425c:	200004d4 	.word	0x200004d4
 8004260:	2000053c 	.word	0x2000053c
 8004264:	200005a4 	.word	0x200005a4

08004268 <global_stdio_init.part.0>:
 8004268:	b510      	push	{r4, lr}
 800426a:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <global_stdio_init.part.0+0x30>)
 800426c:	4c0b      	ldr	r4, [pc, #44]	@ (800429c <global_stdio_init.part.0+0x34>)
 800426e:	4a0c      	ldr	r2, [pc, #48]	@ (80042a0 <global_stdio_init.part.0+0x38>)
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	4620      	mov	r0, r4
 8004274:	2200      	movs	r2, #0
 8004276:	2104      	movs	r1, #4
 8004278:	f7ff ff94 	bl	80041a4 <std>
 800427c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004280:	2201      	movs	r2, #1
 8004282:	2109      	movs	r1, #9
 8004284:	f7ff ff8e 	bl	80041a4 <std>
 8004288:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800428c:	2202      	movs	r2, #2
 800428e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004292:	2112      	movs	r1, #18
 8004294:	f7ff bf86 	b.w	80041a4 <std>
 8004298:	2000060c 	.word	0x2000060c
 800429c:	200004d4 	.word	0x200004d4
 80042a0:	08004211 	.word	0x08004211

080042a4 <__sfp_lock_acquire>:
 80042a4:	4801      	ldr	r0, [pc, #4]	@ (80042ac <__sfp_lock_acquire+0x8>)
 80042a6:	f000 ba4e 	b.w	8004746 <__retarget_lock_acquire_recursive>
 80042aa:	bf00      	nop
 80042ac:	20000615 	.word	0x20000615

080042b0 <__sfp_lock_release>:
 80042b0:	4801      	ldr	r0, [pc, #4]	@ (80042b8 <__sfp_lock_release+0x8>)
 80042b2:	f000 ba49 	b.w	8004748 <__retarget_lock_release_recursive>
 80042b6:	bf00      	nop
 80042b8:	20000615 	.word	0x20000615

080042bc <__sinit>:
 80042bc:	b510      	push	{r4, lr}
 80042be:	4604      	mov	r4, r0
 80042c0:	f7ff fff0 	bl	80042a4 <__sfp_lock_acquire>
 80042c4:	6a23      	ldr	r3, [r4, #32]
 80042c6:	b11b      	cbz	r3, 80042d0 <__sinit+0x14>
 80042c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042cc:	f7ff bff0 	b.w	80042b0 <__sfp_lock_release>
 80042d0:	4b04      	ldr	r3, [pc, #16]	@ (80042e4 <__sinit+0x28>)
 80042d2:	6223      	str	r3, [r4, #32]
 80042d4:	4b04      	ldr	r3, [pc, #16]	@ (80042e8 <__sinit+0x2c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f5      	bne.n	80042c8 <__sinit+0xc>
 80042dc:	f7ff ffc4 	bl	8004268 <global_stdio_init.part.0>
 80042e0:	e7f2      	b.n	80042c8 <__sinit+0xc>
 80042e2:	bf00      	nop
 80042e4:	08004229 	.word	0x08004229
 80042e8:	2000060c 	.word	0x2000060c

080042ec <_fwalk_sglue>:
 80042ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042f0:	4607      	mov	r7, r0
 80042f2:	4688      	mov	r8, r1
 80042f4:	4614      	mov	r4, r2
 80042f6:	2600      	movs	r6, #0
 80042f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004300:	d505      	bpl.n	800430e <_fwalk_sglue+0x22>
 8004302:	6824      	ldr	r4, [r4, #0]
 8004304:	2c00      	cmp	r4, #0
 8004306:	d1f7      	bne.n	80042f8 <_fwalk_sglue+0xc>
 8004308:	4630      	mov	r0, r6
 800430a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800430e:	89ab      	ldrh	r3, [r5, #12]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d907      	bls.n	8004324 <_fwalk_sglue+0x38>
 8004314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004318:	3301      	adds	r3, #1
 800431a:	d003      	beq.n	8004324 <_fwalk_sglue+0x38>
 800431c:	4629      	mov	r1, r5
 800431e:	4638      	mov	r0, r7
 8004320:	47c0      	blx	r8
 8004322:	4306      	orrs	r6, r0
 8004324:	3568      	adds	r5, #104	@ 0x68
 8004326:	e7e9      	b.n	80042fc <_fwalk_sglue+0x10>

08004328 <iprintf>:
 8004328:	b40f      	push	{r0, r1, r2, r3}
 800432a:	b507      	push	{r0, r1, r2, lr}
 800432c:	4906      	ldr	r1, [pc, #24]	@ (8004348 <iprintf+0x20>)
 800432e:	ab04      	add	r3, sp, #16
 8004330:	6808      	ldr	r0, [r1, #0]
 8004332:	f853 2b04 	ldr.w	r2, [r3], #4
 8004336:	6881      	ldr	r1, [r0, #8]
 8004338:	9301      	str	r3, [sp, #4]
 800433a:	f001 fe59 	bl	8005ff0 <_vfiprintf_r>
 800433e:	b003      	add	sp, #12
 8004340:	f85d eb04 	ldr.w	lr, [sp], #4
 8004344:	b004      	add	sp, #16
 8004346:	4770      	bx	lr
 8004348:	20000018 	.word	0x20000018

0800434c <_puts_r>:
 800434c:	6a03      	ldr	r3, [r0, #32]
 800434e:	b570      	push	{r4, r5, r6, lr}
 8004350:	6884      	ldr	r4, [r0, #8]
 8004352:	4605      	mov	r5, r0
 8004354:	460e      	mov	r6, r1
 8004356:	b90b      	cbnz	r3, 800435c <_puts_r+0x10>
 8004358:	f7ff ffb0 	bl	80042bc <__sinit>
 800435c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800435e:	07db      	lsls	r3, r3, #31
 8004360:	d405      	bmi.n	800436e <_puts_r+0x22>
 8004362:	89a3      	ldrh	r3, [r4, #12]
 8004364:	0598      	lsls	r0, r3, #22
 8004366:	d402      	bmi.n	800436e <_puts_r+0x22>
 8004368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800436a:	f000 f9ec 	bl	8004746 <__retarget_lock_acquire_recursive>
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	0719      	lsls	r1, r3, #28
 8004372:	d502      	bpl.n	800437a <_puts_r+0x2e>
 8004374:	6923      	ldr	r3, [r4, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d135      	bne.n	80043e6 <_puts_r+0x9a>
 800437a:	4621      	mov	r1, r4
 800437c:	4628      	mov	r0, r5
 800437e:	f000 f8f9 	bl	8004574 <__swsetup_r>
 8004382:	b380      	cbz	r0, 80043e6 <_puts_r+0x9a>
 8004384:	f04f 35ff 	mov.w	r5, #4294967295
 8004388:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800438a:	07da      	lsls	r2, r3, #31
 800438c:	d405      	bmi.n	800439a <_puts_r+0x4e>
 800438e:	89a3      	ldrh	r3, [r4, #12]
 8004390:	059b      	lsls	r3, r3, #22
 8004392:	d402      	bmi.n	800439a <_puts_r+0x4e>
 8004394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004396:	f000 f9d7 	bl	8004748 <__retarget_lock_release_recursive>
 800439a:	4628      	mov	r0, r5
 800439c:	bd70      	pop	{r4, r5, r6, pc}
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da04      	bge.n	80043ac <_puts_r+0x60>
 80043a2:	69a2      	ldr	r2, [r4, #24]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	dc17      	bgt.n	80043d8 <_puts_r+0x8c>
 80043a8:	290a      	cmp	r1, #10
 80043aa:	d015      	beq.n	80043d8 <_puts_r+0x8c>
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	6022      	str	r2, [r4, #0]
 80043b2:	7019      	strb	r1, [r3, #0]
 80043b4:	68a3      	ldr	r3, [r4, #8]
 80043b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043ba:	3b01      	subs	r3, #1
 80043bc:	60a3      	str	r3, [r4, #8]
 80043be:	2900      	cmp	r1, #0
 80043c0:	d1ed      	bne.n	800439e <_puts_r+0x52>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	da11      	bge.n	80043ea <_puts_r+0x9e>
 80043c6:	4622      	mov	r2, r4
 80043c8:	210a      	movs	r1, #10
 80043ca:	4628      	mov	r0, r5
 80043cc:	f000 f893 	bl	80044f6 <__swbuf_r>
 80043d0:	3001      	adds	r0, #1
 80043d2:	d0d7      	beq.n	8004384 <_puts_r+0x38>
 80043d4:	250a      	movs	r5, #10
 80043d6:	e7d7      	b.n	8004388 <_puts_r+0x3c>
 80043d8:	4622      	mov	r2, r4
 80043da:	4628      	mov	r0, r5
 80043dc:	f000 f88b 	bl	80044f6 <__swbuf_r>
 80043e0:	3001      	adds	r0, #1
 80043e2:	d1e7      	bne.n	80043b4 <_puts_r+0x68>
 80043e4:	e7ce      	b.n	8004384 <_puts_r+0x38>
 80043e6:	3e01      	subs	r6, #1
 80043e8:	e7e4      	b.n	80043b4 <_puts_r+0x68>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	6022      	str	r2, [r4, #0]
 80043f0:	220a      	movs	r2, #10
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	e7ee      	b.n	80043d4 <_puts_r+0x88>
	...

080043f8 <puts>:
 80043f8:	4b02      	ldr	r3, [pc, #8]	@ (8004404 <puts+0xc>)
 80043fa:	4601      	mov	r1, r0
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	f7ff bfa5 	b.w	800434c <_puts_r>
 8004402:	bf00      	nop
 8004404:	20000018 	.word	0x20000018

08004408 <sniprintf>:
 8004408:	b40c      	push	{r2, r3}
 800440a:	b530      	push	{r4, r5, lr}
 800440c:	4b17      	ldr	r3, [pc, #92]	@ (800446c <sniprintf+0x64>)
 800440e:	1e0c      	subs	r4, r1, #0
 8004410:	681d      	ldr	r5, [r3, #0]
 8004412:	b09d      	sub	sp, #116	@ 0x74
 8004414:	da08      	bge.n	8004428 <sniprintf+0x20>
 8004416:	238b      	movs	r3, #139	@ 0x8b
 8004418:	602b      	str	r3, [r5, #0]
 800441a:	f04f 30ff 	mov.w	r0, #4294967295
 800441e:	b01d      	add	sp, #116	@ 0x74
 8004420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004424:	b002      	add	sp, #8
 8004426:	4770      	bx	lr
 8004428:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800442c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004430:	bf14      	ite	ne
 8004432:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004436:	4623      	moveq	r3, r4
 8004438:	9304      	str	r3, [sp, #16]
 800443a:	9307      	str	r3, [sp, #28]
 800443c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004440:	9002      	str	r0, [sp, #8]
 8004442:	9006      	str	r0, [sp, #24]
 8004444:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004448:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800444a:	ab21      	add	r3, sp, #132	@ 0x84
 800444c:	a902      	add	r1, sp, #8
 800444e:	4628      	mov	r0, r5
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	f001 fca7 	bl	8005da4 <_svfiprintf_r>
 8004456:	1c43      	adds	r3, r0, #1
 8004458:	bfbc      	itt	lt
 800445a:	238b      	movlt	r3, #139	@ 0x8b
 800445c:	602b      	strlt	r3, [r5, #0]
 800445e:	2c00      	cmp	r4, #0
 8004460:	d0dd      	beq.n	800441e <sniprintf+0x16>
 8004462:	9b02      	ldr	r3, [sp, #8]
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	e7d9      	b.n	800441e <sniprintf+0x16>
 800446a:	bf00      	nop
 800446c:	20000018 	.word	0x20000018

08004470 <__sread>:
 8004470:	b510      	push	{r4, lr}
 8004472:	460c      	mov	r4, r1
 8004474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004478:	f000 f916 	bl	80046a8 <_read_r>
 800447c:	2800      	cmp	r0, #0
 800447e:	bfab      	itete	ge
 8004480:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004482:	89a3      	ldrhlt	r3, [r4, #12]
 8004484:	181b      	addge	r3, r3, r0
 8004486:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800448a:	bfac      	ite	ge
 800448c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800448e:	81a3      	strhlt	r3, [r4, #12]
 8004490:	bd10      	pop	{r4, pc}

08004492 <__swrite>:
 8004492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004496:	461f      	mov	r7, r3
 8004498:	898b      	ldrh	r3, [r1, #12]
 800449a:	05db      	lsls	r3, r3, #23
 800449c:	4605      	mov	r5, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	4616      	mov	r6, r2
 80044a2:	d505      	bpl.n	80044b0 <__swrite+0x1e>
 80044a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a8:	2302      	movs	r3, #2
 80044aa:	2200      	movs	r2, #0
 80044ac:	f000 f8ea 	bl	8004684 <_lseek_r>
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044ba:	81a3      	strh	r3, [r4, #12]
 80044bc:	4632      	mov	r2, r6
 80044be:	463b      	mov	r3, r7
 80044c0:	4628      	mov	r0, r5
 80044c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044c6:	f000 b901 	b.w	80046cc <_write_r>

080044ca <__sseek>:
 80044ca:	b510      	push	{r4, lr}
 80044cc:	460c      	mov	r4, r1
 80044ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d2:	f000 f8d7 	bl	8004684 <_lseek_r>
 80044d6:	1c43      	adds	r3, r0, #1
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	bf15      	itete	ne
 80044dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044e6:	81a3      	strheq	r3, [r4, #12]
 80044e8:	bf18      	it	ne
 80044ea:	81a3      	strhne	r3, [r4, #12]
 80044ec:	bd10      	pop	{r4, pc}

080044ee <__sclose>:
 80044ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f2:	f000 b8b7 	b.w	8004664 <_close_r>

080044f6 <__swbuf_r>:
 80044f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f8:	460e      	mov	r6, r1
 80044fa:	4614      	mov	r4, r2
 80044fc:	4605      	mov	r5, r0
 80044fe:	b118      	cbz	r0, 8004508 <__swbuf_r+0x12>
 8004500:	6a03      	ldr	r3, [r0, #32]
 8004502:	b90b      	cbnz	r3, 8004508 <__swbuf_r+0x12>
 8004504:	f7ff feda 	bl	80042bc <__sinit>
 8004508:	69a3      	ldr	r3, [r4, #24]
 800450a:	60a3      	str	r3, [r4, #8]
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	071a      	lsls	r2, r3, #28
 8004510:	d501      	bpl.n	8004516 <__swbuf_r+0x20>
 8004512:	6923      	ldr	r3, [r4, #16]
 8004514:	b943      	cbnz	r3, 8004528 <__swbuf_r+0x32>
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f000 f82b 	bl	8004574 <__swsetup_r>
 800451e:	b118      	cbz	r0, 8004528 <__swbuf_r+0x32>
 8004520:	f04f 37ff 	mov.w	r7, #4294967295
 8004524:	4638      	mov	r0, r7
 8004526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	6922      	ldr	r2, [r4, #16]
 800452c:	1a98      	subs	r0, r3, r2
 800452e:	6963      	ldr	r3, [r4, #20]
 8004530:	b2f6      	uxtb	r6, r6
 8004532:	4283      	cmp	r3, r0
 8004534:	4637      	mov	r7, r6
 8004536:	dc05      	bgt.n	8004544 <__swbuf_r+0x4e>
 8004538:	4621      	mov	r1, r4
 800453a:	4628      	mov	r0, r5
 800453c:	f001 fef4 	bl	8006328 <_fflush_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	d1ed      	bne.n	8004520 <__swbuf_r+0x2a>
 8004544:	68a3      	ldr	r3, [r4, #8]
 8004546:	3b01      	subs	r3, #1
 8004548:	60a3      	str	r3, [r4, #8]
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	6022      	str	r2, [r4, #0]
 8004550:	701e      	strb	r6, [r3, #0]
 8004552:	6962      	ldr	r2, [r4, #20]
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	429a      	cmp	r2, r3
 8004558:	d004      	beq.n	8004564 <__swbuf_r+0x6e>
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	07db      	lsls	r3, r3, #31
 800455e:	d5e1      	bpl.n	8004524 <__swbuf_r+0x2e>
 8004560:	2e0a      	cmp	r6, #10
 8004562:	d1df      	bne.n	8004524 <__swbuf_r+0x2e>
 8004564:	4621      	mov	r1, r4
 8004566:	4628      	mov	r0, r5
 8004568:	f001 fede 	bl	8006328 <_fflush_r>
 800456c:	2800      	cmp	r0, #0
 800456e:	d0d9      	beq.n	8004524 <__swbuf_r+0x2e>
 8004570:	e7d6      	b.n	8004520 <__swbuf_r+0x2a>
	...

08004574 <__swsetup_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4b29      	ldr	r3, [pc, #164]	@ (800461c <__swsetup_r+0xa8>)
 8004578:	4605      	mov	r5, r0
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	460c      	mov	r4, r1
 800457e:	b118      	cbz	r0, 8004588 <__swsetup_r+0x14>
 8004580:	6a03      	ldr	r3, [r0, #32]
 8004582:	b90b      	cbnz	r3, 8004588 <__swsetup_r+0x14>
 8004584:	f7ff fe9a 	bl	80042bc <__sinit>
 8004588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800458c:	0719      	lsls	r1, r3, #28
 800458e:	d422      	bmi.n	80045d6 <__swsetup_r+0x62>
 8004590:	06da      	lsls	r2, r3, #27
 8004592:	d407      	bmi.n	80045a4 <__swsetup_r+0x30>
 8004594:	2209      	movs	r2, #9
 8004596:	602a      	str	r2, [r5, #0]
 8004598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800459c:	81a3      	strh	r3, [r4, #12]
 800459e:	f04f 30ff 	mov.w	r0, #4294967295
 80045a2:	e033      	b.n	800460c <__swsetup_r+0x98>
 80045a4:	0758      	lsls	r0, r3, #29
 80045a6:	d512      	bpl.n	80045ce <__swsetup_r+0x5a>
 80045a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045aa:	b141      	cbz	r1, 80045be <__swsetup_r+0x4a>
 80045ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045b0:	4299      	cmp	r1, r3
 80045b2:	d002      	beq.n	80045ba <__swsetup_r+0x46>
 80045b4:	4628      	mov	r0, r5
 80045b6:	f000 ff17 	bl	80053e8 <_free_r>
 80045ba:	2300      	movs	r3, #0
 80045bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80045be:	89a3      	ldrh	r3, [r4, #12]
 80045c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80045c4:	81a3      	strh	r3, [r4, #12]
 80045c6:	2300      	movs	r3, #0
 80045c8:	6063      	str	r3, [r4, #4]
 80045ca:	6923      	ldr	r3, [r4, #16]
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	f043 0308 	orr.w	r3, r3, #8
 80045d4:	81a3      	strh	r3, [r4, #12]
 80045d6:	6923      	ldr	r3, [r4, #16]
 80045d8:	b94b      	cbnz	r3, 80045ee <__swsetup_r+0x7a>
 80045da:	89a3      	ldrh	r3, [r4, #12]
 80045dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80045e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e4:	d003      	beq.n	80045ee <__swsetup_r+0x7a>
 80045e6:	4621      	mov	r1, r4
 80045e8:	4628      	mov	r0, r5
 80045ea:	f001 feeb 	bl	80063c4 <__smakebuf_r>
 80045ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f2:	f013 0201 	ands.w	r2, r3, #1
 80045f6:	d00a      	beq.n	800460e <__swsetup_r+0x9a>
 80045f8:	2200      	movs	r2, #0
 80045fa:	60a2      	str	r2, [r4, #8]
 80045fc:	6962      	ldr	r2, [r4, #20]
 80045fe:	4252      	negs	r2, r2
 8004600:	61a2      	str	r2, [r4, #24]
 8004602:	6922      	ldr	r2, [r4, #16]
 8004604:	b942      	cbnz	r2, 8004618 <__swsetup_r+0xa4>
 8004606:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800460a:	d1c5      	bne.n	8004598 <__swsetup_r+0x24>
 800460c:	bd38      	pop	{r3, r4, r5, pc}
 800460e:	0799      	lsls	r1, r3, #30
 8004610:	bf58      	it	pl
 8004612:	6962      	ldrpl	r2, [r4, #20]
 8004614:	60a2      	str	r2, [r4, #8]
 8004616:	e7f4      	b.n	8004602 <__swsetup_r+0x8e>
 8004618:	2000      	movs	r0, #0
 800461a:	e7f7      	b.n	800460c <__swsetup_r+0x98>
 800461c:	20000018 	.word	0x20000018

08004620 <memset>:
 8004620:	4402      	add	r2, r0
 8004622:	4603      	mov	r3, r0
 8004624:	4293      	cmp	r3, r2
 8004626:	d100      	bne.n	800462a <memset+0xa>
 8004628:	4770      	bx	lr
 800462a:	f803 1b01 	strb.w	r1, [r3], #1
 800462e:	e7f9      	b.n	8004624 <memset+0x4>

08004630 <strstr>:
 8004630:	780a      	ldrb	r2, [r1, #0]
 8004632:	b570      	push	{r4, r5, r6, lr}
 8004634:	b96a      	cbnz	r2, 8004652 <strstr+0x22>
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	429a      	cmp	r2, r3
 800463a:	d109      	bne.n	8004650 <strstr+0x20>
 800463c:	460c      	mov	r4, r1
 800463e:	4605      	mov	r5, r0
 8004640:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f6      	beq.n	8004636 <strstr+0x6>
 8004648:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800464c:	429e      	cmp	r6, r3
 800464e:	d0f7      	beq.n	8004640 <strstr+0x10>
 8004650:	3001      	adds	r0, #1
 8004652:	7803      	ldrb	r3, [r0, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1ef      	bne.n	8004638 <strstr+0x8>
 8004658:	4618      	mov	r0, r3
 800465a:	e7ec      	b.n	8004636 <strstr+0x6>

0800465c <_localeconv_r>:
 800465c:	4800      	ldr	r0, [pc, #0]	@ (8004660 <_localeconv_r+0x4>)
 800465e:	4770      	bx	lr
 8004660:	20000158 	.word	0x20000158

08004664 <_close_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4d06      	ldr	r5, [pc, #24]	@ (8004680 <_close_r+0x1c>)
 8004668:	2300      	movs	r3, #0
 800466a:	4604      	mov	r4, r0
 800466c:	4608      	mov	r0, r1
 800466e:	602b      	str	r3, [r5, #0]
 8004670:	f7fd f887 	bl	8001782 <_close>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_close_r+0x1a>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	b103      	cbz	r3, 800467e <_close_r+0x1a>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	20000610 	.word	0x20000610

08004684 <_lseek_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4d07      	ldr	r5, [pc, #28]	@ (80046a4 <_lseek_r+0x20>)
 8004688:	4604      	mov	r4, r0
 800468a:	4608      	mov	r0, r1
 800468c:	4611      	mov	r1, r2
 800468e:	2200      	movs	r2, #0
 8004690:	602a      	str	r2, [r5, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f7fd f89c 	bl	80017d0 <_lseek>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_lseek_r+0x1e>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_lseek_r+0x1e>
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	20000610 	.word	0x20000610

080046a8 <_read_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d07      	ldr	r5, [pc, #28]	@ (80046c8 <_read_r+0x20>)
 80046ac:	4604      	mov	r4, r0
 80046ae:	4608      	mov	r0, r1
 80046b0:	4611      	mov	r1, r2
 80046b2:	2200      	movs	r2, #0
 80046b4:	602a      	str	r2, [r5, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f7fd f846 	bl	8001748 <_read>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d102      	bne.n	80046c6 <_read_r+0x1e>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	b103      	cbz	r3, 80046c6 <_read_r+0x1e>
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	20000610 	.word	0x20000610

080046cc <_write_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4d07      	ldr	r5, [pc, #28]	@ (80046ec <_write_r+0x20>)
 80046d0:	4604      	mov	r4, r0
 80046d2:	4608      	mov	r0, r1
 80046d4:	4611      	mov	r1, r2
 80046d6:	2200      	movs	r2, #0
 80046d8:	602a      	str	r2, [r5, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	f7fc fd6c 	bl	80011b8 <_write>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	d102      	bne.n	80046ea <_write_r+0x1e>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	b103      	cbz	r3, 80046ea <_write_r+0x1e>
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	20000610 	.word	0x20000610

080046f0 <__errno>:
 80046f0:	4b01      	ldr	r3, [pc, #4]	@ (80046f8 <__errno+0x8>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000018 	.word	0x20000018

080046fc <__libc_init_array>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004734 <__libc_init_array+0x38>)
 8004700:	4c0d      	ldr	r4, [pc, #52]	@ (8004738 <__libc_init_array+0x3c>)
 8004702:	1b64      	subs	r4, r4, r5
 8004704:	10a4      	asrs	r4, r4, #2
 8004706:	2600      	movs	r6, #0
 8004708:	42a6      	cmp	r6, r4
 800470a:	d109      	bne.n	8004720 <__libc_init_array+0x24>
 800470c:	4d0b      	ldr	r5, [pc, #44]	@ (800473c <__libc_init_array+0x40>)
 800470e:	4c0c      	ldr	r4, [pc, #48]	@ (8004740 <__libc_init_array+0x44>)
 8004710:	f001 ffd4 	bl	80066bc <_init>
 8004714:	1b64      	subs	r4, r4, r5
 8004716:	10a4      	asrs	r4, r4, #2
 8004718:	2600      	movs	r6, #0
 800471a:	42a6      	cmp	r6, r4
 800471c:	d105      	bne.n	800472a <__libc_init_array+0x2e>
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	f855 3b04 	ldr.w	r3, [r5], #4
 8004724:	4798      	blx	r3
 8004726:	3601      	adds	r6, #1
 8004728:	e7ee      	b.n	8004708 <__libc_init_array+0xc>
 800472a:	f855 3b04 	ldr.w	r3, [r5], #4
 800472e:	4798      	blx	r3
 8004730:	3601      	adds	r6, #1
 8004732:	e7f2      	b.n	800471a <__libc_init_array+0x1e>
 8004734:	08006ca0 	.word	0x08006ca0
 8004738:	08006ca0 	.word	0x08006ca0
 800473c:	08006ca0 	.word	0x08006ca0
 8004740:	08006ca4 	.word	0x08006ca4

08004744 <__retarget_lock_init_recursive>:
 8004744:	4770      	bx	lr

08004746 <__retarget_lock_acquire_recursive>:
 8004746:	4770      	bx	lr

08004748 <__retarget_lock_release_recursive>:
 8004748:	4770      	bx	lr

0800474a <quorem>:
 800474a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474e:	6903      	ldr	r3, [r0, #16]
 8004750:	690c      	ldr	r4, [r1, #16]
 8004752:	42a3      	cmp	r3, r4
 8004754:	4607      	mov	r7, r0
 8004756:	db7e      	blt.n	8004856 <quorem+0x10c>
 8004758:	3c01      	subs	r4, #1
 800475a:	f101 0814 	add.w	r8, r1, #20
 800475e:	00a3      	lsls	r3, r4, #2
 8004760:	f100 0514 	add.w	r5, r0, #20
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004770:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004774:	3301      	adds	r3, #1
 8004776:	429a      	cmp	r2, r3
 8004778:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800477c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004780:	d32e      	bcc.n	80047e0 <quorem+0x96>
 8004782:	f04f 0a00 	mov.w	sl, #0
 8004786:	46c4      	mov	ip, r8
 8004788:	46ae      	mov	lr, r5
 800478a:	46d3      	mov	fp, sl
 800478c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004790:	b298      	uxth	r0, r3
 8004792:	fb06 a000 	mla	r0, r6, r0, sl
 8004796:	0c02      	lsrs	r2, r0, #16
 8004798:	0c1b      	lsrs	r3, r3, #16
 800479a:	fb06 2303 	mla	r3, r6, r3, r2
 800479e:	f8de 2000 	ldr.w	r2, [lr]
 80047a2:	b280      	uxth	r0, r0
 80047a4:	b292      	uxth	r2, r2
 80047a6:	1a12      	subs	r2, r2, r0
 80047a8:	445a      	add	r2, fp
 80047aa:	f8de 0000 	ldr.w	r0, [lr]
 80047ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80047b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80047bc:	b292      	uxth	r2, r2
 80047be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80047c2:	45e1      	cmp	r9, ip
 80047c4:	f84e 2b04 	str.w	r2, [lr], #4
 80047c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80047cc:	d2de      	bcs.n	800478c <quorem+0x42>
 80047ce:	9b00      	ldr	r3, [sp, #0]
 80047d0:	58eb      	ldr	r3, [r5, r3]
 80047d2:	b92b      	cbnz	r3, 80047e0 <quorem+0x96>
 80047d4:	9b01      	ldr	r3, [sp, #4]
 80047d6:	3b04      	subs	r3, #4
 80047d8:	429d      	cmp	r5, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	d32f      	bcc.n	800483e <quorem+0xf4>
 80047de:	613c      	str	r4, [r7, #16]
 80047e0:	4638      	mov	r0, r7
 80047e2:	f001 f97b 	bl	8005adc <__mcmp>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	db25      	blt.n	8004836 <quorem+0xec>
 80047ea:	4629      	mov	r1, r5
 80047ec:	2000      	movs	r0, #0
 80047ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80047f2:	f8d1 c000 	ldr.w	ip, [r1]
 80047f6:	fa1f fe82 	uxth.w	lr, r2
 80047fa:	fa1f f38c 	uxth.w	r3, ip
 80047fe:	eba3 030e 	sub.w	r3, r3, lr
 8004802:	4403      	add	r3, r0
 8004804:	0c12      	lsrs	r2, r2, #16
 8004806:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800480a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800480e:	b29b      	uxth	r3, r3
 8004810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004814:	45c1      	cmp	r9, r8
 8004816:	f841 3b04 	str.w	r3, [r1], #4
 800481a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800481e:	d2e6      	bcs.n	80047ee <quorem+0xa4>
 8004820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004824:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004828:	b922      	cbnz	r2, 8004834 <quorem+0xea>
 800482a:	3b04      	subs	r3, #4
 800482c:	429d      	cmp	r5, r3
 800482e:	461a      	mov	r2, r3
 8004830:	d30b      	bcc.n	800484a <quorem+0x100>
 8004832:	613c      	str	r4, [r7, #16]
 8004834:	3601      	adds	r6, #1
 8004836:	4630      	mov	r0, r6
 8004838:	b003      	add	sp, #12
 800483a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	3b04      	subs	r3, #4
 8004842:	2a00      	cmp	r2, #0
 8004844:	d1cb      	bne.n	80047de <quorem+0x94>
 8004846:	3c01      	subs	r4, #1
 8004848:	e7c6      	b.n	80047d8 <quorem+0x8e>
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	3b04      	subs	r3, #4
 800484e:	2a00      	cmp	r2, #0
 8004850:	d1ef      	bne.n	8004832 <quorem+0xe8>
 8004852:	3c01      	subs	r4, #1
 8004854:	e7ea      	b.n	800482c <quorem+0xe2>
 8004856:	2000      	movs	r0, #0
 8004858:	e7ee      	b.n	8004838 <quorem+0xee>
 800485a:	0000      	movs	r0, r0
 800485c:	0000      	movs	r0, r0
	...

08004860 <_dtoa_r>:
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	69c7      	ldr	r7, [r0, #28]
 8004866:	b099      	sub	sp, #100	@ 0x64
 8004868:	ed8d 0b02 	vstr	d0, [sp, #8]
 800486c:	ec55 4b10 	vmov	r4, r5, d0
 8004870:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004872:	9109      	str	r1, [sp, #36]	@ 0x24
 8004874:	4683      	mov	fp, r0
 8004876:	920e      	str	r2, [sp, #56]	@ 0x38
 8004878:	9313      	str	r3, [sp, #76]	@ 0x4c
 800487a:	b97f      	cbnz	r7, 800489c <_dtoa_r+0x3c>
 800487c:	2010      	movs	r0, #16
 800487e:	f000 fdfd 	bl	800547c <malloc>
 8004882:	4602      	mov	r2, r0
 8004884:	f8cb 001c 	str.w	r0, [fp, #28]
 8004888:	b920      	cbnz	r0, 8004894 <_dtoa_r+0x34>
 800488a:	4ba7      	ldr	r3, [pc, #668]	@ (8004b28 <_dtoa_r+0x2c8>)
 800488c:	21ef      	movs	r1, #239	@ 0xef
 800488e:	48a7      	ldr	r0, [pc, #668]	@ (8004b2c <_dtoa_r+0x2cc>)
 8004890:	f001 fe2e 	bl	80064f0 <__assert_func>
 8004894:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004898:	6007      	str	r7, [r0, #0]
 800489a:	60c7      	str	r7, [r0, #12]
 800489c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	b159      	cbz	r1, 80048bc <_dtoa_r+0x5c>
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	604a      	str	r2, [r1, #4]
 80048a8:	2301      	movs	r3, #1
 80048aa:	4093      	lsls	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
 80048ae:	4658      	mov	r0, fp
 80048b0:	f000 feda 	bl	8005668 <_Bfree>
 80048b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	1e2b      	subs	r3, r5, #0
 80048be:	bfb9      	ittee	lt
 80048c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80048c4:	9303      	strlt	r3, [sp, #12]
 80048c6:	2300      	movge	r3, #0
 80048c8:	6033      	strge	r3, [r6, #0]
 80048ca:	9f03      	ldr	r7, [sp, #12]
 80048cc:	4b98      	ldr	r3, [pc, #608]	@ (8004b30 <_dtoa_r+0x2d0>)
 80048ce:	bfbc      	itt	lt
 80048d0:	2201      	movlt	r2, #1
 80048d2:	6032      	strlt	r2, [r6, #0]
 80048d4:	43bb      	bics	r3, r7
 80048d6:	d112      	bne.n	80048fe <_dtoa_r+0x9e>
 80048d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80048da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80048e4:	4323      	orrs	r3, r4
 80048e6:	f000 854d 	beq.w	8005384 <_dtoa_r+0xb24>
 80048ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80048ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004b44 <_dtoa_r+0x2e4>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 854f 	beq.w	8005394 <_dtoa_r+0xb34>
 80048f6:	f10a 0303 	add.w	r3, sl, #3
 80048fa:	f000 bd49 	b.w	8005390 <_dtoa_r+0xb30>
 80048fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004902:	2200      	movs	r2, #0
 8004904:	ec51 0b17 	vmov	r0, r1, d7
 8004908:	2300      	movs	r3, #0
 800490a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800490e:	f7fc f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 8004912:	4680      	mov	r8, r0
 8004914:	b158      	cbz	r0, 800492e <_dtoa_r+0xce>
 8004916:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004918:	2301      	movs	r3, #1
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800491e:	b113      	cbz	r3, 8004926 <_dtoa_r+0xc6>
 8004920:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004922:	4b84      	ldr	r3, [pc, #528]	@ (8004b34 <_dtoa_r+0x2d4>)
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004b48 <_dtoa_r+0x2e8>
 800492a:	f000 bd33 	b.w	8005394 <_dtoa_r+0xb34>
 800492e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004932:	aa16      	add	r2, sp, #88	@ 0x58
 8004934:	a917      	add	r1, sp, #92	@ 0x5c
 8004936:	4658      	mov	r0, fp
 8004938:	f001 f980 	bl	8005c3c <__d2b>
 800493c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004940:	4681      	mov	r9, r0
 8004942:	2e00      	cmp	r6, #0
 8004944:	d077      	beq.n	8004a36 <_dtoa_r+0x1d6>
 8004946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004948:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800494c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004954:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004958:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800495c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004960:	4619      	mov	r1, r3
 8004962:	2200      	movs	r2, #0
 8004964:	4b74      	ldr	r3, [pc, #464]	@ (8004b38 <_dtoa_r+0x2d8>)
 8004966:	f7fb fc8f 	bl	8000288 <__aeabi_dsub>
 800496a:	a369      	add	r3, pc, #420	@ (adr r3, 8004b10 <_dtoa_r+0x2b0>)
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	f7fb fe42 	bl	80005f8 <__aeabi_dmul>
 8004974:	a368      	add	r3, pc, #416	@ (adr r3, 8004b18 <_dtoa_r+0x2b8>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f7fb fc87 	bl	800028c <__adddf3>
 800497e:	4604      	mov	r4, r0
 8004980:	4630      	mov	r0, r6
 8004982:	460d      	mov	r5, r1
 8004984:	f7fb fdce 	bl	8000524 <__aeabi_i2d>
 8004988:	a365      	add	r3, pc, #404	@ (adr r3, 8004b20 <_dtoa_r+0x2c0>)
 800498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498e:	f7fb fe33 	bl	80005f8 <__aeabi_dmul>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4620      	mov	r0, r4
 8004998:	4629      	mov	r1, r5
 800499a:	f7fb fc77 	bl	800028c <__adddf3>
 800499e:	4604      	mov	r4, r0
 80049a0:	460d      	mov	r5, r1
 80049a2:	f7fc f8d9 	bl	8000b58 <__aeabi_d2iz>
 80049a6:	2200      	movs	r2, #0
 80049a8:	4607      	mov	r7, r0
 80049aa:	2300      	movs	r3, #0
 80049ac:	4620      	mov	r0, r4
 80049ae:	4629      	mov	r1, r5
 80049b0:	f7fc f894 	bl	8000adc <__aeabi_dcmplt>
 80049b4:	b140      	cbz	r0, 80049c8 <_dtoa_r+0x168>
 80049b6:	4638      	mov	r0, r7
 80049b8:	f7fb fdb4 	bl	8000524 <__aeabi_i2d>
 80049bc:	4622      	mov	r2, r4
 80049be:	462b      	mov	r3, r5
 80049c0:	f7fc f882 	bl	8000ac8 <__aeabi_dcmpeq>
 80049c4:	b900      	cbnz	r0, 80049c8 <_dtoa_r+0x168>
 80049c6:	3f01      	subs	r7, #1
 80049c8:	2f16      	cmp	r7, #22
 80049ca:	d851      	bhi.n	8004a70 <_dtoa_r+0x210>
 80049cc:	4b5b      	ldr	r3, [pc, #364]	@ (8004b3c <_dtoa_r+0x2dc>)
 80049ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049da:	f7fc f87f 	bl	8000adc <__aeabi_dcmplt>
 80049de:	2800      	cmp	r0, #0
 80049e0:	d048      	beq.n	8004a74 <_dtoa_r+0x214>
 80049e2:	3f01      	subs	r7, #1
 80049e4:	2300      	movs	r3, #0
 80049e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80049e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80049ea:	1b9b      	subs	r3, r3, r6
 80049ec:	1e5a      	subs	r2, r3, #1
 80049ee:	bf44      	itt	mi
 80049f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80049f4:	2300      	movmi	r3, #0
 80049f6:	9208      	str	r2, [sp, #32]
 80049f8:	bf54      	ite	pl
 80049fa:	f04f 0800 	movpl.w	r8, #0
 80049fe:	9308      	strmi	r3, [sp, #32]
 8004a00:	2f00      	cmp	r7, #0
 8004a02:	db39      	blt.n	8004a78 <_dtoa_r+0x218>
 8004a04:	9b08      	ldr	r3, [sp, #32]
 8004a06:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004a08:	443b      	add	r3, r7
 8004a0a:	9308      	str	r3, [sp, #32]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a12:	2b09      	cmp	r3, #9
 8004a14:	d864      	bhi.n	8004ae0 <_dtoa_r+0x280>
 8004a16:	2b05      	cmp	r3, #5
 8004a18:	bfc4      	itt	gt
 8004a1a:	3b04      	subgt	r3, #4
 8004a1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a20:	f1a3 0302 	sub.w	r3, r3, #2
 8004a24:	bfcc      	ite	gt
 8004a26:	2400      	movgt	r4, #0
 8004a28:	2401      	movle	r4, #1
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d863      	bhi.n	8004af6 <_dtoa_r+0x296>
 8004a2e:	e8df f003 	tbb	[pc, r3]
 8004a32:	372a      	.short	0x372a
 8004a34:	5535      	.short	0x5535
 8004a36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004a3a:	441e      	add	r6, r3
 8004a3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	bfc1      	itttt	gt
 8004a44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004a48:	409f      	lslgt	r7, r3
 8004a4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004a4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004a52:	bfd6      	itet	le
 8004a54:	f1c3 0320 	rsble	r3, r3, #32
 8004a58:	ea47 0003 	orrgt.w	r0, r7, r3
 8004a5c:	fa04 f003 	lslle.w	r0, r4, r3
 8004a60:	f7fb fd50 	bl	8000504 <__aeabi_ui2d>
 8004a64:	2201      	movs	r2, #1
 8004a66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004a6a:	3e01      	subs	r6, #1
 8004a6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8004a6e:	e777      	b.n	8004960 <_dtoa_r+0x100>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e7b8      	b.n	80049e6 <_dtoa_r+0x186>
 8004a74:	9012      	str	r0, [sp, #72]	@ 0x48
 8004a76:	e7b7      	b.n	80049e8 <_dtoa_r+0x188>
 8004a78:	427b      	negs	r3, r7
 8004a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	eba8 0807 	sub.w	r8, r8, r7
 8004a82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a84:	e7c4      	b.n	8004a10 <_dtoa_r+0x1b0>
 8004a86:	2300      	movs	r3, #0
 8004a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	dc35      	bgt.n	8004afc <_dtoa_r+0x29c>
 8004a90:	2301      	movs	r3, #1
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	9307      	str	r3, [sp, #28]
 8004a96:	461a      	mov	r2, r3
 8004a98:	920e      	str	r2, [sp, #56]	@ 0x38
 8004a9a:	e00b      	b.n	8004ab4 <_dtoa_r+0x254>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e7f3      	b.n	8004a88 <_dtoa_r+0x228>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004aa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	9307      	str	r3, [sp, #28]
 8004ab0:	bfb8      	it	lt
 8004ab2:	2301      	movlt	r3, #1
 8004ab4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004ab8:	2100      	movs	r1, #0
 8004aba:	2204      	movs	r2, #4
 8004abc:	f102 0514 	add.w	r5, r2, #20
 8004ac0:	429d      	cmp	r5, r3
 8004ac2:	d91f      	bls.n	8004b04 <_dtoa_r+0x2a4>
 8004ac4:	6041      	str	r1, [r0, #4]
 8004ac6:	4658      	mov	r0, fp
 8004ac8:	f000 fd8e 	bl	80055e8 <_Balloc>
 8004acc:	4682      	mov	sl, r0
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d13c      	bne.n	8004b4c <_dtoa_r+0x2ec>
 8004ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b40 <_dtoa_r+0x2e0>)
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	f240 11af 	movw	r1, #431	@ 0x1af
 8004ada:	e6d8      	b.n	800488e <_dtoa_r+0x2e>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e7e0      	b.n	8004aa2 <_dtoa_r+0x242>
 8004ae0:	2401      	movs	r4, #1
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ae6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	9307      	str	r3, [sp, #28]
 8004af0:	2200      	movs	r2, #0
 8004af2:	2312      	movs	r3, #18
 8004af4:	e7d0      	b.n	8004a98 <_dtoa_r+0x238>
 8004af6:	2301      	movs	r3, #1
 8004af8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004afa:	e7f5      	b.n	8004ae8 <_dtoa_r+0x288>
 8004afc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	9307      	str	r3, [sp, #28]
 8004b02:	e7d7      	b.n	8004ab4 <_dtoa_r+0x254>
 8004b04:	3101      	adds	r1, #1
 8004b06:	0052      	lsls	r2, r2, #1
 8004b08:	e7d8      	b.n	8004abc <_dtoa_r+0x25c>
 8004b0a:	bf00      	nop
 8004b0c:	f3af 8000 	nop.w
 8004b10:	636f4361 	.word	0x636f4361
 8004b14:	3fd287a7 	.word	0x3fd287a7
 8004b18:	8b60c8b3 	.word	0x8b60c8b3
 8004b1c:	3fc68a28 	.word	0x3fc68a28
 8004b20:	509f79fb 	.word	0x509f79fb
 8004b24:	3fd34413 	.word	0x3fd34413
 8004b28:	08006969 	.word	0x08006969
 8004b2c:	08006980 	.word	0x08006980
 8004b30:	7ff00000 	.word	0x7ff00000
 8004b34:	08006939 	.word	0x08006939
 8004b38:	3ff80000 	.word	0x3ff80000
 8004b3c:	08006a78 	.word	0x08006a78
 8004b40:	080069d8 	.word	0x080069d8
 8004b44:	08006965 	.word	0x08006965
 8004b48:	08006938 	.word	0x08006938
 8004b4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b50:	6018      	str	r0, [r3, #0]
 8004b52:	9b07      	ldr	r3, [sp, #28]
 8004b54:	2b0e      	cmp	r3, #14
 8004b56:	f200 80a4 	bhi.w	8004ca2 <_dtoa_r+0x442>
 8004b5a:	2c00      	cmp	r4, #0
 8004b5c:	f000 80a1 	beq.w	8004ca2 <_dtoa_r+0x442>
 8004b60:	2f00      	cmp	r7, #0
 8004b62:	dd33      	ble.n	8004bcc <_dtoa_r+0x36c>
 8004b64:	4bad      	ldr	r3, [pc, #692]	@ (8004e1c <_dtoa_r+0x5bc>)
 8004b66:	f007 020f 	and.w	r2, r7, #15
 8004b6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b6e:	ed93 7b00 	vldr	d7, [r3]
 8004b72:	05f8      	lsls	r0, r7, #23
 8004b74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004b78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004b7c:	d516      	bpl.n	8004bac <_dtoa_r+0x34c>
 8004b7e:	4ba8      	ldr	r3, [pc, #672]	@ (8004e20 <_dtoa_r+0x5c0>)
 8004b80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b88:	f7fb fe60 	bl	800084c <__aeabi_ddiv>
 8004b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b90:	f004 040f 	and.w	r4, r4, #15
 8004b94:	2603      	movs	r6, #3
 8004b96:	4da2      	ldr	r5, [pc, #648]	@ (8004e20 <_dtoa_r+0x5c0>)
 8004b98:	b954      	cbnz	r4, 8004bb0 <_dtoa_r+0x350>
 8004b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ba2:	f7fb fe53 	bl	800084c <__aeabi_ddiv>
 8004ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004baa:	e028      	b.n	8004bfe <_dtoa_r+0x39e>
 8004bac:	2602      	movs	r6, #2
 8004bae:	e7f2      	b.n	8004b96 <_dtoa_r+0x336>
 8004bb0:	07e1      	lsls	r1, r4, #31
 8004bb2:	d508      	bpl.n	8004bc6 <_dtoa_r+0x366>
 8004bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bbc:	f7fb fd1c 	bl	80005f8 <__aeabi_dmul>
 8004bc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bc4:	3601      	adds	r6, #1
 8004bc6:	1064      	asrs	r4, r4, #1
 8004bc8:	3508      	adds	r5, #8
 8004bca:	e7e5      	b.n	8004b98 <_dtoa_r+0x338>
 8004bcc:	f000 80d2 	beq.w	8004d74 <_dtoa_r+0x514>
 8004bd0:	427c      	negs	r4, r7
 8004bd2:	4b92      	ldr	r3, [pc, #584]	@ (8004e1c <_dtoa_r+0x5bc>)
 8004bd4:	4d92      	ldr	r5, [pc, #584]	@ (8004e20 <_dtoa_r+0x5c0>)
 8004bd6:	f004 020f 	and.w	r2, r4, #15
 8004bda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004be6:	f7fb fd07 	bl	80005f8 <__aeabi_dmul>
 8004bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bee:	1124      	asrs	r4, r4, #4
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	2602      	movs	r6, #2
 8004bf4:	2c00      	cmp	r4, #0
 8004bf6:	f040 80b2 	bne.w	8004d5e <_dtoa_r+0x4fe>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1d3      	bne.n	8004ba6 <_dtoa_r+0x346>
 8004bfe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004c00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80b7 	beq.w	8004d78 <_dtoa_r+0x518>
 8004c0a:	4b86      	ldr	r3, [pc, #536]	@ (8004e24 <_dtoa_r+0x5c4>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4620      	mov	r0, r4
 8004c10:	4629      	mov	r1, r5
 8004c12:	f7fb ff63 	bl	8000adc <__aeabi_dcmplt>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	f000 80ae 	beq.w	8004d78 <_dtoa_r+0x518>
 8004c1c:	9b07      	ldr	r3, [sp, #28]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 80aa 	beq.w	8004d78 <_dtoa_r+0x518>
 8004c24:	9b00      	ldr	r3, [sp, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	dd37      	ble.n	8004c9a <_dtoa_r+0x43a>
 8004c2a:	1e7b      	subs	r3, r7, #1
 8004c2c:	9304      	str	r3, [sp, #16]
 8004c2e:	4620      	mov	r0, r4
 8004c30:	4b7d      	ldr	r3, [pc, #500]	@ (8004e28 <_dtoa_r+0x5c8>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	4629      	mov	r1, r5
 8004c36:	f7fb fcdf 	bl	80005f8 <__aeabi_dmul>
 8004c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c3e:	9c00      	ldr	r4, [sp, #0]
 8004c40:	3601      	adds	r6, #1
 8004c42:	4630      	mov	r0, r6
 8004c44:	f7fb fc6e 	bl	8000524 <__aeabi_i2d>
 8004c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c4c:	f7fb fcd4 	bl	80005f8 <__aeabi_dmul>
 8004c50:	4b76      	ldr	r3, [pc, #472]	@ (8004e2c <_dtoa_r+0x5cc>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	f7fb fb1a 	bl	800028c <__adddf3>
 8004c58:	4605      	mov	r5, r0
 8004c5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004c5e:	2c00      	cmp	r4, #0
 8004c60:	f040 808d 	bne.w	8004d7e <_dtoa_r+0x51e>
 8004c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c68:	4b71      	ldr	r3, [pc, #452]	@ (8004e30 <_dtoa_r+0x5d0>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f7fb fb0c 	bl	8000288 <__aeabi_dsub>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c78:	462a      	mov	r2, r5
 8004c7a:	4633      	mov	r3, r6
 8004c7c:	f7fb ff4c 	bl	8000b18 <__aeabi_dcmpgt>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	f040 828b 	bne.w	800519c <_dtoa_r+0x93c>
 8004c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c8a:	462a      	mov	r2, r5
 8004c8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004c90:	f7fb ff24 	bl	8000adc <__aeabi_dcmplt>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	f040 8128 	bne.w	8004eea <_dtoa_r+0x68a>
 8004c9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004c9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004ca2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f2c0 815a 	blt.w	8004f5e <_dtoa_r+0x6fe>
 8004caa:	2f0e      	cmp	r7, #14
 8004cac:	f300 8157 	bgt.w	8004f5e <_dtoa_r+0x6fe>
 8004cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8004e1c <_dtoa_r+0x5bc>)
 8004cb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004cb6:	ed93 7b00 	vldr	d7, [r3]
 8004cba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	ed8d 7b00 	vstr	d7, [sp]
 8004cc2:	da03      	bge.n	8004ccc <_dtoa_r+0x46c>
 8004cc4:	9b07      	ldr	r3, [sp, #28]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f340 8101 	ble.w	8004ece <_dtoa_r+0x66e>
 8004ccc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004cd0:	4656      	mov	r6, sl
 8004cd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	4629      	mov	r1, r5
 8004cda:	f7fb fdb7 	bl	800084c <__aeabi_ddiv>
 8004cde:	f7fb ff3b 	bl	8000b58 <__aeabi_d2iz>
 8004ce2:	4680      	mov	r8, r0
 8004ce4:	f7fb fc1e 	bl	8000524 <__aeabi_i2d>
 8004ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cec:	f7fb fc84 	bl	80005f8 <__aeabi_dmul>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004cfc:	f7fb fac4 	bl	8000288 <__aeabi_dsub>
 8004d00:	f806 4b01 	strb.w	r4, [r6], #1
 8004d04:	9d07      	ldr	r5, [sp, #28]
 8004d06:	eba6 040a 	sub.w	r4, r6, sl
 8004d0a:	42a5      	cmp	r5, r4
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	f040 8117 	bne.w	8004f42 <_dtoa_r+0x6e2>
 8004d14:	f7fb faba 	bl	800028c <__adddf3>
 8004d18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	460d      	mov	r5, r1
 8004d20:	f7fb fefa 	bl	8000b18 <__aeabi_dcmpgt>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	f040 80f9 	bne.w	8004f1c <_dtoa_r+0x6bc>
 8004d2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d2e:	4620      	mov	r0, r4
 8004d30:	4629      	mov	r1, r5
 8004d32:	f7fb fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d36:	b118      	cbz	r0, 8004d40 <_dtoa_r+0x4e0>
 8004d38:	f018 0f01 	tst.w	r8, #1
 8004d3c:	f040 80ee 	bne.w	8004f1c <_dtoa_r+0x6bc>
 8004d40:	4649      	mov	r1, r9
 8004d42:	4658      	mov	r0, fp
 8004d44:	f000 fc90 	bl	8005668 <_Bfree>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	7033      	strb	r3, [r6, #0]
 8004d4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004d4e:	3701      	adds	r7, #1
 8004d50:	601f      	str	r7, [r3, #0]
 8004d52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 831d 	beq.w	8005394 <_dtoa_r+0xb34>
 8004d5a:	601e      	str	r6, [r3, #0]
 8004d5c:	e31a      	b.n	8005394 <_dtoa_r+0xb34>
 8004d5e:	07e2      	lsls	r2, r4, #31
 8004d60:	d505      	bpl.n	8004d6e <_dtoa_r+0x50e>
 8004d62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d66:	f7fb fc47 	bl	80005f8 <__aeabi_dmul>
 8004d6a:	3601      	adds	r6, #1
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	1064      	asrs	r4, r4, #1
 8004d70:	3508      	adds	r5, #8
 8004d72:	e73f      	b.n	8004bf4 <_dtoa_r+0x394>
 8004d74:	2602      	movs	r6, #2
 8004d76:	e742      	b.n	8004bfe <_dtoa_r+0x39e>
 8004d78:	9c07      	ldr	r4, [sp, #28]
 8004d7a:	9704      	str	r7, [sp, #16]
 8004d7c:	e761      	b.n	8004c42 <_dtoa_r+0x3e2>
 8004d7e:	4b27      	ldr	r3, [pc, #156]	@ (8004e1c <_dtoa_r+0x5bc>)
 8004d80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d8a:	4454      	add	r4, sl
 8004d8c:	2900      	cmp	r1, #0
 8004d8e:	d053      	beq.n	8004e38 <_dtoa_r+0x5d8>
 8004d90:	4928      	ldr	r1, [pc, #160]	@ (8004e34 <_dtoa_r+0x5d4>)
 8004d92:	2000      	movs	r0, #0
 8004d94:	f7fb fd5a 	bl	800084c <__aeabi_ddiv>
 8004d98:	4633      	mov	r3, r6
 8004d9a:	462a      	mov	r2, r5
 8004d9c:	f7fb fa74 	bl	8000288 <__aeabi_dsub>
 8004da0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004da4:	4656      	mov	r6, sl
 8004da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004daa:	f7fb fed5 	bl	8000b58 <__aeabi_d2iz>
 8004dae:	4605      	mov	r5, r0
 8004db0:	f7fb fbb8 	bl	8000524 <__aeabi_i2d>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dbc:	f7fb fa64 	bl	8000288 <__aeabi_dsub>
 8004dc0:	3530      	adds	r5, #48	@ 0x30
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004dca:	f806 5b01 	strb.w	r5, [r6], #1
 8004dce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004dd2:	f7fb fe83 	bl	8000adc <__aeabi_dcmplt>
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d171      	bne.n	8004ebe <_dtoa_r+0x65e>
 8004dda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dde:	4911      	ldr	r1, [pc, #68]	@ (8004e24 <_dtoa_r+0x5c4>)
 8004de0:	2000      	movs	r0, #0
 8004de2:	f7fb fa51 	bl	8000288 <__aeabi_dsub>
 8004de6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004dea:	f7fb fe77 	bl	8000adc <__aeabi_dcmplt>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	f040 8095 	bne.w	8004f1e <_dtoa_r+0x6be>
 8004df4:	42a6      	cmp	r6, r4
 8004df6:	f43f af50 	beq.w	8004c9a <_dtoa_r+0x43a>
 8004dfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004e28 <_dtoa_r+0x5c8>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	f7fb fbf9 	bl	80005f8 <__aeabi_dmul>
 8004e06:	4b08      	ldr	r3, [pc, #32]	@ (8004e28 <_dtoa_r+0x5c8>)
 8004e08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e12:	f7fb fbf1 	bl	80005f8 <__aeabi_dmul>
 8004e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e1a:	e7c4      	b.n	8004da6 <_dtoa_r+0x546>
 8004e1c:	08006a78 	.word	0x08006a78
 8004e20:	08006a50 	.word	0x08006a50
 8004e24:	3ff00000 	.word	0x3ff00000
 8004e28:	40240000 	.word	0x40240000
 8004e2c:	401c0000 	.word	0x401c0000
 8004e30:	40140000 	.word	0x40140000
 8004e34:	3fe00000 	.word	0x3fe00000
 8004e38:	4631      	mov	r1, r6
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f7fb fbdc 	bl	80005f8 <__aeabi_dmul>
 8004e40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e44:	9415      	str	r4, [sp, #84]	@ 0x54
 8004e46:	4656      	mov	r6, sl
 8004e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e4c:	f7fb fe84 	bl	8000b58 <__aeabi_d2iz>
 8004e50:	4605      	mov	r5, r0
 8004e52:	f7fb fb67 	bl	8000524 <__aeabi_i2d>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e5e:	f7fb fa13 	bl	8000288 <__aeabi_dsub>
 8004e62:	3530      	adds	r5, #48	@ 0x30
 8004e64:	f806 5b01 	strb.w	r5, [r6], #1
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	42a6      	cmp	r6, r4
 8004e6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	d124      	bne.n	8004ec2 <_dtoa_r+0x662>
 8004e78:	4bac      	ldr	r3, [pc, #688]	@ (800512c <_dtoa_r+0x8cc>)
 8004e7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e7e:	f7fb fa05 	bl	800028c <__adddf3>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e8a:	f7fb fe45 	bl	8000b18 <__aeabi_dcmpgt>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d145      	bne.n	8004f1e <_dtoa_r+0x6be>
 8004e92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e96:	49a5      	ldr	r1, [pc, #660]	@ (800512c <_dtoa_r+0x8cc>)
 8004e98:	2000      	movs	r0, #0
 8004e9a:	f7fb f9f5 	bl	8000288 <__aeabi_dsub>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ea6:	f7fb fe19 	bl	8000adc <__aeabi_dcmplt>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	f43f aef5 	beq.w	8004c9a <_dtoa_r+0x43a>
 8004eb0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004eb2:	1e73      	subs	r3, r6, #1
 8004eb4:	9315      	str	r3, [sp, #84]	@ 0x54
 8004eb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004eba:	2b30      	cmp	r3, #48	@ 0x30
 8004ebc:	d0f8      	beq.n	8004eb0 <_dtoa_r+0x650>
 8004ebe:	9f04      	ldr	r7, [sp, #16]
 8004ec0:	e73e      	b.n	8004d40 <_dtoa_r+0x4e0>
 8004ec2:	4b9b      	ldr	r3, [pc, #620]	@ (8005130 <_dtoa_r+0x8d0>)
 8004ec4:	f7fb fb98 	bl	80005f8 <__aeabi_dmul>
 8004ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ecc:	e7bc      	b.n	8004e48 <_dtoa_r+0x5e8>
 8004ece:	d10c      	bne.n	8004eea <_dtoa_r+0x68a>
 8004ed0:	4b98      	ldr	r3, [pc, #608]	@ (8005134 <_dtoa_r+0x8d4>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ed8:	f7fb fb8e 	bl	80005f8 <__aeabi_dmul>
 8004edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ee0:	f7fb fe10 	bl	8000b04 <__aeabi_dcmpge>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	f000 8157 	beq.w	8005198 <_dtoa_r+0x938>
 8004eea:	2400      	movs	r4, #0
 8004eec:	4625      	mov	r5, r4
 8004eee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	9304      	str	r3, [sp, #16]
 8004ef4:	4656      	mov	r6, sl
 8004ef6:	2700      	movs	r7, #0
 8004ef8:	4621      	mov	r1, r4
 8004efa:	4658      	mov	r0, fp
 8004efc:	f000 fbb4 	bl	8005668 <_Bfree>
 8004f00:	2d00      	cmp	r5, #0
 8004f02:	d0dc      	beq.n	8004ebe <_dtoa_r+0x65e>
 8004f04:	b12f      	cbz	r7, 8004f12 <_dtoa_r+0x6b2>
 8004f06:	42af      	cmp	r7, r5
 8004f08:	d003      	beq.n	8004f12 <_dtoa_r+0x6b2>
 8004f0a:	4639      	mov	r1, r7
 8004f0c:	4658      	mov	r0, fp
 8004f0e:	f000 fbab 	bl	8005668 <_Bfree>
 8004f12:	4629      	mov	r1, r5
 8004f14:	4658      	mov	r0, fp
 8004f16:	f000 fba7 	bl	8005668 <_Bfree>
 8004f1a:	e7d0      	b.n	8004ebe <_dtoa_r+0x65e>
 8004f1c:	9704      	str	r7, [sp, #16]
 8004f1e:	4633      	mov	r3, r6
 8004f20:	461e      	mov	r6, r3
 8004f22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f26:	2a39      	cmp	r2, #57	@ 0x39
 8004f28:	d107      	bne.n	8004f3a <_dtoa_r+0x6da>
 8004f2a:	459a      	cmp	sl, r3
 8004f2c:	d1f8      	bne.n	8004f20 <_dtoa_r+0x6c0>
 8004f2e:	9a04      	ldr	r2, [sp, #16]
 8004f30:	3201      	adds	r2, #1
 8004f32:	9204      	str	r2, [sp, #16]
 8004f34:	2230      	movs	r2, #48	@ 0x30
 8004f36:	f88a 2000 	strb.w	r2, [sl]
 8004f3a:	781a      	ldrb	r2, [r3, #0]
 8004f3c:	3201      	adds	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e7bd      	b.n	8004ebe <_dtoa_r+0x65e>
 8004f42:	4b7b      	ldr	r3, [pc, #492]	@ (8005130 <_dtoa_r+0x8d0>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	f7fb fb57 	bl	80005f8 <__aeabi_dmul>
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4604      	mov	r4, r0
 8004f50:	460d      	mov	r5, r1
 8004f52:	f7fb fdb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f56:	2800      	cmp	r0, #0
 8004f58:	f43f aebb 	beq.w	8004cd2 <_dtoa_r+0x472>
 8004f5c:	e6f0      	b.n	8004d40 <_dtoa_r+0x4e0>
 8004f5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004f60:	2a00      	cmp	r2, #0
 8004f62:	f000 80db 	beq.w	800511c <_dtoa_r+0x8bc>
 8004f66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f68:	2a01      	cmp	r2, #1
 8004f6a:	f300 80bf 	bgt.w	80050ec <_dtoa_r+0x88c>
 8004f6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004f70:	2a00      	cmp	r2, #0
 8004f72:	f000 80b7 	beq.w	80050e4 <_dtoa_r+0x884>
 8004f76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004f7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f7c:	4646      	mov	r6, r8
 8004f7e:	9a08      	ldr	r2, [sp, #32]
 8004f80:	2101      	movs	r1, #1
 8004f82:	441a      	add	r2, r3
 8004f84:	4658      	mov	r0, fp
 8004f86:	4498      	add	r8, r3
 8004f88:	9208      	str	r2, [sp, #32]
 8004f8a:	f000 fc21 	bl	80057d0 <__i2b>
 8004f8e:	4605      	mov	r5, r0
 8004f90:	b15e      	cbz	r6, 8004faa <_dtoa_r+0x74a>
 8004f92:	9b08      	ldr	r3, [sp, #32]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	dd08      	ble.n	8004faa <_dtoa_r+0x74a>
 8004f98:	42b3      	cmp	r3, r6
 8004f9a:	9a08      	ldr	r2, [sp, #32]
 8004f9c:	bfa8      	it	ge
 8004f9e:	4633      	movge	r3, r6
 8004fa0:	eba8 0803 	sub.w	r8, r8, r3
 8004fa4:	1af6      	subs	r6, r6, r3
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	9308      	str	r3, [sp, #32]
 8004faa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fac:	b1f3      	cbz	r3, 8004fec <_dtoa_r+0x78c>
 8004fae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80b7 	beq.w	8005124 <_dtoa_r+0x8c4>
 8004fb6:	b18c      	cbz	r4, 8004fdc <_dtoa_r+0x77c>
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4622      	mov	r2, r4
 8004fbc:	4658      	mov	r0, fp
 8004fbe:	f000 fcc7 	bl	8005950 <__pow5mult>
 8004fc2:	464a      	mov	r2, r9
 8004fc4:	4601      	mov	r1, r0
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	4658      	mov	r0, fp
 8004fca:	f000 fc17 	bl	80057fc <__multiply>
 8004fce:	4649      	mov	r1, r9
 8004fd0:	9004      	str	r0, [sp, #16]
 8004fd2:	4658      	mov	r0, fp
 8004fd4:	f000 fb48 	bl	8005668 <_Bfree>
 8004fd8:	9b04      	ldr	r3, [sp, #16]
 8004fda:	4699      	mov	r9, r3
 8004fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fde:	1b1a      	subs	r2, r3, r4
 8004fe0:	d004      	beq.n	8004fec <_dtoa_r+0x78c>
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	4658      	mov	r0, fp
 8004fe6:	f000 fcb3 	bl	8005950 <__pow5mult>
 8004fea:	4681      	mov	r9, r0
 8004fec:	2101      	movs	r1, #1
 8004fee:	4658      	mov	r0, fp
 8004ff0:	f000 fbee 	bl	80057d0 <__i2b>
 8004ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 81cf 	beq.w	800539c <_dtoa_r+0xb3c>
 8004ffe:	461a      	mov	r2, r3
 8005000:	4601      	mov	r1, r0
 8005002:	4658      	mov	r0, fp
 8005004:	f000 fca4 	bl	8005950 <__pow5mult>
 8005008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800500a:	2b01      	cmp	r3, #1
 800500c:	4604      	mov	r4, r0
 800500e:	f300 8095 	bgt.w	800513c <_dtoa_r+0x8dc>
 8005012:	9b02      	ldr	r3, [sp, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f040 8087 	bne.w	8005128 <_dtoa_r+0x8c8>
 800501a:	9b03      	ldr	r3, [sp, #12]
 800501c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005020:	2b00      	cmp	r3, #0
 8005022:	f040 8089 	bne.w	8005138 <_dtoa_r+0x8d8>
 8005026:	9b03      	ldr	r3, [sp, #12]
 8005028:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800502c:	0d1b      	lsrs	r3, r3, #20
 800502e:	051b      	lsls	r3, r3, #20
 8005030:	b12b      	cbz	r3, 800503e <_dtoa_r+0x7de>
 8005032:	9b08      	ldr	r3, [sp, #32]
 8005034:	3301      	adds	r3, #1
 8005036:	9308      	str	r3, [sp, #32]
 8005038:	f108 0801 	add.w	r8, r8, #1
 800503c:	2301      	movs	r3, #1
 800503e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 81b0 	beq.w	80053a8 <_dtoa_r+0xb48>
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800504e:	6918      	ldr	r0, [r3, #16]
 8005050:	f000 fb72 	bl	8005738 <__hi0bits>
 8005054:	f1c0 0020 	rsb	r0, r0, #32
 8005058:	9b08      	ldr	r3, [sp, #32]
 800505a:	4418      	add	r0, r3
 800505c:	f010 001f 	ands.w	r0, r0, #31
 8005060:	d077      	beq.n	8005152 <_dtoa_r+0x8f2>
 8005062:	f1c0 0320 	rsb	r3, r0, #32
 8005066:	2b04      	cmp	r3, #4
 8005068:	dd6b      	ble.n	8005142 <_dtoa_r+0x8e2>
 800506a:	9b08      	ldr	r3, [sp, #32]
 800506c:	f1c0 001c 	rsb	r0, r0, #28
 8005070:	4403      	add	r3, r0
 8005072:	4480      	add	r8, r0
 8005074:	4406      	add	r6, r0
 8005076:	9308      	str	r3, [sp, #32]
 8005078:	f1b8 0f00 	cmp.w	r8, #0
 800507c:	dd05      	ble.n	800508a <_dtoa_r+0x82a>
 800507e:	4649      	mov	r1, r9
 8005080:	4642      	mov	r2, r8
 8005082:	4658      	mov	r0, fp
 8005084:	f000 fcbe 	bl	8005a04 <__lshift>
 8005088:	4681      	mov	r9, r0
 800508a:	9b08      	ldr	r3, [sp, #32]
 800508c:	2b00      	cmp	r3, #0
 800508e:	dd05      	ble.n	800509c <_dtoa_r+0x83c>
 8005090:	4621      	mov	r1, r4
 8005092:	461a      	mov	r2, r3
 8005094:	4658      	mov	r0, fp
 8005096:	f000 fcb5 	bl	8005a04 <__lshift>
 800509a:	4604      	mov	r4, r0
 800509c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d059      	beq.n	8005156 <_dtoa_r+0x8f6>
 80050a2:	4621      	mov	r1, r4
 80050a4:	4648      	mov	r0, r9
 80050a6:	f000 fd19 	bl	8005adc <__mcmp>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	da53      	bge.n	8005156 <_dtoa_r+0x8f6>
 80050ae:	1e7b      	subs	r3, r7, #1
 80050b0:	9304      	str	r3, [sp, #16]
 80050b2:	4649      	mov	r1, r9
 80050b4:	2300      	movs	r3, #0
 80050b6:	220a      	movs	r2, #10
 80050b8:	4658      	mov	r0, fp
 80050ba:	f000 faf7 	bl	80056ac <__multadd>
 80050be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050c0:	4681      	mov	r9, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8172 	beq.w	80053ac <_dtoa_r+0xb4c>
 80050c8:	2300      	movs	r3, #0
 80050ca:	4629      	mov	r1, r5
 80050cc:	220a      	movs	r2, #10
 80050ce:	4658      	mov	r0, fp
 80050d0:	f000 faec 	bl	80056ac <__multadd>
 80050d4:	9b00      	ldr	r3, [sp, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	4605      	mov	r5, r0
 80050da:	dc67      	bgt.n	80051ac <_dtoa_r+0x94c>
 80050dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050de:	2b02      	cmp	r3, #2
 80050e0:	dc41      	bgt.n	8005166 <_dtoa_r+0x906>
 80050e2:	e063      	b.n	80051ac <_dtoa_r+0x94c>
 80050e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80050e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80050ea:	e746      	b.n	8004f7a <_dtoa_r+0x71a>
 80050ec:	9b07      	ldr	r3, [sp, #28]
 80050ee:	1e5c      	subs	r4, r3, #1
 80050f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050f2:	42a3      	cmp	r3, r4
 80050f4:	bfbf      	itttt	lt
 80050f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80050f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80050fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80050fc:	1ae3      	sublt	r3, r4, r3
 80050fe:	bfb4      	ite	lt
 8005100:	18d2      	addlt	r2, r2, r3
 8005102:	1b1c      	subge	r4, r3, r4
 8005104:	9b07      	ldr	r3, [sp, #28]
 8005106:	bfbc      	itt	lt
 8005108:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800510a:	2400      	movlt	r4, #0
 800510c:	2b00      	cmp	r3, #0
 800510e:	bfb5      	itete	lt
 8005110:	eba8 0603 	sublt.w	r6, r8, r3
 8005114:	9b07      	ldrge	r3, [sp, #28]
 8005116:	2300      	movlt	r3, #0
 8005118:	4646      	movge	r6, r8
 800511a:	e730      	b.n	8004f7e <_dtoa_r+0x71e>
 800511c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800511e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005120:	4646      	mov	r6, r8
 8005122:	e735      	b.n	8004f90 <_dtoa_r+0x730>
 8005124:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005126:	e75c      	b.n	8004fe2 <_dtoa_r+0x782>
 8005128:	2300      	movs	r3, #0
 800512a:	e788      	b.n	800503e <_dtoa_r+0x7de>
 800512c:	3fe00000 	.word	0x3fe00000
 8005130:	40240000 	.word	0x40240000
 8005134:	40140000 	.word	0x40140000
 8005138:	9b02      	ldr	r3, [sp, #8]
 800513a:	e780      	b.n	800503e <_dtoa_r+0x7de>
 800513c:	2300      	movs	r3, #0
 800513e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005140:	e782      	b.n	8005048 <_dtoa_r+0x7e8>
 8005142:	d099      	beq.n	8005078 <_dtoa_r+0x818>
 8005144:	9a08      	ldr	r2, [sp, #32]
 8005146:	331c      	adds	r3, #28
 8005148:	441a      	add	r2, r3
 800514a:	4498      	add	r8, r3
 800514c:	441e      	add	r6, r3
 800514e:	9208      	str	r2, [sp, #32]
 8005150:	e792      	b.n	8005078 <_dtoa_r+0x818>
 8005152:	4603      	mov	r3, r0
 8005154:	e7f6      	b.n	8005144 <_dtoa_r+0x8e4>
 8005156:	9b07      	ldr	r3, [sp, #28]
 8005158:	9704      	str	r7, [sp, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	dc20      	bgt.n	80051a0 <_dtoa_r+0x940>
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005162:	2b02      	cmp	r3, #2
 8005164:	dd1e      	ble.n	80051a4 <_dtoa_r+0x944>
 8005166:	9b00      	ldr	r3, [sp, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f47f aec0 	bne.w	8004eee <_dtoa_r+0x68e>
 800516e:	4621      	mov	r1, r4
 8005170:	2205      	movs	r2, #5
 8005172:	4658      	mov	r0, fp
 8005174:	f000 fa9a 	bl	80056ac <__multadd>
 8005178:	4601      	mov	r1, r0
 800517a:	4604      	mov	r4, r0
 800517c:	4648      	mov	r0, r9
 800517e:	f000 fcad 	bl	8005adc <__mcmp>
 8005182:	2800      	cmp	r0, #0
 8005184:	f77f aeb3 	ble.w	8004eee <_dtoa_r+0x68e>
 8005188:	4656      	mov	r6, sl
 800518a:	2331      	movs	r3, #49	@ 0x31
 800518c:	f806 3b01 	strb.w	r3, [r6], #1
 8005190:	9b04      	ldr	r3, [sp, #16]
 8005192:	3301      	adds	r3, #1
 8005194:	9304      	str	r3, [sp, #16]
 8005196:	e6ae      	b.n	8004ef6 <_dtoa_r+0x696>
 8005198:	9c07      	ldr	r4, [sp, #28]
 800519a:	9704      	str	r7, [sp, #16]
 800519c:	4625      	mov	r5, r4
 800519e:	e7f3      	b.n	8005188 <_dtoa_r+0x928>
 80051a0:	9b07      	ldr	r3, [sp, #28]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8104 	beq.w	80053b4 <_dtoa_r+0xb54>
 80051ac:	2e00      	cmp	r6, #0
 80051ae:	dd05      	ble.n	80051bc <_dtoa_r+0x95c>
 80051b0:	4629      	mov	r1, r5
 80051b2:	4632      	mov	r2, r6
 80051b4:	4658      	mov	r0, fp
 80051b6:	f000 fc25 	bl	8005a04 <__lshift>
 80051ba:	4605      	mov	r5, r0
 80051bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d05a      	beq.n	8005278 <_dtoa_r+0xa18>
 80051c2:	6869      	ldr	r1, [r5, #4]
 80051c4:	4658      	mov	r0, fp
 80051c6:	f000 fa0f 	bl	80055e8 <_Balloc>
 80051ca:	4606      	mov	r6, r0
 80051cc:	b928      	cbnz	r0, 80051da <_dtoa_r+0x97a>
 80051ce:	4b84      	ldr	r3, [pc, #528]	@ (80053e0 <_dtoa_r+0xb80>)
 80051d0:	4602      	mov	r2, r0
 80051d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80051d6:	f7ff bb5a 	b.w	800488e <_dtoa_r+0x2e>
 80051da:	692a      	ldr	r2, [r5, #16]
 80051dc:	3202      	adds	r2, #2
 80051de:	0092      	lsls	r2, r2, #2
 80051e0:	f105 010c 	add.w	r1, r5, #12
 80051e4:	300c      	adds	r0, #12
 80051e6:	f001 f975 	bl	80064d4 <memcpy>
 80051ea:	2201      	movs	r2, #1
 80051ec:	4631      	mov	r1, r6
 80051ee:	4658      	mov	r0, fp
 80051f0:	f000 fc08 	bl	8005a04 <__lshift>
 80051f4:	f10a 0301 	add.w	r3, sl, #1
 80051f8:	9307      	str	r3, [sp, #28]
 80051fa:	9b00      	ldr	r3, [sp, #0]
 80051fc:	4453      	add	r3, sl
 80051fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005200:	9b02      	ldr	r3, [sp, #8]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	462f      	mov	r7, r5
 8005208:	930a      	str	r3, [sp, #40]	@ 0x28
 800520a:	4605      	mov	r5, r0
 800520c:	9b07      	ldr	r3, [sp, #28]
 800520e:	4621      	mov	r1, r4
 8005210:	3b01      	subs	r3, #1
 8005212:	4648      	mov	r0, r9
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	f7ff fa98 	bl	800474a <quorem>
 800521a:	4639      	mov	r1, r7
 800521c:	9002      	str	r0, [sp, #8]
 800521e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005222:	4648      	mov	r0, r9
 8005224:	f000 fc5a 	bl	8005adc <__mcmp>
 8005228:	462a      	mov	r2, r5
 800522a:	9008      	str	r0, [sp, #32]
 800522c:	4621      	mov	r1, r4
 800522e:	4658      	mov	r0, fp
 8005230:	f000 fc70 	bl	8005b14 <__mdiff>
 8005234:	68c2      	ldr	r2, [r0, #12]
 8005236:	4606      	mov	r6, r0
 8005238:	bb02      	cbnz	r2, 800527c <_dtoa_r+0xa1c>
 800523a:	4601      	mov	r1, r0
 800523c:	4648      	mov	r0, r9
 800523e:	f000 fc4d 	bl	8005adc <__mcmp>
 8005242:	4602      	mov	r2, r0
 8005244:	4631      	mov	r1, r6
 8005246:	4658      	mov	r0, fp
 8005248:	920e      	str	r2, [sp, #56]	@ 0x38
 800524a:	f000 fa0d 	bl	8005668 <_Bfree>
 800524e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005250:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005252:	9e07      	ldr	r6, [sp, #28]
 8005254:	ea43 0102 	orr.w	r1, r3, r2
 8005258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800525a:	4319      	orrs	r1, r3
 800525c:	d110      	bne.n	8005280 <_dtoa_r+0xa20>
 800525e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005262:	d029      	beq.n	80052b8 <_dtoa_r+0xa58>
 8005264:	9b08      	ldr	r3, [sp, #32]
 8005266:	2b00      	cmp	r3, #0
 8005268:	dd02      	ble.n	8005270 <_dtoa_r+0xa10>
 800526a:	9b02      	ldr	r3, [sp, #8]
 800526c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005270:	9b00      	ldr	r3, [sp, #0]
 8005272:	f883 8000 	strb.w	r8, [r3]
 8005276:	e63f      	b.n	8004ef8 <_dtoa_r+0x698>
 8005278:	4628      	mov	r0, r5
 800527a:	e7bb      	b.n	80051f4 <_dtoa_r+0x994>
 800527c:	2201      	movs	r2, #1
 800527e:	e7e1      	b.n	8005244 <_dtoa_r+0x9e4>
 8005280:	9b08      	ldr	r3, [sp, #32]
 8005282:	2b00      	cmp	r3, #0
 8005284:	db04      	blt.n	8005290 <_dtoa_r+0xa30>
 8005286:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005288:	430b      	orrs	r3, r1
 800528a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800528c:	430b      	orrs	r3, r1
 800528e:	d120      	bne.n	80052d2 <_dtoa_r+0xa72>
 8005290:	2a00      	cmp	r2, #0
 8005292:	dded      	ble.n	8005270 <_dtoa_r+0xa10>
 8005294:	4649      	mov	r1, r9
 8005296:	2201      	movs	r2, #1
 8005298:	4658      	mov	r0, fp
 800529a:	f000 fbb3 	bl	8005a04 <__lshift>
 800529e:	4621      	mov	r1, r4
 80052a0:	4681      	mov	r9, r0
 80052a2:	f000 fc1b 	bl	8005adc <__mcmp>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	dc03      	bgt.n	80052b2 <_dtoa_r+0xa52>
 80052aa:	d1e1      	bne.n	8005270 <_dtoa_r+0xa10>
 80052ac:	f018 0f01 	tst.w	r8, #1
 80052b0:	d0de      	beq.n	8005270 <_dtoa_r+0xa10>
 80052b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052b6:	d1d8      	bne.n	800526a <_dtoa_r+0xa0a>
 80052b8:	9a00      	ldr	r2, [sp, #0]
 80052ba:	2339      	movs	r3, #57	@ 0x39
 80052bc:	7013      	strb	r3, [r2, #0]
 80052be:	4633      	mov	r3, r6
 80052c0:	461e      	mov	r6, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80052c8:	2a39      	cmp	r2, #57	@ 0x39
 80052ca:	d052      	beq.n	8005372 <_dtoa_r+0xb12>
 80052cc:	3201      	adds	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	e612      	b.n	8004ef8 <_dtoa_r+0x698>
 80052d2:	2a00      	cmp	r2, #0
 80052d4:	dd07      	ble.n	80052e6 <_dtoa_r+0xa86>
 80052d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052da:	d0ed      	beq.n	80052b8 <_dtoa_r+0xa58>
 80052dc:	9a00      	ldr	r2, [sp, #0]
 80052de:	f108 0301 	add.w	r3, r8, #1
 80052e2:	7013      	strb	r3, [r2, #0]
 80052e4:	e608      	b.n	8004ef8 <_dtoa_r+0x698>
 80052e6:	9b07      	ldr	r3, [sp, #28]
 80052e8:	9a07      	ldr	r2, [sp, #28]
 80052ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80052ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d028      	beq.n	8005346 <_dtoa_r+0xae6>
 80052f4:	4649      	mov	r1, r9
 80052f6:	2300      	movs	r3, #0
 80052f8:	220a      	movs	r2, #10
 80052fa:	4658      	mov	r0, fp
 80052fc:	f000 f9d6 	bl	80056ac <__multadd>
 8005300:	42af      	cmp	r7, r5
 8005302:	4681      	mov	r9, r0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	f04f 020a 	mov.w	r2, #10
 800530c:	4639      	mov	r1, r7
 800530e:	4658      	mov	r0, fp
 8005310:	d107      	bne.n	8005322 <_dtoa_r+0xac2>
 8005312:	f000 f9cb 	bl	80056ac <__multadd>
 8005316:	4607      	mov	r7, r0
 8005318:	4605      	mov	r5, r0
 800531a:	9b07      	ldr	r3, [sp, #28]
 800531c:	3301      	adds	r3, #1
 800531e:	9307      	str	r3, [sp, #28]
 8005320:	e774      	b.n	800520c <_dtoa_r+0x9ac>
 8005322:	f000 f9c3 	bl	80056ac <__multadd>
 8005326:	4629      	mov	r1, r5
 8005328:	4607      	mov	r7, r0
 800532a:	2300      	movs	r3, #0
 800532c:	220a      	movs	r2, #10
 800532e:	4658      	mov	r0, fp
 8005330:	f000 f9bc 	bl	80056ac <__multadd>
 8005334:	4605      	mov	r5, r0
 8005336:	e7f0      	b.n	800531a <_dtoa_r+0xaba>
 8005338:	9b00      	ldr	r3, [sp, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	bfcc      	ite	gt
 800533e:	461e      	movgt	r6, r3
 8005340:	2601      	movle	r6, #1
 8005342:	4456      	add	r6, sl
 8005344:	2700      	movs	r7, #0
 8005346:	4649      	mov	r1, r9
 8005348:	2201      	movs	r2, #1
 800534a:	4658      	mov	r0, fp
 800534c:	f000 fb5a 	bl	8005a04 <__lshift>
 8005350:	4621      	mov	r1, r4
 8005352:	4681      	mov	r9, r0
 8005354:	f000 fbc2 	bl	8005adc <__mcmp>
 8005358:	2800      	cmp	r0, #0
 800535a:	dcb0      	bgt.n	80052be <_dtoa_r+0xa5e>
 800535c:	d102      	bne.n	8005364 <_dtoa_r+0xb04>
 800535e:	f018 0f01 	tst.w	r8, #1
 8005362:	d1ac      	bne.n	80052be <_dtoa_r+0xa5e>
 8005364:	4633      	mov	r3, r6
 8005366:	461e      	mov	r6, r3
 8005368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800536c:	2a30      	cmp	r2, #48	@ 0x30
 800536e:	d0fa      	beq.n	8005366 <_dtoa_r+0xb06>
 8005370:	e5c2      	b.n	8004ef8 <_dtoa_r+0x698>
 8005372:	459a      	cmp	sl, r3
 8005374:	d1a4      	bne.n	80052c0 <_dtoa_r+0xa60>
 8005376:	9b04      	ldr	r3, [sp, #16]
 8005378:	3301      	adds	r3, #1
 800537a:	9304      	str	r3, [sp, #16]
 800537c:	2331      	movs	r3, #49	@ 0x31
 800537e:	f88a 3000 	strb.w	r3, [sl]
 8005382:	e5b9      	b.n	8004ef8 <_dtoa_r+0x698>
 8005384:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005386:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80053e4 <_dtoa_r+0xb84>
 800538a:	b11b      	cbz	r3, 8005394 <_dtoa_r+0xb34>
 800538c:	f10a 0308 	add.w	r3, sl, #8
 8005390:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4650      	mov	r0, sl
 8005396:	b019      	add	sp, #100	@ 0x64
 8005398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800539c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800539e:	2b01      	cmp	r3, #1
 80053a0:	f77f ae37 	ble.w	8005012 <_dtoa_r+0x7b2>
 80053a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80053a8:	2001      	movs	r0, #1
 80053aa:	e655      	b.n	8005058 <_dtoa_r+0x7f8>
 80053ac:	9b00      	ldr	r3, [sp, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f77f aed6 	ble.w	8005160 <_dtoa_r+0x900>
 80053b4:	4656      	mov	r6, sl
 80053b6:	4621      	mov	r1, r4
 80053b8:	4648      	mov	r0, r9
 80053ba:	f7ff f9c6 	bl	800474a <quorem>
 80053be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80053c2:	f806 8b01 	strb.w	r8, [r6], #1
 80053c6:	9b00      	ldr	r3, [sp, #0]
 80053c8:	eba6 020a 	sub.w	r2, r6, sl
 80053cc:	4293      	cmp	r3, r2
 80053ce:	ddb3      	ble.n	8005338 <_dtoa_r+0xad8>
 80053d0:	4649      	mov	r1, r9
 80053d2:	2300      	movs	r3, #0
 80053d4:	220a      	movs	r2, #10
 80053d6:	4658      	mov	r0, fp
 80053d8:	f000 f968 	bl	80056ac <__multadd>
 80053dc:	4681      	mov	r9, r0
 80053de:	e7ea      	b.n	80053b6 <_dtoa_r+0xb56>
 80053e0:	080069d8 	.word	0x080069d8
 80053e4:	0800695c 	.word	0x0800695c

080053e8 <_free_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4605      	mov	r5, r0
 80053ec:	2900      	cmp	r1, #0
 80053ee:	d041      	beq.n	8005474 <_free_r+0x8c>
 80053f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f4:	1f0c      	subs	r4, r1, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bfb8      	it	lt
 80053fa:	18e4      	addlt	r4, r4, r3
 80053fc:	f000 f8e8 	bl	80055d0 <__malloc_lock>
 8005400:	4a1d      	ldr	r2, [pc, #116]	@ (8005478 <_free_r+0x90>)
 8005402:	6813      	ldr	r3, [r2, #0]
 8005404:	b933      	cbnz	r3, 8005414 <_free_r+0x2c>
 8005406:	6063      	str	r3, [r4, #4]
 8005408:	6014      	str	r4, [r2, #0]
 800540a:	4628      	mov	r0, r5
 800540c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005410:	f000 b8e4 	b.w	80055dc <__malloc_unlock>
 8005414:	42a3      	cmp	r3, r4
 8005416:	d908      	bls.n	800542a <_free_r+0x42>
 8005418:	6820      	ldr	r0, [r4, #0]
 800541a:	1821      	adds	r1, r4, r0
 800541c:	428b      	cmp	r3, r1
 800541e:	bf01      	itttt	eq
 8005420:	6819      	ldreq	r1, [r3, #0]
 8005422:	685b      	ldreq	r3, [r3, #4]
 8005424:	1809      	addeq	r1, r1, r0
 8005426:	6021      	streq	r1, [r4, #0]
 8005428:	e7ed      	b.n	8005406 <_free_r+0x1e>
 800542a:	461a      	mov	r2, r3
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	b10b      	cbz	r3, 8005434 <_free_r+0x4c>
 8005430:	42a3      	cmp	r3, r4
 8005432:	d9fa      	bls.n	800542a <_free_r+0x42>
 8005434:	6811      	ldr	r1, [r2, #0]
 8005436:	1850      	adds	r0, r2, r1
 8005438:	42a0      	cmp	r0, r4
 800543a:	d10b      	bne.n	8005454 <_free_r+0x6c>
 800543c:	6820      	ldr	r0, [r4, #0]
 800543e:	4401      	add	r1, r0
 8005440:	1850      	adds	r0, r2, r1
 8005442:	4283      	cmp	r3, r0
 8005444:	6011      	str	r1, [r2, #0]
 8005446:	d1e0      	bne.n	800540a <_free_r+0x22>
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	6053      	str	r3, [r2, #4]
 800544e:	4408      	add	r0, r1
 8005450:	6010      	str	r0, [r2, #0]
 8005452:	e7da      	b.n	800540a <_free_r+0x22>
 8005454:	d902      	bls.n	800545c <_free_r+0x74>
 8005456:	230c      	movs	r3, #12
 8005458:	602b      	str	r3, [r5, #0]
 800545a:	e7d6      	b.n	800540a <_free_r+0x22>
 800545c:	6820      	ldr	r0, [r4, #0]
 800545e:	1821      	adds	r1, r4, r0
 8005460:	428b      	cmp	r3, r1
 8005462:	bf04      	itt	eq
 8005464:	6819      	ldreq	r1, [r3, #0]
 8005466:	685b      	ldreq	r3, [r3, #4]
 8005468:	6063      	str	r3, [r4, #4]
 800546a:	bf04      	itt	eq
 800546c:	1809      	addeq	r1, r1, r0
 800546e:	6021      	streq	r1, [r4, #0]
 8005470:	6054      	str	r4, [r2, #4]
 8005472:	e7ca      	b.n	800540a <_free_r+0x22>
 8005474:	bd38      	pop	{r3, r4, r5, pc}
 8005476:	bf00      	nop
 8005478:	2000061c 	.word	0x2000061c

0800547c <malloc>:
 800547c:	4b02      	ldr	r3, [pc, #8]	@ (8005488 <malloc+0xc>)
 800547e:	4601      	mov	r1, r0
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	f000 b825 	b.w	80054d0 <_malloc_r>
 8005486:	bf00      	nop
 8005488:	20000018 	.word	0x20000018

0800548c <sbrk_aligned>:
 800548c:	b570      	push	{r4, r5, r6, lr}
 800548e:	4e0f      	ldr	r6, [pc, #60]	@ (80054cc <sbrk_aligned+0x40>)
 8005490:	460c      	mov	r4, r1
 8005492:	6831      	ldr	r1, [r6, #0]
 8005494:	4605      	mov	r5, r0
 8005496:	b911      	cbnz	r1, 800549e <sbrk_aligned+0x12>
 8005498:	f001 f80c 	bl	80064b4 <_sbrk_r>
 800549c:	6030      	str	r0, [r6, #0]
 800549e:	4621      	mov	r1, r4
 80054a0:	4628      	mov	r0, r5
 80054a2:	f001 f807 	bl	80064b4 <_sbrk_r>
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	d103      	bne.n	80054b2 <sbrk_aligned+0x26>
 80054aa:	f04f 34ff 	mov.w	r4, #4294967295
 80054ae:	4620      	mov	r0, r4
 80054b0:	bd70      	pop	{r4, r5, r6, pc}
 80054b2:	1cc4      	adds	r4, r0, #3
 80054b4:	f024 0403 	bic.w	r4, r4, #3
 80054b8:	42a0      	cmp	r0, r4
 80054ba:	d0f8      	beq.n	80054ae <sbrk_aligned+0x22>
 80054bc:	1a21      	subs	r1, r4, r0
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 fff8 	bl	80064b4 <_sbrk_r>
 80054c4:	3001      	adds	r0, #1
 80054c6:	d1f2      	bne.n	80054ae <sbrk_aligned+0x22>
 80054c8:	e7ef      	b.n	80054aa <sbrk_aligned+0x1e>
 80054ca:	bf00      	nop
 80054cc:	20000618 	.word	0x20000618

080054d0 <_malloc_r>:
 80054d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054d4:	1ccd      	adds	r5, r1, #3
 80054d6:	f025 0503 	bic.w	r5, r5, #3
 80054da:	3508      	adds	r5, #8
 80054dc:	2d0c      	cmp	r5, #12
 80054de:	bf38      	it	cc
 80054e0:	250c      	movcc	r5, #12
 80054e2:	2d00      	cmp	r5, #0
 80054e4:	4606      	mov	r6, r0
 80054e6:	db01      	blt.n	80054ec <_malloc_r+0x1c>
 80054e8:	42a9      	cmp	r1, r5
 80054ea:	d904      	bls.n	80054f6 <_malloc_r+0x26>
 80054ec:	230c      	movs	r3, #12
 80054ee:	6033      	str	r3, [r6, #0]
 80054f0:	2000      	movs	r0, #0
 80054f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055cc <_malloc_r+0xfc>
 80054fa:	f000 f869 	bl	80055d0 <__malloc_lock>
 80054fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005502:	461c      	mov	r4, r3
 8005504:	bb44      	cbnz	r4, 8005558 <_malloc_r+0x88>
 8005506:	4629      	mov	r1, r5
 8005508:	4630      	mov	r0, r6
 800550a:	f7ff ffbf 	bl	800548c <sbrk_aligned>
 800550e:	1c43      	adds	r3, r0, #1
 8005510:	4604      	mov	r4, r0
 8005512:	d158      	bne.n	80055c6 <_malloc_r+0xf6>
 8005514:	f8d8 4000 	ldr.w	r4, [r8]
 8005518:	4627      	mov	r7, r4
 800551a:	2f00      	cmp	r7, #0
 800551c:	d143      	bne.n	80055a6 <_malloc_r+0xd6>
 800551e:	2c00      	cmp	r4, #0
 8005520:	d04b      	beq.n	80055ba <_malloc_r+0xea>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	4639      	mov	r1, r7
 8005526:	4630      	mov	r0, r6
 8005528:	eb04 0903 	add.w	r9, r4, r3
 800552c:	f000 ffc2 	bl	80064b4 <_sbrk_r>
 8005530:	4581      	cmp	r9, r0
 8005532:	d142      	bne.n	80055ba <_malloc_r+0xea>
 8005534:	6821      	ldr	r1, [r4, #0]
 8005536:	1a6d      	subs	r5, r5, r1
 8005538:	4629      	mov	r1, r5
 800553a:	4630      	mov	r0, r6
 800553c:	f7ff ffa6 	bl	800548c <sbrk_aligned>
 8005540:	3001      	adds	r0, #1
 8005542:	d03a      	beq.n	80055ba <_malloc_r+0xea>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	442b      	add	r3, r5
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	f8d8 3000 	ldr.w	r3, [r8]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	bb62      	cbnz	r2, 80055ac <_malloc_r+0xdc>
 8005552:	f8c8 7000 	str.w	r7, [r8]
 8005556:	e00f      	b.n	8005578 <_malloc_r+0xa8>
 8005558:	6822      	ldr	r2, [r4, #0]
 800555a:	1b52      	subs	r2, r2, r5
 800555c:	d420      	bmi.n	80055a0 <_malloc_r+0xd0>
 800555e:	2a0b      	cmp	r2, #11
 8005560:	d917      	bls.n	8005592 <_malloc_r+0xc2>
 8005562:	1961      	adds	r1, r4, r5
 8005564:	42a3      	cmp	r3, r4
 8005566:	6025      	str	r5, [r4, #0]
 8005568:	bf18      	it	ne
 800556a:	6059      	strne	r1, [r3, #4]
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	bf08      	it	eq
 8005570:	f8c8 1000 	streq.w	r1, [r8]
 8005574:	5162      	str	r2, [r4, r5]
 8005576:	604b      	str	r3, [r1, #4]
 8005578:	4630      	mov	r0, r6
 800557a:	f000 f82f 	bl	80055dc <__malloc_unlock>
 800557e:	f104 000b 	add.w	r0, r4, #11
 8005582:	1d23      	adds	r3, r4, #4
 8005584:	f020 0007 	bic.w	r0, r0, #7
 8005588:	1ac2      	subs	r2, r0, r3
 800558a:	bf1c      	itt	ne
 800558c:	1a1b      	subne	r3, r3, r0
 800558e:	50a3      	strne	r3, [r4, r2]
 8005590:	e7af      	b.n	80054f2 <_malloc_r+0x22>
 8005592:	6862      	ldr	r2, [r4, #4]
 8005594:	42a3      	cmp	r3, r4
 8005596:	bf0c      	ite	eq
 8005598:	f8c8 2000 	streq.w	r2, [r8]
 800559c:	605a      	strne	r2, [r3, #4]
 800559e:	e7eb      	b.n	8005578 <_malloc_r+0xa8>
 80055a0:	4623      	mov	r3, r4
 80055a2:	6864      	ldr	r4, [r4, #4]
 80055a4:	e7ae      	b.n	8005504 <_malloc_r+0x34>
 80055a6:	463c      	mov	r4, r7
 80055a8:	687f      	ldr	r7, [r7, #4]
 80055aa:	e7b6      	b.n	800551a <_malloc_r+0x4a>
 80055ac:	461a      	mov	r2, r3
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	42a3      	cmp	r3, r4
 80055b2:	d1fb      	bne.n	80055ac <_malloc_r+0xdc>
 80055b4:	2300      	movs	r3, #0
 80055b6:	6053      	str	r3, [r2, #4]
 80055b8:	e7de      	b.n	8005578 <_malloc_r+0xa8>
 80055ba:	230c      	movs	r3, #12
 80055bc:	6033      	str	r3, [r6, #0]
 80055be:	4630      	mov	r0, r6
 80055c0:	f000 f80c 	bl	80055dc <__malloc_unlock>
 80055c4:	e794      	b.n	80054f0 <_malloc_r+0x20>
 80055c6:	6005      	str	r5, [r0, #0]
 80055c8:	e7d6      	b.n	8005578 <_malloc_r+0xa8>
 80055ca:	bf00      	nop
 80055cc:	2000061c 	.word	0x2000061c

080055d0 <__malloc_lock>:
 80055d0:	4801      	ldr	r0, [pc, #4]	@ (80055d8 <__malloc_lock+0x8>)
 80055d2:	f7ff b8b8 	b.w	8004746 <__retarget_lock_acquire_recursive>
 80055d6:	bf00      	nop
 80055d8:	20000614 	.word	0x20000614

080055dc <__malloc_unlock>:
 80055dc:	4801      	ldr	r0, [pc, #4]	@ (80055e4 <__malloc_unlock+0x8>)
 80055de:	f7ff b8b3 	b.w	8004748 <__retarget_lock_release_recursive>
 80055e2:	bf00      	nop
 80055e4:	20000614 	.word	0x20000614

080055e8 <_Balloc>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	69c6      	ldr	r6, [r0, #28]
 80055ec:	4604      	mov	r4, r0
 80055ee:	460d      	mov	r5, r1
 80055f0:	b976      	cbnz	r6, 8005610 <_Balloc+0x28>
 80055f2:	2010      	movs	r0, #16
 80055f4:	f7ff ff42 	bl	800547c <malloc>
 80055f8:	4602      	mov	r2, r0
 80055fa:	61e0      	str	r0, [r4, #28]
 80055fc:	b920      	cbnz	r0, 8005608 <_Balloc+0x20>
 80055fe:	4b18      	ldr	r3, [pc, #96]	@ (8005660 <_Balloc+0x78>)
 8005600:	4818      	ldr	r0, [pc, #96]	@ (8005664 <_Balloc+0x7c>)
 8005602:	216b      	movs	r1, #107	@ 0x6b
 8005604:	f000 ff74 	bl	80064f0 <__assert_func>
 8005608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800560c:	6006      	str	r6, [r0, #0]
 800560e:	60c6      	str	r6, [r0, #12]
 8005610:	69e6      	ldr	r6, [r4, #28]
 8005612:	68f3      	ldr	r3, [r6, #12]
 8005614:	b183      	cbz	r3, 8005638 <_Balloc+0x50>
 8005616:	69e3      	ldr	r3, [r4, #28]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800561e:	b9b8      	cbnz	r0, 8005650 <_Balloc+0x68>
 8005620:	2101      	movs	r1, #1
 8005622:	fa01 f605 	lsl.w	r6, r1, r5
 8005626:	1d72      	adds	r2, r6, #5
 8005628:	0092      	lsls	r2, r2, #2
 800562a:	4620      	mov	r0, r4
 800562c:	f000 ff7e 	bl	800652c <_calloc_r>
 8005630:	b160      	cbz	r0, 800564c <_Balloc+0x64>
 8005632:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005636:	e00e      	b.n	8005656 <_Balloc+0x6e>
 8005638:	2221      	movs	r2, #33	@ 0x21
 800563a:	2104      	movs	r1, #4
 800563c:	4620      	mov	r0, r4
 800563e:	f000 ff75 	bl	800652c <_calloc_r>
 8005642:	69e3      	ldr	r3, [r4, #28]
 8005644:	60f0      	str	r0, [r6, #12]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e4      	bne.n	8005616 <_Balloc+0x2e>
 800564c:	2000      	movs	r0, #0
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	6802      	ldr	r2, [r0, #0]
 8005652:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005656:	2300      	movs	r3, #0
 8005658:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800565c:	e7f7      	b.n	800564e <_Balloc+0x66>
 800565e:	bf00      	nop
 8005660:	08006969 	.word	0x08006969
 8005664:	080069e9 	.word	0x080069e9

08005668 <_Bfree>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	69c6      	ldr	r6, [r0, #28]
 800566c:	4605      	mov	r5, r0
 800566e:	460c      	mov	r4, r1
 8005670:	b976      	cbnz	r6, 8005690 <_Bfree+0x28>
 8005672:	2010      	movs	r0, #16
 8005674:	f7ff ff02 	bl	800547c <malloc>
 8005678:	4602      	mov	r2, r0
 800567a:	61e8      	str	r0, [r5, #28]
 800567c:	b920      	cbnz	r0, 8005688 <_Bfree+0x20>
 800567e:	4b09      	ldr	r3, [pc, #36]	@ (80056a4 <_Bfree+0x3c>)
 8005680:	4809      	ldr	r0, [pc, #36]	@ (80056a8 <_Bfree+0x40>)
 8005682:	218f      	movs	r1, #143	@ 0x8f
 8005684:	f000 ff34 	bl	80064f0 <__assert_func>
 8005688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800568c:	6006      	str	r6, [r0, #0]
 800568e:	60c6      	str	r6, [r0, #12]
 8005690:	b13c      	cbz	r4, 80056a2 <_Bfree+0x3a>
 8005692:	69eb      	ldr	r3, [r5, #28]
 8005694:	6862      	ldr	r2, [r4, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800569c:	6021      	str	r1, [r4, #0]
 800569e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80056a2:	bd70      	pop	{r4, r5, r6, pc}
 80056a4:	08006969 	.word	0x08006969
 80056a8:	080069e9 	.word	0x080069e9

080056ac <__multadd>:
 80056ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b0:	690d      	ldr	r5, [r1, #16]
 80056b2:	4607      	mov	r7, r0
 80056b4:	460c      	mov	r4, r1
 80056b6:	461e      	mov	r6, r3
 80056b8:	f101 0c14 	add.w	ip, r1, #20
 80056bc:	2000      	movs	r0, #0
 80056be:	f8dc 3000 	ldr.w	r3, [ip]
 80056c2:	b299      	uxth	r1, r3
 80056c4:	fb02 6101 	mla	r1, r2, r1, r6
 80056c8:	0c1e      	lsrs	r6, r3, #16
 80056ca:	0c0b      	lsrs	r3, r1, #16
 80056cc:	fb02 3306 	mla	r3, r2, r6, r3
 80056d0:	b289      	uxth	r1, r1
 80056d2:	3001      	adds	r0, #1
 80056d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056d8:	4285      	cmp	r5, r0
 80056da:	f84c 1b04 	str.w	r1, [ip], #4
 80056de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056e2:	dcec      	bgt.n	80056be <__multadd+0x12>
 80056e4:	b30e      	cbz	r6, 800572a <__multadd+0x7e>
 80056e6:	68a3      	ldr	r3, [r4, #8]
 80056e8:	42ab      	cmp	r3, r5
 80056ea:	dc19      	bgt.n	8005720 <__multadd+0x74>
 80056ec:	6861      	ldr	r1, [r4, #4]
 80056ee:	4638      	mov	r0, r7
 80056f0:	3101      	adds	r1, #1
 80056f2:	f7ff ff79 	bl	80055e8 <_Balloc>
 80056f6:	4680      	mov	r8, r0
 80056f8:	b928      	cbnz	r0, 8005706 <__multadd+0x5a>
 80056fa:	4602      	mov	r2, r0
 80056fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005730 <__multadd+0x84>)
 80056fe:	480d      	ldr	r0, [pc, #52]	@ (8005734 <__multadd+0x88>)
 8005700:	21ba      	movs	r1, #186	@ 0xba
 8005702:	f000 fef5 	bl	80064f0 <__assert_func>
 8005706:	6922      	ldr	r2, [r4, #16]
 8005708:	3202      	adds	r2, #2
 800570a:	f104 010c 	add.w	r1, r4, #12
 800570e:	0092      	lsls	r2, r2, #2
 8005710:	300c      	adds	r0, #12
 8005712:	f000 fedf 	bl	80064d4 <memcpy>
 8005716:	4621      	mov	r1, r4
 8005718:	4638      	mov	r0, r7
 800571a:	f7ff ffa5 	bl	8005668 <_Bfree>
 800571e:	4644      	mov	r4, r8
 8005720:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005724:	3501      	adds	r5, #1
 8005726:	615e      	str	r6, [r3, #20]
 8005728:	6125      	str	r5, [r4, #16]
 800572a:	4620      	mov	r0, r4
 800572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005730:	080069d8 	.word	0x080069d8
 8005734:	080069e9 	.word	0x080069e9

08005738 <__hi0bits>:
 8005738:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800573c:	4603      	mov	r3, r0
 800573e:	bf36      	itet	cc
 8005740:	0403      	lslcc	r3, r0, #16
 8005742:	2000      	movcs	r0, #0
 8005744:	2010      	movcc	r0, #16
 8005746:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800574a:	bf3c      	itt	cc
 800574c:	021b      	lslcc	r3, r3, #8
 800574e:	3008      	addcc	r0, #8
 8005750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005754:	bf3c      	itt	cc
 8005756:	011b      	lslcc	r3, r3, #4
 8005758:	3004      	addcc	r0, #4
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800575e:	bf3c      	itt	cc
 8005760:	009b      	lslcc	r3, r3, #2
 8005762:	3002      	addcc	r0, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	db05      	blt.n	8005774 <__hi0bits+0x3c>
 8005768:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800576c:	f100 0001 	add.w	r0, r0, #1
 8005770:	bf08      	it	eq
 8005772:	2020      	moveq	r0, #32
 8005774:	4770      	bx	lr

08005776 <__lo0bits>:
 8005776:	6803      	ldr	r3, [r0, #0]
 8005778:	4602      	mov	r2, r0
 800577a:	f013 0007 	ands.w	r0, r3, #7
 800577e:	d00b      	beq.n	8005798 <__lo0bits+0x22>
 8005780:	07d9      	lsls	r1, r3, #31
 8005782:	d421      	bmi.n	80057c8 <__lo0bits+0x52>
 8005784:	0798      	lsls	r0, r3, #30
 8005786:	bf49      	itett	mi
 8005788:	085b      	lsrmi	r3, r3, #1
 800578a:	089b      	lsrpl	r3, r3, #2
 800578c:	2001      	movmi	r0, #1
 800578e:	6013      	strmi	r3, [r2, #0]
 8005790:	bf5c      	itt	pl
 8005792:	6013      	strpl	r3, [r2, #0]
 8005794:	2002      	movpl	r0, #2
 8005796:	4770      	bx	lr
 8005798:	b299      	uxth	r1, r3
 800579a:	b909      	cbnz	r1, 80057a0 <__lo0bits+0x2a>
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	2010      	movs	r0, #16
 80057a0:	b2d9      	uxtb	r1, r3
 80057a2:	b909      	cbnz	r1, 80057a8 <__lo0bits+0x32>
 80057a4:	3008      	adds	r0, #8
 80057a6:	0a1b      	lsrs	r3, r3, #8
 80057a8:	0719      	lsls	r1, r3, #28
 80057aa:	bf04      	itt	eq
 80057ac:	091b      	lsreq	r3, r3, #4
 80057ae:	3004      	addeq	r0, #4
 80057b0:	0799      	lsls	r1, r3, #30
 80057b2:	bf04      	itt	eq
 80057b4:	089b      	lsreq	r3, r3, #2
 80057b6:	3002      	addeq	r0, #2
 80057b8:	07d9      	lsls	r1, r3, #31
 80057ba:	d403      	bmi.n	80057c4 <__lo0bits+0x4e>
 80057bc:	085b      	lsrs	r3, r3, #1
 80057be:	f100 0001 	add.w	r0, r0, #1
 80057c2:	d003      	beq.n	80057cc <__lo0bits+0x56>
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	4770      	bx	lr
 80057c8:	2000      	movs	r0, #0
 80057ca:	4770      	bx	lr
 80057cc:	2020      	movs	r0, #32
 80057ce:	4770      	bx	lr

080057d0 <__i2b>:
 80057d0:	b510      	push	{r4, lr}
 80057d2:	460c      	mov	r4, r1
 80057d4:	2101      	movs	r1, #1
 80057d6:	f7ff ff07 	bl	80055e8 <_Balloc>
 80057da:	4602      	mov	r2, r0
 80057dc:	b928      	cbnz	r0, 80057ea <__i2b+0x1a>
 80057de:	4b05      	ldr	r3, [pc, #20]	@ (80057f4 <__i2b+0x24>)
 80057e0:	4805      	ldr	r0, [pc, #20]	@ (80057f8 <__i2b+0x28>)
 80057e2:	f240 1145 	movw	r1, #325	@ 0x145
 80057e6:	f000 fe83 	bl	80064f0 <__assert_func>
 80057ea:	2301      	movs	r3, #1
 80057ec:	6144      	str	r4, [r0, #20]
 80057ee:	6103      	str	r3, [r0, #16]
 80057f0:	bd10      	pop	{r4, pc}
 80057f2:	bf00      	nop
 80057f4:	080069d8 	.word	0x080069d8
 80057f8:	080069e9 	.word	0x080069e9

080057fc <__multiply>:
 80057fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	4614      	mov	r4, r2
 8005802:	690a      	ldr	r2, [r1, #16]
 8005804:	6923      	ldr	r3, [r4, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	bfa8      	it	ge
 800580a:	4623      	movge	r3, r4
 800580c:	460f      	mov	r7, r1
 800580e:	bfa4      	itt	ge
 8005810:	460c      	movge	r4, r1
 8005812:	461f      	movge	r7, r3
 8005814:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005818:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800581c:	68a3      	ldr	r3, [r4, #8]
 800581e:	6861      	ldr	r1, [r4, #4]
 8005820:	eb0a 0609 	add.w	r6, sl, r9
 8005824:	42b3      	cmp	r3, r6
 8005826:	b085      	sub	sp, #20
 8005828:	bfb8      	it	lt
 800582a:	3101      	addlt	r1, #1
 800582c:	f7ff fedc 	bl	80055e8 <_Balloc>
 8005830:	b930      	cbnz	r0, 8005840 <__multiply+0x44>
 8005832:	4602      	mov	r2, r0
 8005834:	4b44      	ldr	r3, [pc, #272]	@ (8005948 <__multiply+0x14c>)
 8005836:	4845      	ldr	r0, [pc, #276]	@ (800594c <__multiply+0x150>)
 8005838:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800583c:	f000 fe58 	bl	80064f0 <__assert_func>
 8005840:	f100 0514 	add.w	r5, r0, #20
 8005844:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005848:	462b      	mov	r3, r5
 800584a:	2200      	movs	r2, #0
 800584c:	4543      	cmp	r3, r8
 800584e:	d321      	bcc.n	8005894 <__multiply+0x98>
 8005850:	f107 0114 	add.w	r1, r7, #20
 8005854:	f104 0214 	add.w	r2, r4, #20
 8005858:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800585c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005860:	9302      	str	r3, [sp, #8]
 8005862:	1b13      	subs	r3, r2, r4
 8005864:	3b15      	subs	r3, #21
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	3304      	adds	r3, #4
 800586c:	f104 0715 	add.w	r7, r4, #21
 8005870:	42ba      	cmp	r2, r7
 8005872:	bf38      	it	cc
 8005874:	2304      	movcc	r3, #4
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	9b02      	ldr	r3, [sp, #8]
 800587a:	9103      	str	r1, [sp, #12]
 800587c:	428b      	cmp	r3, r1
 800587e:	d80c      	bhi.n	800589a <__multiply+0x9e>
 8005880:	2e00      	cmp	r6, #0
 8005882:	dd03      	ble.n	800588c <__multiply+0x90>
 8005884:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005888:	2b00      	cmp	r3, #0
 800588a:	d05b      	beq.n	8005944 <__multiply+0x148>
 800588c:	6106      	str	r6, [r0, #16]
 800588e:	b005      	add	sp, #20
 8005890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005894:	f843 2b04 	str.w	r2, [r3], #4
 8005898:	e7d8      	b.n	800584c <__multiply+0x50>
 800589a:	f8b1 a000 	ldrh.w	sl, [r1]
 800589e:	f1ba 0f00 	cmp.w	sl, #0
 80058a2:	d024      	beq.n	80058ee <__multiply+0xf2>
 80058a4:	f104 0e14 	add.w	lr, r4, #20
 80058a8:	46a9      	mov	r9, r5
 80058aa:	f04f 0c00 	mov.w	ip, #0
 80058ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80058b2:	f8d9 3000 	ldr.w	r3, [r9]
 80058b6:	fa1f fb87 	uxth.w	fp, r7
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80058c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80058c4:	f8d9 7000 	ldr.w	r7, [r9]
 80058c8:	4463      	add	r3, ip
 80058ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80058ce:	fb0a c70b 	mla	r7, sl, fp, ip
 80058d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80058dc:	4572      	cmp	r2, lr
 80058de:	f849 3b04 	str.w	r3, [r9], #4
 80058e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80058e6:	d8e2      	bhi.n	80058ae <__multiply+0xb2>
 80058e8:	9b01      	ldr	r3, [sp, #4]
 80058ea:	f845 c003 	str.w	ip, [r5, r3]
 80058ee:	9b03      	ldr	r3, [sp, #12]
 80058f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80058f4:	3104      	adds	r1, #4
 80058f6:	f1b9 0f00 	cmp.w	r9, #0
 80058fa:	d021      	beq.n	8005940 <__multiply+0x144>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	f104 0c14 	add.w	ip, r4, #20
 8005902:	46ae      	mov	lr, r5
 8005904:	f04f 0a00 	mov.w	sl, #0
 8005908:	f8bc b000 	ldrh.w	fp, [ip]
 800590c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005910:	fb09 770b 	mla	r7, r9, fp, r7
 8005914:	4457      	add	r7, sl
 8005916:	b29b      	uxth	r3, r3
 8005918:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800591c:	f84e 3b04 	str.w	r3, [lr], #4
 8005920:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005924:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005928:	f8be 3000 	ldrh.w	r3, [lr]
 800592c:	fb09 330a 	mla	r3, r9, sl, r3
 8005930:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005934:	4562      	cmp	r2, ip
 8005936:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800593a:	d8e5      	bhi.n	8005908 <__multiply+0x10c>
 800593c:	9f01      	ldr	r7, [sp, #4]
 800593e:	51eb      	str	r3, [r5, r7]
 8005940:	3504      	adds	r5, #4
 8005942:	e799      	b.n	8005878 <__multiply+0x7c>
 8005944:	3e01      	subs	r6, #1
 8005946:	e79b      	b.n	8005880 <__multiply+0x84>
 8005948:	080069d8 	.word	0x080069d8
 800594c:	080069e9 	.word	0x080069e9

08005950 <__pow5mult>:
 8005950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005954:	4615      	mov	r5, r2
 8005956:	f012 0203 	ands.w	r2, r2, #3
 800595a:	4607      	mov	r7, r0
 800595c:	460e      	mov	r6, r1
 800595e:	d007      	beq.n	8005970 <__pow5mult+0x20>
 8005960:	4c25      	ldr	r4, [pc, #148]	@ (80059f8 <__pow5mult+0xa8>)
 8005962:	3a01      	subs	r2, #1
 8005964:	2300      	movs	r3, #0
 8005966:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800596a:	f7ff fe9f 	bl	80056ac <__multadd>
 800596e:	4606      	mov	r6, r0
 8005970:	10ad      	asrs	r5, r5, #2
 8005972:	d03d      	beq.n	80059f0 <__pow5mult+0xa0>
 8005974:	69fc      	ldr	r4, [r7, #28]
 8005976:	b97c      	cbnz	r4, 8005998 <__pow5mult+0x48>
 8005978:	2010      	movs	r0, #16
 800597a:	f7ff fd7f 	bl	800547c <malloc>
 800597e:	4602      	mov	r2, r0
 8005980:	61f8      	str	r0, [r7, #28]
 8005982:	b928      	cbnz	r0, 8005990 <__pow5mult+0x40>
 8005984:	4b1d      	ldr	r3, [pc, #116]	@ (80059fc <__pow5mult+0xac>)
 8005986:	481e      	ldr	r0, [pc, #120]	@ (8005a00 <__pow5mult+0xb0>)
 8005988:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800598c:	f000 fdb0 	bl	80064f0 <__assert_func>
 8005990:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005994:	6004      	str	r4, [r0, #0]
 8005996:	60c4      	str	r4, [r0, #12]
 8005998:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800599c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059a0:	b94c      	cbnz	r4, 80059b6 <__pow5mult+0x66>
 80059a2:	f240 2171 	movw	r1, #625	@ 0x271
 80059a6:	4638      	mov	r0, r7
 80059a8:	f7ff ff12 	bl	80057d0 <__i2b>
 80059ac:	2300      	movs	r3, #0
 80059ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80059b2:	4604      	mov	r4, r0
 80059b4:	6003      	str	r3, [r0, #0]
 80059b6:	f04f 0900 	mov.w	r9, #0
 80059ba:	07eb      	lsls	r3, r5, #31
 80059bc:	d50a      	bpl.n	80059d4 <__pow5mult+0x84>
 80059be:	4631      	mov	r1, r6
 80059c0:	4622      	mov	r2, r4
 80059c2:	4638      	mov	r0, r7
 80059c4:	f7ff ff1a 	bl	80057fc <__multiply>
 80059c8:	4631      	mov	r1, r6
 80059ca:	4680      	mov	r8, r0
 80059cc:	4638      	mov	r0, r7
 80059ce:	f7ff fe4b 	bl	8005668 <_Bfree>
 80059d2:	4646      	mov	r6, r8
 80059d4:	106d      	asrs	r5, r5, #1
 80059d6:	d00b      	beq.n	80059f0 <__pow5mult+0xa0>
 80059d8:	6820      	ldr	r0, [r4, #0]
 80059da:	b938      	cbnz	r0, 80059ec <__pow5mult+0x9c>
 80059dc:	4622      	mov	r2, r4
 80059de:	4621      	mov	r1, r4
 80059e0:	4638      	mov	r0, r7
 80059e2:	f7ff ff0b 	bl	80057fc <__multiply>
 80059e6:	6020      	str	r0, [r4, #0]
 80059e8:	f8c0 9000 	str.w	r9, [r0]
 80059ec:	4604      	mov	r4, r0
 80059ee:	e7e4      	b.n	80059ba <__pow5mult+0x6a>
 80059f0:	4630      	mov	r0, r6
 80059f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059f6:	bf00      	nop
 80059f8:	08006a44 	.word	0x08006a44
 80059fc:	08006969 	.word	0x08006969
 8005a00:	080069e9 	.word	0x080069e9

08005a04 <__lshift>:
 8005a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a08:	460c      	mov	r4, r1
 8005a0a:	6849      	ldr	r1, [r1, #4]
 8005a0c:	6923      	ldr	r3, [r4, #16]
 8005a0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a12:	68a3      	ldr	r3, [r4, #8]
 8005a14:	4607      	mov	r7, r0
 8005a16:	4691      	mov	r9, r2
 8005a18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a1c:	f108 0601 	add.w	r6, r8, #1
 8005a20:	42b3      	cmp	r3, r6
 8005a22:	db0b      	blt.n	8005a3c <__lshift+0x38>
 8005a24:	4638      	mov	r0, r7
 8005a26:	f7ff fddf 	bl	80055e8 <_Balloc>
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	b948      	cbnz	r0, 8005a42 <__lshift+0x3e>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	4b28      	ldr	r3, [pc, #160]	@ (8005ad4 <__lshift+0xd0>)
 8005a32:	4829      	ldr	r0, [pc, #164]	@ (8005ad8 <__lshift+0xd4>)
 8005a34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005a38:	f000 fd5a 	bl	80064f0 <__assert_func>
 8005a3c:	3101      	adds	r1, #1
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	e7ee      	b.n	8005a20 <__lshift+0x1c>
 8005a42:	2300      	movs	r3, #0
 8005a44:	f100 0114 	add.w	r1, r0, #20
 8005a48:	f100 0210 	add.w	r2, r0, #16
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	4553      	cmp	r3, sl
 8005a50:	db33      	blt.n	8005aba <__lshift+0xb6>
 8005a52:	6920      	ldr	r0, [r4, #16]
 8005a54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a58:	f104 0314 	add.w	r3, r4, #20
 8005a5c:	f019 091f 	ands.w	r9, r9, #31
 8005a60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a68:	d02b      	beq.n	8005ac2 <__lshift+0xbe>
 8005a6a:	f1c9 0e20 	rsb	lr, r9, #32
 8005a6e:	468a      	mov	sl, r1
 8005a70:	2200      	movs	r2, #0
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	fa00 f009 	lsl.w	r0, r0, r9
 8005a78:	4310      	orrs	r0, r2
 8005a7a:	f84a 0b04 	str.w	r0, [sl], #4
 8005a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a82:	459c      	cmp	ip, r3
 8005a84:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a88:	d8f3      	bhi.n	8005a72 <__lshift+0x6e>
 8005a8a:	ebac 0304 	sub.w	r3, ip, r4
 8005a8e:	3b15      	subs	r3, #21
 8005a90:	f023 0303 	bic.w	r3, r3, #3
 8005a94:	3304      	adds	r3, #4
 8005a96:	f104 0015 	add.w	r0, r4, #21
 8005a9a:	4584      	cmp	ip, r0
 8005a9c:	bf38      	it	cc
 8005a9e:	2304      	movcc	r3, #4
 8005aa0:	50ca      	str	r2, [r1, r3]
 8005aa2:	b10a      	cbz	r2, 8005aa8 <__lshift+0xa4>
 8005aa4:	f108 0602 	add.w	r6, r8, #2
 8005aa8:	3e01      	subs	r6, #1
 8005aaa:	4638      	mov	r0, r7
 8005aac:	612e      	str	r6, [r5, #16]
 8005aae:	4621      	mov	r1, r4
 8005ab0:	f7ff fdda 	bl	8005668 <_Bfree>
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aba:	f842 0f04 	str.w	r0, [r2, #4]!
 8005abe:	3301      	adds	r3, #1
 8005ac0:	e7c5      	b.n	8005a4e <__lshift+0x4a>
 8005ac2:	3904      	subs	r1, #4
 8005ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005acc:	459c      	cmp	ip, r3
 8005ace:	d8f9      	bhi.n	8005ac4 <__lshift+0xc0>
 8005ad0:	e7ea      	b.n	8005aa8 <__lshift+0xa4>
 8005ad2:	bf00      	nop
 8005ad4:	080069d8 	.word	0x080069d8
 8005ad8:	080069e9 	.word	0x080069e9

08005adc <__mcmp>:
 8005adc:	690a      	ldr	r2, [r1, #16]
 8005ade:	4603      	mov	r3, r0
 8005ae0:	6900      	ldr	r0, [r0, #16]
 8005ae2:	1a80      	subs	r0, r0, r2
 8005ae4:	b530      	push	{r4, r5, lr}
 8005ae6:	d10e      	bne.n	8005b06 <__mcmp+0x2a>
 8005ae8:	3314      	adds	r3, #20
 8005aea:	3114      	adds	r1, #20
 8005aec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005af0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005af4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005af8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005afc:	4295      	cmp	r5, r2
 8005afe:	d003      	beq.n	8005b08 <__mcmp+0x2c>
 8005b00:	d205      	bcs.n	8005b0e <__mcmp+0x32>
 8005b02:	f04f 30ff 	mov.w	r0, #4294967295
 8005b06:	bd30      	pop	{r4, r5, pc}
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d3f3      	bcc.n	8005af4 <__mcmp+0x18>
 8005b0c:	e7fb      	b.n	8005b06 <__mcmp+0x2a>
 8005b0e:	2001      	movs	r0, #1
 8005b10:	e7f9      	b.n	8005b06 <__mcmp+0x2a>
	...

08005b14 <__mdiff>:
 8005b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b18:	4689      	mov	r9, r1
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4648      	mov	r0, r9
 8005b20:	4614      	mov	r4, r2
 8005b22:	f7ff ffdb 	bl	8005adc <__mcmp>
 8005b26:	1e05      	subs	r5, r0, #0
 8005b28:	d112      	bne.n	8005b50 <__mdiff+0x3c>
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f7ff fd5b 	bl	80055e8 <_Balloc>
 8005b32:	4602      	mov	r2, r0
 8005b34:	b928      	cbnz	r0, 8005b42 <__mdiff+0x2e>
 8005b36:	4b3f      	ldr	r3, [pc, #252]	@ (8005c34 <__mdiff+0x120>)
 8005b38:	f240 2137 	movw	r1, #567	@ 0x237
 8005b3c:	483e      	ldr	r0, [pc, #248]	@ (8005c38 <__mdiff+0x124>)
 8005b3e:	f000 fcd7 	bl	80064f0 <__assert_func>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b48:	4610      	mov	r0, r2
 8005b4a:	b003      	add	sp, #12
 8005b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b50:	bfbc      	itt	lt
 8005b52:	464b      	movlt	r3, r9
 8005b54:	46a1      	movlt	r9, r4
 8005b56:	4630      	mov	r0, r6
 8005b58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b5c:	bfba      	itte	lt
 8005b5e:	461c      	movlt	r4, r3
 8005b60:	2501      	movlt	r5, #1
 8005b62:	2500      	movge	r5, #0
 8005b64:	f7ff fd40 	bl	80055e8 <_Balloc>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	b918      	cbnz	r0, 8005b74 <__mdiff+0x60>
 8005b6c:	4b31      	ldr	r3, [pc, #196]	@ (8005c34 <__mdiff+0x120>)
 8005b6e:	f240 2145 	movw	r1, #581	@ 0x245
 8005b72:	e7e3      	b.n	8005b3c <__mdiff+0x28>
 8005b74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005b78:	6926      	ldr	r6, [r4, #16]
 8005b7a:	60c5      	str	r5, [r0, #12]
 8005b7c:	f109 0310 	add.w	r3, r9, #16
 8005b80:	f109 0514 	add.w	r5, r9, #20
 8005b84:	f104 0e14 	add.w	lr, r4, #20
 8005b88:	f100 0b14 	add.w	fp, r0, #20
 8005b8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005b90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	46d9      	mov	r9, fp
 8005b98:	f04f 0c00 	mov.w	ip, #0
 8005b9c:	9b01      	ldr	r3, [sp, #4]
 8005b9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005ba2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	fa1f f38a 	uxth.w	r3, sl
 8005bac:	4619      	mov	r1, r3
 8005bae:	b283      	uxth	r3, r0
 8005bb0:	1acb      	subs	r3, r1, r3
 8005bb2:	0c00      	lsrs	r0, r0, #16
 8005bb4:	4463      	add	r3, ip
 8005bb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005bba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005bc4:	4576      	cmp	r6, lr
 8005bc6:	f849 3b04 	str.w	r3, [r9], #4
 8005bca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005bce:	d8e5      	bhi.n	8005b9c <__mdiff+0x88>
 8005bd0:	1b33      	subs	r3, r6, r4
 8005bd2:	3b15      	subs	r3, #21
 8005bd4:	f023 0303 	bic.w	r3, r3, #3
 8005bd8:	3415      	adds	r4, #21
 8005bda:	3304      	adds	r3, #4
 8005bdc:	42a6      	cmp	r6, r4
 8005bde:	bf38      	it	cc
 8005be0:	2304      	movcc	r3, #4
 8005be2:	441d      	add	r5, r3
 8005be4:	445b      	add	r3, fp
 8005be6:	461e      	mov	r6, r3
 8005be8:	462c      	mov	r4, r5
 8005bea:	4544      	cmp	r4, r8
 8005bec:	d30e      	bcc.n	8005c0c <__mdiff+0xf8>
 8005bee:	f108 0103 	add.w	r1, r8, #3
 8005bf2:	1b49      	subs	r1, r1, r5
 8005bf4:	f021 0103 	bic.w	r1, r1, #3
 8005bf8:	3d03      	subs	r5, #3
 8005bfa:	45a8      	cmp	r8, r5
 8005bfc:	bf38      	it	cc
 8005bfe:	2100      	movcc	r1, #0
 8005c00:	440b      	add	r3, r1
 8005c02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005c06:	b191      	cbz	r1, 8005c2e <__mdiff+0x11a>
 8005c08:	6117      	str	r7, [r2, #16]
 8005c0a:	e79d      	b.n	8005b48 <__mdiff+0x34>
 8005c0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005c10:	46e6      	mov	lr, ip
 8005c12:	0c08      	lsrs	r0, r1, #16
 8005c14:	fa1c fc81 	uxtah	ip, ip, r1
 8005c18:	4471      	add	r1, lr
 8005c1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005c1e:	b289      	uxth	r1, r1
 8005c20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005c24:	f846 1b04 	str.w	r1, [r6], #4
 8005c28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c2c:	e7dd      	b.n	8005bea <__mdiff+0xd6>
 8005c2e:	3f01      	subs	r7, #1
 8005c30:	e7e7      	b.n	8005c02 <__mdiff+0xee>
 8005c32:	bf00      	nop
 8005c34:	080069d8 	.word	0x080069d8
 8005c38:	080069e9 	.word	0x080069e9

08005c3c <__d2b>:
 8005c3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c40:	460f      	mov	r7, r1
 8005c42:	2101      	movs	r1, #1
 8005c44:	ec59 8b10 	vmov	r8, r9, d0
 8005c48:	4616      	mov	r6, r2
 8005c4a:	f7ff fccd 	bl	80055e8 <_Balloc>
 8005c4e:	4604      	mov	r4, r0
 8005c50:	b930      	cbnz	r0, 8005c60 <__d2b+0x24>
 8005c52:	4602      	mov	r2, r0
 8005c54:	4b23      	ldr	r3, [pc, #140]	@ (8005ce4 <__d2b+0xa8>)
 8005c56:	4824      	ldr	r0, [pc, #144]	@ (8005ce8 <__d2b+0xac>)
 8005c58:	f240 310f 	movw	r1, #783	@ 0x30f
 8005c5c:	f000 fc48 	bl	80064f0 <__assert_func>
 8005c60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005c64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c68:	b10d      	cbz	r5, 8005c6e <__d2b+0x32>
 8005c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	f1b8 0300 	subs.w	r3, r8, #0
 8005c74:	d023      	beq.n	8005cbe <__d2b+0x82>
 8005c76:	4668      	mov	r0, sp
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	f7ff fd7c 	bl	8005776 <__lo0bits>
 8005c7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c82:	b1d0      	cbz	r0, 8005cba <__d2b+0x7e>
 8005c84:	f1c0 0320 	rsb	r3, r0, #32
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	40c2      	lsrs	r2, r0
 8005c90:	6163      	str	r3, [r4, #20]
 8005c92:	9201      	str	r2, [sp, #4]
 8005c94:	9b01      	ldr	r3, [sp, #4]
 8005c96:	61a3      	str	r3, [r4, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2201      	moveq	r2, #1
 8005c9e:	2202      	movne	r2, #2
 8005ca0:	6122      	str	r2, [r4, #16]
 8005ca2:	b1a5      	cbz	r5, 8005cce <__d2b+0x92>
 8005ca4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ca8:	4405      	add	r5, r0
 8005caa:	603d      	str	r5, [r7, #0]
 8005cac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005cb0:	6030      	str	r0, [r6, #0]
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	b003      	add	sp, #12
 8005cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cba:	6161      	str	r1, [r4, #20]
 8005cbc:	e7ea      	b.n	8005c94 <__d2b+0x58>
 8005cbe:	a801      	add	r0, sp, #4
 8005cc0:	f7ff fd59 	bl	8005776 <__lo0bits>
 8005cc4:	9b01      	ldr	r3, [sp, #4]
 8005cc6:	6163      	str	r3, [r4, #20]
 8005cc8:	3020      	adds	r0, #32
 8005cca:	2201      	movs	r2, #1
 8005ccc:	e7e8      	b.n	8005ca0 <__d2b+0x64>
 8005cce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005cd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005cd6:	6038      	str	r0, [r7, #0]
 8005cd8:	6918      	ldr	r0, [r3, #16]
 8005cda:	f7ff fd2d 	bl	8005738 <__hi0bits>
 8005cde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ce2:	e7e5      	b.n	8005cb0 <__d2b+0x74>
 8005ce4:	080069d8 	.word	0x080069d8
 8005ce8:	080069e9 	.word	0x080069e9

08005cec <__ssputs_r>:
 8005cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf0:	688e      	ldr	r6, [r1, #8]
 8005cf2:	461f      	mov	r7, r3
 8005cf4:	42be      	cmp	r6, r7
 8005cf6:	680b      	ldr	r3, [r1, #0]
 8005cf8:	4682      	mov	sl, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	4690      	mov	r8, r2
 8005cfe:	d82d      	bhi.n	8005d5c <__ssputs_r+0x70>
 8005d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d08:	d026      	beq.n	8005d58 <__ssputs_r+0x6c>
 8005d0a:	6965      	ldr	r5, [r4, #20]
 8005d0c:	6909      	ldr	r1, [r1, #16]
 8005d0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d12:	eba3 0901 	sub.w	r9, r3, r1
 8005d16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d1a:	1c7b      	adds	r3, r7, #1
 8005d1c:	444b      	add	r3, r9
 8005d1e:	106d      	asrs	r5, r5, #1
 8005d20:	429d      	cmp	r5, r3
 8005d22:	bf38      	it	cc
 8005d24:	461d      	movcc	r5, r3
 8005d26:	0553      	lsls	r3, r2, #21
 8005d28:	d527      	bpl.n	8005d7a <__ssputs_r+0x8e>
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	f7ff fbd0 	bl	80054d0 <_malloc_r>
 8005d30:	4606      	mov	r6, r0
 8005d32:	b360      	cbz	r0, 8005d8e <__ssputs_r+0xa2>
 8005d34:	6921      	ldr	r1, [r4, #16]
 8005d36:	464a      	mov	r2, r9
 8005d38:	f000 fbcc 	bl	80064d4 <memcpy>
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d46:	81a3      	strh	r3, [r4, #12]
 8005d48:	6126      	str	r6, [r4, #16]
 8005d4a:	6165      	str	r5, [r4, #20]
 8005d4c:	444e      	add	r6, r9
 8005d4e:	eba5 0509 	sub.w	r5, r5, r9
 8005d52:	6026      	str	r6, [r4, #0]
 8005d54:	60a5      	str	r5, [r4, #8]
 8005d56:	463e      	mov	r6, r7
 8005d58:	42be      	cmp	r6, r7
 8005d5a:	d900      	bls.n	8005d5e <__ssputs_r+0x72>
 8005d5c:	463e      	mov	r6, r7
 8005d5e:	6820      	ldr	r0, [r4, #0]
 8005d60:	4632      	mov	r2, r6
 8005d62:	4641      	mov	r1, r8
 8005d64:	f000 fb6a 	bl	800643c <memmove>
 8005d68:	68a3      	ldr	r3, [r4, #8]
 8005d6a:	1b9b      	subs	r3, r3, r6
 8005d6c:	60a3      	str	r3, [r4, #8]
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	4433      	add	r3, r6
 8005d72:	6023      	str	r3, [r4, #0]
 8005d74:	2000      	movs	r0, #0
 8005d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7a:	462a      	mov	r2, r5
 8005d7c:	f000 fbfc 	bl	8006578 <_realloc_r>
 8005d80:	4606      	mov	r6, r0
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d1e0      	bne.n	8005d48 <__ssputs_r+0x5c>
 8005d86:	6921      	ldr	r1, [r4, #16]
 8005d88:	4650      	mov	r0, sl
 8005d8a:	f7ff fb2d 	bl	80053e8 <_free_r>
 8005d8e:	230c      	movs	r3, #12
 8005d90:	f8ca 3000 	str.w	r3, [sl]
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d9a:	81a3      	strh	r3, [r4, #12]
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	e7e9      	b.n	8005d76 <__ssputs_r+0x8a>
	...

08005da4 <_svfiprintf_r>:
 8005da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da8:	4698      	mov	r8, r3
 8005daa:	898b      	ldrh	r3, [r1, #12]
 8005dac:	061b      	lsls	r3, r3, #24
 8005dae:	b09d      	sub	sp, #116	@ 0x74
 8005db0:	4607      	mov	r7, r0
 8005db2:	460d      	mov	r5, r1
 8005db4:	4614      	mov	r4, r2
 8005db6:	d510      	bpl.n	8005dda <_svfiprintf_r+0x36>
 8005db8:	690b      	ldr	r3, [r1, #16]
 8005dba:	b973      	cbnz	r3, 8005dda <_svfiprintf_r+0x36>
 8005dbc:	2140      	movs	r1, #64	@ 0x40
 8005dbe:	f7ff fb87 	bl	80054d0 <_malloc_r>
 8005dc2:	6028      	str	r0, [r5, #0]
 8005dc4:	6128      	str	r0, [r5, #16]
 8005dc6:	b930      	cbnz	r0, 8005dd6 <_svfiprintf_r+0x32>
 8005dc8:	230c      	movs	r3, #12
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	b01d      	add	sp, #116	@ 0x74
 8005dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd6:	2340      	movs	r3, #64	@ 0x40
 8005dd8:	616b      	str	r3, [r5, #20]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dde:	2320      	movs	r3, #32
 8005de0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005de8:	2330      	movs	r3, #48	@ 0x30
 8005dea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f88 <_svfiprintf_r+0x1e4>
 8005dee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005df2:	f04f 0901 	mov.w	r9, #1
 8005df6:	4623      	mov	r3, r4
 8005df8:	469a      	mov	sl, r3
 8005dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dfe:	b10a      	cbz	r2, 8005e04 <_svfiprintf_r+0x60>
 8005e00:	2a25      	cmp	r2, #37	@ 0x25
 8005e02:	d1f9      	bne.n	8005df8 <_svfiprintf_r+0x54>
 8005e04:	ebba 0b04 	subs.w	fp, sl, r4
 8005e08:	d00b      	beq.n	8005e22 <_svfiprintf_r+0x7e>
 8005e0a:	465b      	mov	r3, fp
 8005e0c:	4622      	mov	r2, r4
 8005e0e:	4629      	mov	r1, r5
 8005e10:	4638      	mov	r0, r7
 8005e12:	f7ff ff6b 	bl	8005cec <__ssputs_r>
 8005e16:	3001      	adds	r0, #1
 8005e18:	f000 80a7 	beq.w	8005f6a <_svfiprintf_r+0x1c6>
 8005e1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e1e:	445a      	add	r2, fp
 8005e20:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e22:	f89a 3000 	ldrb.w	r3, [sl]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 809f 	beq.w	8005f6a <_svfiprintf_r+0x1c6>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e36:	f10a 0a01 	add.w	sl, sl, #1
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	9307      	str	r3, [sp, #28]
 8005e3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e42:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e44:	4654      	mov	r4, sl
 8005e46:	2205      	movs	r2, #5
 8005e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4c:	484e      	ldr	r0, [pc, #312]	@ (8005f88 <_svfiprintf_r+0x1e4>)
 8005e4e:	f7fa f9bf 	bl	80001d0 <memchr>
 8005e52:	9a04      	ldr	r2, [sp, #16]
 8005e54:	b9d8      	cbnz	r0, 8005e8e <_svfiprintf_r+0xea>
 8005e56:	06d0      	lsls	r0, r2, #27
 8005e58:	bf44      	itt	mi
 8005e5a:	2320      	movmi	r3, #32
 8005e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e60:	0711      	lsls	r1, r2, #28
 8005e62:	bf44      	itt	mi
 8005e64:	232b      	movmi	r3, #43	@ 0x2b
 8005e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e70:	d015      	beq.n	8005e9e <_svfiprintf_r+0xfa>
 8005e72:	9a07      	ldr	r2, [sp, #28]
 8005e74:	4654      	mov	r4, sl
 8005e76:	2000      	movs	r0, #0
 8005e78:	f04f 0c0a 	mov.w	ip, #10
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e82:	3b30      	subs	r3, #48	@ 0x30
 8005e84:	2b09      	cmp	r3, #9
 8005e86:	d94b      	bls.n	8005f20 <_svfiprintf_r+0x17c>
 8005e88:	b1b0      	cbz	r0, 8005eb8 <_svfiprintf_r+0x114>
 8005e8a:	9207      	str	r2, [sp, #28]
 8005e8c:	e014      	b.n	8005eb8 <_svfiprintf_r+0x114>
 8005e8e:	eba0 0308 	sub.w	r3, r0, r8
 8005e92:	fa09 f303 	lsl.w	r3, r9, r3
 8005e96:	4313      	orrs	r3, r2
 8005e98:	9304      	str	r3, [sp, #16]
 8005e9a:	46a2      	mov	sl, r4
 8005e9c:	e7d2      	b.n	8005e44 <_svfiprintf_r+0xa0>
 8005e9e:	9b03      	ldr	r3, [sp, #12]
 8005ea0:	1d19      	adds	r1, r3, #4
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	9103      	str	r1, [sp, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	bfbb      	ittet	lt
 8005eaa:	425b      	neglt	r3, r3
 8005eac:	f042 0202 	orrlt.w	r2, r2, #2
 8005eb0:	9307      	strge	r3, [sp, #28]
 8005eb2:	9307      	strlt	r3, [sp, #28]
 8005eb4:	bfb8      	it	lt
 8005eb6:	9204      	strlt	r2, [sp, #16]
 8005eb8:	7823      	ldrb	r3, [r4, #0]
 8005eba:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ebc:	d10a      	bne.n	8005ed4 <_svfiprintf_r+0x130>
 8005ebe:	7863      	ldrb	r3, [r4, #1]
 8005ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ec2:	d132      	bne.n	8005f2a <_svfiprintf_r+0x186>
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	1d1a      	adds	r2, r3, #4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	9203      	str	r2, [sp, #12]
 8005ecc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ed0:	3402      	adds	r4, #2
 8005ed2:	9305      	str	r3, [sp, #20]
 8005ed4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f98 <_svfiprintf_r+0x1f4>
 8005ed8:	7821      	ldrb	r1, [r4, #0]
 8005eda:	2203      	movs	r2, #3
 8005edc:	4650      	mov	r0, sl
 8005ede:	f7fa f977 	bl	80001d0 <memchr>
 8005ee2:	b138      	cbz	r0, 8005ef4 <_svfiprintf_r+0x150>
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	eba0 000a 	sub.w	r0, r0, sl
 8005eea:	2240      	movs	r2, #64	@ 0x40
 8005eec:	4082      	lsls	r2, r0
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	3401      	adds	r4, #1
 8005ef2:	9304      	str	r3, [sp, #16]
 8005ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef8:	4824      	ldr	r0, [pc, #144]	@ (8005f8c <_svfiprintf_r+0x1e8>)
 8005efa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005efe:	2206      	movs	r2, #6
 8005f00:	f7fa f966 	bl	80001d0 <memchr>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d036      	beq.n	8005f76 <_svfiprintf_r+0x1d2>
 8005f08:	4b21      	ldr	r3, [pc, #132]	@ (8005f90 <_svfiprintf_r+0x1ec>)
 8005f0a:	bb1b      	cbnz	r3, 8005f54 <_svfiprintf_r+0x1b0>
 8005f0c:	9b03      	ldr	r3, [sp, #12]
 8005f0e:	3307      	adds	r3, #7
 8005f10:	f023 0307 	bic.w	r3, r3, #7
 8005f14:	3308      	adds	r3, #8
 8005f16:	9303      	str	r3, [sp, #12]
 8005f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f1a:	4433      	add	r3, r6
 8005f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f1e:	e76a      	b.n	8005df6 <_svfiprintf_r+0x52>
 8005f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f24:	460c      	mov	r4, r1
 8005f26:	2001      	movs	r0, #1
 8005f28:	e7a8      	b.n	8005e7c <_svfiprintf_r+0xd8>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	3401      	adds	r4, #1
 8005f2e:	9305      	str	r3, [sp, #20]
 8005f30:	4619      	mov	r1, r3
 8005f32:	f04f 0c0a 	mov.w	ip, #10
 8005f36:	4620      	mov	r0, r4
 8005f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f3c:	3a30      	subs	r2, #48	@ 0x30
 8005f3e:	2a09      	cmp	r2, #9
 8005f40:	d903      	bls.n	8005f4a <_svfiprintf_r+0x1a6>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0c6      	beq.n	8005ed4 <_svfiprintf_r+0x130>
 8005f46:	9105      	str	r1, [sp, #20]
 8005f48:	e7c4      	b.n	8005ed4 <_svfiprintf_r+0x130>
 8005f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f4e:	4604      	mov	r4, r0
 8005f50:	2301      	movs	r3, #1
 8005f52:	e7f0      	b.n	8005f36 <_svfiprintf_r+0x192>
 8005f54:	ab03      	add	r3, sp, #12
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005f94 <_svfiprintf_r+0x1f0>)
 8005f5c:	a904      	add	r1, sp, #16
 8005f5e:	4638      	mov	r0, r7
 8005f60:	f7fd fd68 	bl	8003a34 <_printf_float>
 8005f64:	1c42      	adds	r2, r0, #1
 8005f66:	4606      	mov	r6, r0
 8005f68:	d1d6      	bne.n	8005f18 <_svfiprintf_r+0x174>
 8005f6a:	89ab      	ldrh	r3, [r5, #12]
 8005f6c:	065b      	lsls	r3, r3, #25
 8005f6e:	f53f af2d 	bmi.w	8005dcc <_svfiprintf_r+0x28>
 8005f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f74:	e72c      	b.n	8005dd0 <_svfiprintf_r+0x2c>
 8005f76:	ab03      	add	r3, sp, #12
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	462a      	mov	r2, r5
 8005f7c:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <_svfiprintf_r+0x1f0>)
 8005f7e:	a904      	add	r1, sp, #16
 8005f80:	4638      	mov	r0, r7
 8005f82:	f7fd ffef 	bl	8003f64 <_printf_i>
 8005f86:	e7ed      	b.n	8005f64 <_svfiprintf_r+0x1c0>
 8005f88:	08006b40 	.word	0x08006b40
 8005f8c:	08006b4a 	.word	0x08006b4a
 8005f90:	08003a35 	.word	0x08003a35
 8005f94:	08005ced 	.word	0x08005ced
 8005f98:	08006b46 	.word	0x08006b46

08005f9c <__sfputc_r>:
 8005f9c:	6893      	ldr	r3, [r2, #8]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	b410      	push	{r4}
 8005fa4:	6093      	str	r3, [r2, #8]
 8005fa6:	da08      	bge.n	8005fba <__sfputc_r+0x1e>
 8005fa8:	6994      	ldr	r4, [r2, #24]
 8005faa:	42a3      	cmp	r3, r4
 8005fac:	db01      	blt.n	8005fb2 <__sfputc_r+0x16>
 8005fae:	290a      	cmp	r1, #10
 8005fb0:	d103      	bne.n	8005fba <__sfputc_r+0x1e>
 8005fb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fb6:	f7fe ba9e 	b.w	80044f6 <__swbuf_r>
 8005fba:	6813      	ldr	r3, [r2, #0]
 8005fbc:	1c58      	adds	r0, r3, #1
 8005fbe:	6010      	str	r0, [r2, #0]
 8005fc0:	7019      	strb	r1, [r3, #0]
 8005fc2:	4608      	mov	r0, r1
 8005fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <__sfputs_r>:
 8005fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fcc:	4606      	mov	r6, r0
 8005fce:	460f      	mov	r7, r1
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	18d5      	adds	r5, r2, r3
 8005fd4:	42ac      	cmp	r4, r5
 8005fd6:	d101      	bne.n	8005fdc <__sfputs_r+0x12>
 8005fd8:	2000      	movs	r0, #0
 8005fda:	e007      	b.n	8005fec <__sfputs_r+0x22>
 8005fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe0:	463a      	mov	r2, r7
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f7ff ffda 	bl	8005f9c <__sfputc_r>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d1f3      	bne.n	8005fd4 <__sfputs_r+0xa>
 8005fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ff0 <_vfiprintf_r>:
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	460d      	mov	r5, r1
 8005ff6:	b09d      	sub	sp, #116	@ 0x74
 8005ff8:	4614      	mov	r4, r2
 8005ffa:	4698      	mov	r8, r3
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	b118      	cbz	r0, 8006008 <_vfiprintf_r+0x18>
 8006000:	6a03      	ldr	r3, [r0, #32]
 8006002:	b90b      	cbnz	r3, 8006008 <_vfiprintf_r+0x18>
 8006004:	f7fe f95a 	bl	80042bc <__sinit>
 8006008:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800600a:	07d9      	lsls	r1, r3, #31
 800600c:	d405      	bmi.n	800601a <_vfiprintf_r+0x2a>
 800600e:	89ab      	ldrh	r3, [r5, #12]
 8006010:	059a      	lsls	r2, r3, #22
 8006012:	d402      	bmi.n	800601a <_vfiprintf_r+0x2a>
 8006014:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006016:	f7fe fb96 	bl	8004746 <__retarget_lock_acquire_recursive>
 800601a:	89ab      	ldrh	r3, [r5, #12]
 800601c:	071b      	lsls	r3, r3, #28
 800601e:	d501      	bpl.n	8006024 <_vfiprintf_r+0x34>
 8006020:	692b      	ldr	r3, [r5, #16]
 8006022:	b99b      	cbnz	r3, 800604c <_vfiprintf_r+0x5c>
 8006024:	4629      	mov	r1, r5
 8006026:	4630      	mov	r0, r6
 8006028:	f7fe faa4 	bl	8004574 <__swsetup_r>
 800602c:	b170      	cbz	r0, 800604c <_vfiprintf_r+0x5c>
 800602e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006030:	07dc      	lsls	r4, r3, #31
 8006032:	d504      	bpl.n	800603e <_vfiprintf_r+0x4e>
 8006034:	f04f 30ff 	mov.w	r0, #4294967295
 8006038:	b01d      	add	sp, #116	@ 0x74
 800603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603e:	89ab      	ldrh	r3, [r5, #12]
 8006040:	0598      	lsls	r0, r3, #22
 8006042:	d4f7      	bmi.n	8006034 <_vfiprintf_r+0x44>
 8006044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006046:	f7fe fb7f 	bl	8004748 <__retarget_lock_release_recursive>
 800604a:	e7f3      	b.n	8006034 <_vfiprintf_r+0x44>
 800604c:	2300      	movs	r3, #0
 800604e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006050:	2320      	movs	r3, #32
 8006052:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006056:	f8cd 800c 	str.w	r8, [sp, #12]
 800605a:	2330      	movs	r3, #48	@ 0x30
 800605c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800620c <_vfiprintf_r+0x21c>
 8006060:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006064:	f04f 0901 	mov.w	r9, #1
 8006068:	4623      	mov	r3, r4
 800606a:	469a      	mov	sl, r3
 800606c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006070:	b10a      	cbz	r2, 8006076 <_vfiprintf_r+0x86>
 8006072:	2a25      	cmp	r2, #37	@ 0x25
 8006074:	d1f9      	bne.n	800606a <_vfiprintf_r+0x7a>
 8006076:	ebba 0b04 	subs.w	fp, sl, r4
 800607a:	d00b      	beq.n	8006094 <_vfiprintf_r+0xa4>
 800607c:	465b      	mov	r3, fp
 800607e:	4622      	mov	r2, r4
 8006080:	4629      	mov	r1, r5
 8006082:	4630      	mov	r0, r6
 8006084:	f7ff ffa1 	bl	8005fca <__sfputs_r>
 8006088:	3001      	adds	r0, #1
 800608a:	f000 80a7 	beq.w	80061dc <_vfiprintf_r+0x1ec>
 800608e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006090:	445a      	add	r2, fp
 8006092:	9209      	str	r2, [sp, #36]	@ 0x24
 8006094:	f89a 3000 	ldrb.w	r3, [sl]
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 809f 	beq.w	80061dc <_vfiprintf_r+0x1ec>
 800609e:	2300      	movs	r3, #0
 80060a0:	f04f 32ff 	mov.w	r2, #4294967295
 80060a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060a8:	f10a 0a01 	add.w	sl, sl, #1
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	9307      	str	r3, [sp, #28]
 80060b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80060b6:	4654      	mov	r4, sl
 80060b8:	2205      	movs	r2, #5
 80060ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060be:	4853      	ldr	r0, [pc, #332]	@ (800620c <_vfiprintf_r+0x21c>)
 80060c0:	f7fa f886 	bl	80001d0 <memchr>
 80060c4:	9a04      	ldr	r2, [sp, #16]
 80060c6:	b9d8      	cbnz	r0, 8006100 <_vfiprintf_r+0x110>
 80060c8:	06d1      	lsls	r1, r2, #27
 80060ca:	bf44      	itt	mi
 80060cc:	2320      	movmi	r3, #32
 80060ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060d2:	0713      	lsls	r3, r2, #28
 80060d4:	bf44      	itt	mi
 80060d6:	232b      	movmi	r3, #43	@ 0x2b
 80060d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060dc:	f89a 3000 	ldrb.w	r3, [sl]
 80060e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80060e2:	d015      	beq.n	8006110 <_vfiprintf_r+0x120>
 80060e4:	9a07      	ldr	r2, [sp, #28]
 80060e6:	4654      	mov	r4, sl
 80060e8:	2000      	movs	r0, #0
 80060ea:	f04f 0c0a 	mov.w	ip, #10
 80060ee:	4621      	mov	r1, r4
 80060f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060f4:	3b30      	subs	r3, #48	@ 0x30
 80060f6:	2b09      	cmp	r3, #9
 80060f8:	d94b      	bls.n	8006192 <_vfiprintf_r+0x1a2>
 80060fa:	b1b0      	cbz	r0, 800612a <_vfiprintf_r+0x13a>
 80060fc:	9207      	str	r2, [sp, #28]
 80060fe:	e014      	b.n	800612a <_vfiprintf_r+0x13a>
 8006100:	eba0 0308 	sub.w	r3, r0, r8
 8006104:	fa09 f303 	lsl.w	r3, r9, r3
 8006108:	4313      	orrs	r3, r2
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	46a2      	mov	sl, r4
 800610e:	e7d2      	b.n	80060b6 <_vfiprintf_r+0xc6>
 8006110:	9b03      	ldr	r3, [sp, #12]
 8006112:	1d19      	adds	r1, r3, #4
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	9103      	str	r1, [sp, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	bfbb      	ittet	lt
 800611c:	425b      	neglt	r3, r3
 800611e:	f042 0202 	orrlt.w	r2, r2, #2
 8006122:	9307      	strge	r3, [sp, #28]
 8006124:	9307      	strlt	r3, [sp, #28]
 8006126:	bfb8      	it	lt
 8006128:	9204      	strlt	r2, [sp, #16]
 800612a:	7823      	ldrb	r3, [r4, #0]
 800612c:	2b2e      	cmp	r3, #46	@ 0x2e
 800612e:	d10a      	bne.n	8006146 <_vfiprintf_r+0x156>
 8006130:	7863      	ldrb	r3, [r4, #1]
 8006132:	2b2a      	cmp	r3, #42	@ 0x2a
 8006134:	d132      	bne.n	800619c <_vfiprintf_r+0x1ac>
 8006136:	9b03      	ldr	r3, [sp, #12]
 8006138:	1d1a      	adds	r2, r3, #4
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	9203      	str	r2, [sp, #12]
 800613e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006142:	3402      	adds	r4, #2
 8006144:	9305      	str	r3, [sp, #20]
 8006146:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800621c <_vfiprintf_r+0x22c>
 800614a:	7821      	ldrb	r1, [r4, #0]
 800614c:	2203      	movs	r2, #3
 800614e:	4650      	mov	r0, sl
 8006150:	f7fa f83e 	bl	80001d0 <memchr>
 8006154:	b138      	cbz	r0, 8006166 <_vfiprintf_r+0x176>
 8006156:	9b04      	ldr	r3, [sp, #16]
 8006158:	eba0 000a 	sub.w	r0, r0, sl
 800615c:	2240      	movs	r2, #64	@ 0x40
 800615e:	4082      	lsls	r2, r0
 8006160:	4313      	orrs	r3, r2
 8006162:	3401      	adds	r4, #1
 8006164:	9304      	str	r3, [sp, #16]
 8006166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800616a:	4829      	ldr	r0, [pc, #164]	@ (8006210 <_vfiprintf_r+0x220>)
 800616c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006170:	2206      	movs	r2, #6
 8006172:	f7fa f82d 	bl	80001d0 <memchr>
 8006176:	2800      	cmp	r0, #0
 8006178:	d03f      	beq.n	80061fa <_vfiprintf_r+0x20a>
 800617a:	4b26      	ldr	r3, [pc, #152]	@ (8006214 <_vfiprintf_r+0x224>)
 800617c:	bb1b      	cbnz	r3, 80061c6 <_vfiprintf_r+0x1d6>
 800617e:	9b03      	ldr	r3, [sp, #12]
 8006180:	3307      	adds	r3, #7
 8006182:	f023 0307 	bic.w	r3, r3, #7
 8006186:	3308      	adds	r3, #8
 8006188:	9303      	str	r3, [sp, #12]
 800618a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800618c:	443b      	add	r3, r7
 800618e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006190:	e76a      	b.n	8006068 <_vfiprintf_r+0x78>
 8006192:	fb0c 3202 	mla	r2, ip, r2, r3
 8006196:	460c      	mov	r4, r1
 8006198:	2001      	movs	r0, #1
 800619a:	e7a8      	b.n	80060ee <_vfiprintf_r+0xfe>
 800619c:	2300      	movs	r3, #0
 800619e:	3401      	adds	r4, #1
 80061a0:	9305      	str	r3, [sp, #20]
 80061a2:	4619      	mov	r1, r3
 80061a4:	f04f 0c0a 	mov.w	ip, #10
 80061a8:	4620      	mov	r0, r4
 80061aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061ae:	3a30      	subs	r2, #48	@ 0x30
 80061b0:	2a09      	cmp	r2, #9
 80061b2:	d903      	bls.n	80061bc <_vfiprintf_r+0x1cc>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0c6      	beq.n	8006146 <_vfiprintf_r+0x156>
 80061b8:	9105      	str	r1, [sp, #20]
 80061ba:	e7c4      	b.n	8006146 <_vfiprintf_r+0x156>
 80061bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80061c0:	4604      	mov	r4, r0
 80061c2:	2301      	movs	r3, #1
 80061c4:	e7f0      	b.n	80061a8 <_vfiprintf_r+0x1b8>
 80061c6:	ab03      	add	r3, sp, #12
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	462a      	mov	r2, r5
 80061cc:	4b12      	ldr	r3, [pc, #72]	@ (8006218 <_vfiprintf_r+0x228>)
 80061ce:	a904      	add	r1, sp, #16
 80061d0:	4630      	mov	r0, r6
 80061d2:	f7fd fc2f 	bl	8003a34 <_printf_float>
 80061d6:	4607      	mov	r7, r0
 80061d8:	1c78      	adds	r0, r7, #1
 80061da:	d1d6      	bne.n	800618a <_vfiprintf_r+0x19a>
 80061dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061de:	07d9      	lsls	r1, r3, #31
 80061e0:	d405      	bmi.n	80061ee <_vfiprintf_r+0x1fe>
 80061e2:	89ab      	ldrh	r3, [r5, #12]
 80061e4:	059a      	lsls	r2, r3, #22
 80061e6:	d402      	bmi.n	80061ee <_vfiprintf_r+0x1fe>
 80061e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061ea:	f7fe faad 	bl	8004748 <__retarget_lock_release_recursive>
 80061ee:	89ab      	ldrh	r3, [r5, #12]
 80061f0:	065b      	lsls	r3, r3, #25
 80061f2:	f53f af1f 	bmi.w	8006034 <_vfiprintf_r+0x44>
 80061f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061f8:	e71e      	b.n	8006038 <_vfiprintf_r+0x48>
 80061fa:	ab03      	add	r3, sp, #12
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	462a      	mov	r2, r5
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <_vfiprintf_r+0x228>)
 8006202:	a904      	add	r1, sp, #16
 8006204:	4630      	mov	r0, r6
 8006206:	f7fd fead 	bl	8003f64 <_printf_i>
 800620a:	e7e4      	b.n	80061d6 <_vfiprintf_r+0x1e6>
 800620c:	08006b40 	.word	0x08006b40
 8006210:	08006b4a 	.word	0x08006b4a
 8006214:	08003a35 	.word	0x08003a35
 8006218:	08005fcb 	.word	0x08005fcb
 800621c:	08006b46 	.word	0x08006b46

08006220 <__sflush_r>:
 8006220:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006228:	0716      	lsls	r6, r2, #28
 800622a:	4605      	mov	r5, r0
 800622c:	460c      	mov	r4, r1
 800622e:	d454      	bmi.n	80062da <__sflush_r+0xba>
 8006230:	684b      	ldr	r3, [r1, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	dc02      	bgt.n	800623c <__sflush_r+0x1c>
 8006236:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	dd48      	ble.n	80062ce <__sflush_r+0xae>
 800623c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800623e:	2e00      	cmp	r6, #0
 8006240:	d045      	beq.n	80062ce <__sflush_r+0xae>
 8006242:	2300      	movs	r3, #0
 8006244:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006248:	682f      	ldr	r7, [r5, #0]
 800624a:	6a21      	ldr	r1, [r4, #32]
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	d030      	beq.n	80062b2 <__sflush_r+0x92>
 8006250:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	0759      	lsls	r1, r3, #29
 8006256:	d505      	bpl.n	8006264 <__sflush_r+0x44>
 8006258:	6863      	ldr	r3, [r4, #4]
 800625a:	1ad2      	subs	r2, r2, r3
 800625c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800625e:	b10b      	cbz	r3, 8006264 <__sflush_r+0x44>
 8006260:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006262:	1ad2      	subs	r2, r2, r3
 8006264:	2300      	movs	r3, #0
 8006266:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006268:	6a21      	ldr	r1, [r4, #32]
 800626a:	4628      	mov	r0, r5
 800626c:	47b0      	blx	r6
 800626e:	1c43      	adds	r3, r0, #1
 8006270:	89a3      	ldrh	r3, [r4, #12]
 8006272:	d106      	bne.n	8006282 <__sflush_r+0x62>
 8006274:	6829      	ldr	r1, [r5, #0]
 8006276:	291d      	cmp	r1, #29
 8006278:	d82b      	bhi.n	80062d2 <__sflush_r+0xb2>
 800627a:	4a2a      	ldr	r2, [pc, #168]	@ (8006324 <__sflush_r+0x104>)
 800627c:	410a      	asrs	r2, r1
 800627e:	07d6      	lsls	r6, r2, #31
 8006280:	d427      	bmi.n	80062d2 <__sflush_r+0xb2>
 8006282:	2200      	movs	r2, #0
 8006284:	6062      	str	r2, [r4, #4]
 8006286:	04d9      	lsls	r1, r3, #19
 8006288:	6922      	ldr	r2, [r4, #16]
 800628a:	6022      	str	r2, [r4, #0]
 800628c:	d504      	bpl.n	8006298 <__sflush_r+0x78>
 800628e:	1c42      	adds	r2, r0, #1
 8006290:	d101      	bne.n	8006296 <__sflush_r+0x76>
 8006292:	682b      	ldr	r3, [r5, #0]
 8006294:	b903      	cbnz	r3, 8006298 <__sflush_r+0x78>
 8006296:	6560      	str	r0, [r4, #84]	@ 0x54
 8006298:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800629a:	602f      	str	r7, [r5, #0]
 800629c:	b1b9      	cbz	r1, 80062ce <__sflush_r+0xae>
 800629e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062a2:	4299      	cmp	r1, r3
 80062a4:	d002      	beq.n	80062ac <__sflush_r+0x8c>
 80062a6:	4628      	mov	r0, r5
 80062a8:	f7ff f89e 	bl	80053e8 <_free_r>
 80062ac:	2300      	movs	r3, #0
 80062ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80062b0:	e00d      	b.n	80062ce <__sflush_r+0xae>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b0      	blx	r6
 80062b8:	4602      	mov	r2, r0
 80062ba:	1c50      	adds	r0, r2, #1
 80062bc:	d1c9      	bne.n	8006252 <__sflush_r+0x32>
 80062be:	682b      	ldr	r3, [r5, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0c6      	beq.n	8006252 <__sflush_r+0x32>
 80062c4:	2b1d      	cmp	r3, #29
 80062c6:	d001      	beq.n	80062cc <__sflush_r+0xac>
 80062c8:	2b16      	cmp	r3, #22
 80062ca:	d11e      	bne.n	800630a <__sflush_r+0xea>
 80062cc:	602f      	str	r7, [r5, #0]
 80062ce:	2000      	movs	r0, #0
 80062d0:	e022      	b.n	8006318 <__sflush_r+0xf8>
 80062d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062d6:	b21b      	sxth	r3, r3
 80062d8:	e01b      	b.n	8006312 <__sflush_r+0xf2>
 80062da:	690f      	ldr	r7, [r1, #16]
 80062dc:	2f00      	cmp	r7, #0
 80062de:	d0f6      	beq.n	80062ce <__sflush_r+0xae>
 80062e0:	0793      	lsls	r3, r2, #30
 80062e2:	680e      	ldr	r6, [r1, #0]
 80062e4:	bf08      	it	eq
 80062e6:	694b      	ldreq	r3, [r1, #20]
 80062e8:	600f      	str	r7, [r1, #0]
 80062ea:	bf18      	it	ne
 80062ec:	2300      	movne	r3, #0
 80062ee:	eba6 0807 	sub.w	r8, r6, r7
 80062f2:	608b      	str	r3, [r1, #8]
 80062f4:	f1b8 0f00 	cmp.w	r8, #0
 80062f8:	dde9      	ble.n	80062ce <__sflush_r+0xae>
 80062fa:	6a21      	ldr	r1, [r4, #32]
 80062fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80062fe:	4643      	mov	r3, r8
 8006300:	463a      	mov	r2, r7
 8006302:	4628      	mov	r0, r5
 8006304:	47b0      	blx	r6
 8006306:	2800      	cmp	r0, #0
 8006308:	dc08      	bgt.n	800631c <__sflush_r+0xfc>
 800630a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800630e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006312:	81a3      	strh	r3, [r4, #12]
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800631c:	4407      	add	r7, r0
 800631e:	eba8 0800 	sub.w	r8, r8, r0
 8006322:	e7e7      	b.n	80062f4 <__sflush_r+0xd4>
 8006324:	dfbffffe 	.word	0xdfbffffe

08006328 <_fflush_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	690b      	ldr	r3, [r1, #16]
 800632c:	4605      	mov	r5, r0
 800632e:	460c      	mov	r4, r1
 8006330:	b913      	cbnz	r3, 8006338 <_fflush_r+0x10>
 8006332:	2500      	movs	r5, #0
 8006334:	4628      	mov	r0, r5
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	b118      	cbz	r0, 8006342 <_fflush_r+0x1a>
 800633a:	6a03      	ldr	r3, [r0, #32]
 800633c:	b90b      	cbnz	r3, 8006342 <_fflush_r+0x1a>
 800633e:	f7fd ffbd 	bl	80042bc <__sinit>
 8006342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f3      	beq.n	8006332 <_fflush_r+0xa>
 800634a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800634c:	07d0      	lsls	r0, r2, #31
 800634e:	d404      	bmi.n	800635a <_fflush_r+0x32>
 8006350:	0599      	lsls	r1, r3, #22
 8006352:	d402      	bmi.n	800635a <_fflush_r+0x32>
 8006354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006356:	f7fe f9f6 	bl	8004746 <__retarget_lock_acquire_recursive>
 800635a:	4628      	mov	r0, r5
 800635c:	4621      	mov	r1, r4
 800635e:	f7ff ff5f 	bl	8006220 <__sflush_r>
 8006362:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006364:	07da      	lsls	r2, r3, #31
 8006366:	4605      	mov	r5, r0
 8006368:	d4e4      	bmi.n	8006334 <_fflush_r+0xc>
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	059b      	lsls	r3, r3, #22
 800636e:	d4e1      	bmi.n	8006334 <_fflush_r+0xc>
 8006370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006372:	f7fe f9e9 	bl	8004748 <__retarget_lock_release_recursive>
 8006376:	e7dd      	b.n	8006334 <_fflush_r+0xc>

08006378 <__swhatbuf_r>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	460c      	mov	r4, r1
 800637c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006380:	2900      	cmp	r1, #0
 8006382:	b096      	sub	sp, #88	@ 0x58
 8006384:	4615      	mov	r5, r2
 8006386:	461e      	mov	r6, r3
 8006388:	da0d      	bge.n	80063a6 <__swhatbuf_r+0x2e>
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006390:	f04f 0100 	mov.w	r1, #0
 8006394:	bf14      	ite	ne
 8006396:	2340      	movne	r3, #64	@ 0x40
 8006398:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800639c:	2000      	movs	r0, #0
 800639e:	6031      	str	r1, [r6, #0]
 80063a0:	602b      	str	r3, [r5, #0]
 80063a2:	b016      	add	sp, #88	@ 0x58
 80063a4:	bd70      	pop	{r4, r5, r6, pc}
 80063a6:	466a      	mov	r2, sp
 80063a8:	f000 f862 	bl	8006470 <_fstat_r>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	dbec      	blt.n	800638a <__swhatbuf_r+0x12>
 80063b0:	9901      	ldr	r1, [sp, #4]
 80063b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063ba:	4259      	negs	r1, r3
 80063bc:	4159      	adcs	r1, r3
 80063be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063c2:	e7eb      	b.n	800639c <__swhatbuf_r+0x24>

080063c4 <__smakebuf_r>:
 80063c4:	898b      	ldrh	r3, [r1, #12]
 80063c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063c8:	079d      	lsls	r5, r3, #30
 80063ca:	4606      	mov	r6, r0
 80063cc:	460c      	mov	r4, r1
 80063ce:	d507      	bpl.n	80063e0 <__smakebuf_r+0x1c>
 80063d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	6123      	str	r3, [r4, #16]
 80063d8:	2301      	movs	r3, #1
 80063da:	6163      	str	r3, [r4, #20]
 80063dc:	b003      	add	sp, #12
 80063de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e0:	ab01      	add	r3, sp, #4
 80063e2:	466a      	mov	r2, sp
 80063e4:	f7ff ffc8 	bl	8006378 <__swhatbuf_r>
 80063e8:	9f00      	ldr	r7, [sp, #0]
 80063ea:	4605      	mov	r5, r0
 80063ec:	4639      	mov	r1, r7
 80063ee:	4630      	mov	r0, r6
 80063f0:	f7ff f86e 	bl	80054d0 <_malloc_r>
 80063f4:	b948      	cbnz	r0, 800640a <__smakebuf_r+0x46>
 80063f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063fa:	059a      	lsls	r2, r3, #22
 80063fc:	d4ee      	bmi.n	80063dc <__smakebuf_r+0x18>
 80063fe:	f023 0303 	bic.w	r3, r3, #3
 8006402:	f043 0302 	orr.w	r3, r3, #2
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	e7e2      	b.n	80063d0 <__smakebuf_r+0xc>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	6020      	str	r0, [r4, #0]
 800640e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006412:	81a3      	strh	r3, [r4, #12]
 8006414:	9b01      	ldr	r3, [sp, #4]
 8006416:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800641a:	b15b      	cbz	r3, 8006434 <__smakebuf_r+0x70>
 800641c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006420:	4630      	mov	r0, r6
 8006422:	f000 f837 	bl	8006494 <_isatty_r>
 8006426:	b128      	cbz	r0, 8006434 <__smakebuf_r+0x70>
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	f023 0303 	bic.w	r3, r3, #3
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	81a3      	strh	r3, [r4, #12]
 8006434:	89a3      	ldrh	r3, [r4, #12]
 8006436:	431d      	orrs	r5, r3
 8006438:	81a5      	strh	r5, [r4, #12]
 800643a:	e7cf      	b.n	80063dc <__smakebuf_r+0x18>

0800643c <memmove>:
 800643c:	4288      	cmp	r0, r1
 800643e:	b510      	push	{r4, lr}
 8006440:	eb01 0402 	add.w	r4, r1, r2
 8006444:	d902      	bls.n	800644c <memmove+0x10>
 8006446:	4284      	cmp	r4, r0
 8006448:	4623      	mov	r3, r4
 800644a:	d807      	bhi.n	800645c <memmove+0x20>
 800644c:	1e43      	subs	r3, r0, #1
 800644e:	42a1      	cmp	r1, r4
 8006450:	d008      	beq.n	8006464 <memmove+0x28>
 8006452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800645a:	e7f8      	b.n	800644e <memmove+0x12>
 800645c:	4402      	add	r2, r0
 800645e:	4601      	mov	r1, r0
 8006460:	428a      	cmp	r2, r1
 8006462:	d100      	bne.n	8006466 <memmove+0x2a>
 8006464:	bd10      	pop	{r4, pc}
 8006466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800646a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800646e:	e7f7      	b.n	8006460 <memmove+0x24>

08006470 <_fstat_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4d07      	ldr	r5, [pc, #28]	@ (8006490 <_fstat_r+0x20>)
 8006474:	2300      	movs	r3, #0
 8006476:	4604      	mov	r4, r0
 8006478:	4608      	mov	r0, r1
 800647a:	4611      	mov	r1, r2
 800647c:	602b      	str	r3, [r5, #0]
 800647e:	f7fb f98c 	bl	800179a <_fstat>
 8006482:	1c43      	adds	r3, r0, #1
 8006484:	d102      	bne.n	800648c <_fstat_r+0x1c>
 8006486:	682b      	ldr	r3, [r5, #0]
 8006488:	b103      	cbz	r3, 800648c <_fstat_r+0x1c>
 800648a:	6023      	str	r3, [r4, #0]
 800648c:	bd38      	pop	{r3, r4, r5, pc}
 800648e:	bf00      	nop
 8006490:	20000610 	.word	0x20000610

08006494 <_isatty_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d06      	ldr	r5, [pc, #24]	@ (80064b0 <_isatty_r+0x1c>)
 8006498:	2300      	movs	r3, #0
 800649a:	4604      	mov	r4, r0
 800649c:	4608      	mov	r0, r1
 800649e:	602b      	str	r3, [r5, #0]
 80064a0:	f7fb f98b 	bl	80017ba <_isatty>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d102      	bne.n	80064ae <_isatty_r+0x1a>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	b103      	cbz	r3, 80064ae <_isatty_r+0x1a>
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	bd38      	pop	{r3, r4, r5, pc}
 80064b0:	20000610 	.word	0x20000610

080064b4 <_sbrk_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4d06      	ldr	r5, [pc, #24]	@ (80064d0 <_sbrk_r+0x1c>)
 80064b8:	2300      	movs	r3, #0
 80064ba:	4604      	mov	r4, r0
 80064bc:	4608      	mov	r0, r1
 80064be:	602b      	str	r3, [r5, #0]
 80064c0:	f7fb f994 	bl	80017ec <_sbrk>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_sbrk_r+0x1a>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_sbrk_r+0x1a>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	20000610 	.word	0x20000610

080064d4 <memcpy>:
 80064d4:	440a      	add	r2, r1
 80064d6:	4291      	cmp	r1, r2
 80064d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80064dc:	d100      	bne.n	80064e0 <memcpy+0xc>
 80064de:	4770      	bx	lr
 80064e0:	b510      	push	{r4, lr}
 80064e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ea:	4291      	cmp	r1, r2
 80064ec:	d1f9      	bne.n	80064e2 <memcpy+0xe>
 80064ee:	bd10      	pop	{r4, pc}

080064f0 <__assert_func>:
 80064f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064f2:	4614      	mov	r4, r2
 80064f4:	461a      	mov	r2, r3
 80064f6:	4b09      	ldr	r3, [pc, #36]	@ (800651c <__assert_func+0x2c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4605      	mov	r5, r0
 80064fc:	68d8      	ldr	r0, [r3, #12]
 80064fe:	b954      	cbnz	r4, 8006516 <__assert_func+0x26>
 8006500:	4b07      	ldr	r3, [pc, #28]	@ (8006520 <__assert_func+0x30>)
 8006502:	461c      	mov	r4, r3
 8006504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006508:	9100      	str	r1, [sp, #0]
 800650a:	462b      	mov	r3, r5
 800650c:	4905      	ldr	r1, [pc, #20]	@ (8006524 <__assert_func+0x34>)
 800650e:	f000 f86f 	bl	80065f0 <fiprintf>
 8006512:	f000 f87f 	bl	8006614 <abort>
 8006516:	4b04      	ldr	r3, [pc, #16]	@ (8006528 <__assert_func+0x38>)
 8006518:	e7f4      	b.n	8006504 <__assert_func+0x14>
 800651a:	bf00      	nop
 800651c:	20000018 	.word	0x20000018
 8006520:	08006b96 	.word	0x08006b96
 8006524:	08006b68 	.word	0x08006b68
 8006528:	08006b5b 	.word	0x08006b5b

0800652c <_calloc_r>:
 800652c:	b570      	push	{r4, r5, r6, lr}
 800652e:	fba1 5402 	umull	r5, r4, r1, r2
 8006532:	b93c      	cbnz	r4, 8006544 <_calloc_r+0x18>
 8006534:	4629      	mov	r1, r5
 8006536:	f7fe ffcb 	bl	80054d0 <_malloc_r>
 800653a:	4606      	mov	r6, r0
 800653c:	b928      	cbnz	r0, 800654a <_calloc_r+0x1e>
 800653e:	2600      	movs	r6, #0
 8006540:	4630      	mov	r0, r6
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	220c      	movs	r2, #12
 8006546:	6002      	str	r2, [r0, #0]
 8006548:	e7f9      	b.n	800653e <_calloc_r+0x12>
 800654a:	462a      	mov	r2, r5
 800654c:	4621      	mov	r1, r4
 800654e:	f7fe f867 	bl	8004620 <memset>
 8006552:	e7f5      	b.n	8006540 <_calloc_r+0x14>

08006554 <__ascii_mbtowc>:
 8006554:	b082      	sub	sp, #8
 8006556:	b901      	cbnz	r1, 800655a <__ascii_mbtowc+0x6>
 8006558:	a901      	add	r1, sp, #4
 800655a:	b142      	cbz	r2, 800656e <__ascii_mbtowc+0x1a>
 800655c:	b14b      	cbz	r3, 8006572 <__ascii_mbtowc+0x1e>
 800655e:	7813      	ldrb	r3, [r2, #0]
 8006560:	600b      	str	r3, [r1, #0]
 8006562:	7812      	ldrb	r2, [r2, #0]
 8006564:	1e10      	subs	r0, r2, #0
 8006566:	bf18      	it	ne
 8006568:	2001      	movne	r0, #1
 800656a:	b002      	add	sp, #8
 800656c:	4770      	bx	lr
 800656e:	4610      	mov	r0, r2
 8006570:	e7fb      	b.n	800656a <__ascii_mbtowc+0x16>
 8006572:	f06f 0001 	mvn.w	r0, #1
 8006576:	e7f8      	b.n	800656a <__ascii_mbtowc+0x16>

08006578 <_realloc_r>:
 8006578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800657c:	4680      	mov	r8, r0
 800657e:	4615      	mov	r5, r2
 8006580:	460c      	mov	r4, r1
 8006582:	b921      	cbnz	r1, 800658e <_realloc_r+0x16>
 8006584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006588:	4611      	mov	r1, r2
 800658a:	f7fe bfa1 	b.w	80054d0 <_malloc_r>
 800658e:	b92a      	cbnz	r2, 800659c <_realloc_r+0x24>
 8006590:	f7fe ff2a 	bl	80053e8 <_free_r>
 8006594:	2400      	movs	r4, #0
 8006596:	4620      	mov	r0, r4
 8006598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800659c:	f000 f841 	bl	8006622 <_malloc_usable_size_r>
 80065a0:	4285      	cmp	r5, r0
 80065a2:	4606      	mov	r6, r0
 80065a4:	d802      	bhi.n	80065ac <_realloc_r+0x34>
 80065a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80065aa:	d8f4      	bhi.n	8006596 <_realloc_r+0x1e>
 80065ac:	4629      	mov	r1, r5
 80065ae:	4640      	mov	r0, r8
 80065b0:	f7fe ff8e 	bl	80054d0 <_malloc_r>
 80065b4:	4607      	mov	r7, r0
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d0ec      	beq.n	8006594 <_realloc_r+0x1c>
 80065ba:	42b5      	cmp	r5, r6
 80065bc:	462a      	mov	r2, r5
 80065be:	4621      	mov	r1, r4
 80065c0:	bf28      	it	cs
 80065c2:	4632      	movcs	r2, r6
 80065c4:	f7ff ff86 	bl	80064d4 <memcpy>
 80065c8:	4621      	mov	r1, r4
 80065ca:	4640      	mov	r0, r8
 80065cc:	f7fe ff0c 	bl	80053e8 <_free_r>
 80065d0:	463c      	mov	r4, r7
 80065d2:	e7e0      	b.n	8006596 <_realloc_r+0x1e>

080065d4 <__ascii_wctomb>:
 80065d4:	4603      	mov	r3, r0
 80065d6:	4608      	mov	r0, r1
 80065d8:	b141      	cbz	r1, 80065ec <__ascii_wctomb+0x18>
 80065da:	2aff      	cmp	r2, #255	@ 0xff
 80065dc:	d904      	bls.n	80065e8 <__ascii_wctomb+0x14>
 80065de:	228a      	movs	r2, #138	@ 0x8a
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	f04f 30ff 	mov.w	r0, #4294967295
 80065e6:	4770      	bx	lr
 80065e8:	700a      	strb	r2, [r1, #0]
 80065ea:	2001      	movs	r0, #1
 80065ec:	4770      	bx	lr
	...

080065f0 <fiprintf>:
 80065f0:	b40e      	push	{r1, r2, r3}
 80065f2:	b503      	push	{r0, r1, lr}
 80065f4:	4601      	mov	r1, r0
 80065f6:	ab03      	add	r3, sp, #12
 80065f8:	4805      	ldr	r0, [pc, #20]	@ (8006610 <fiprintf+0x20>)
 80065fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80065fe:	6800      	ldr	r0, [r0, #0]
 8006600:	9301      	str	r3, [sp, #4]
 8006602:	f7ff fcf5 	bl	8005ff0 <_vfiprintf_r>
 8006606:	b002      	add	sp, #8
 8006608:	f85d eb04 	ldr.w	lr, [sp], #4
 800660c:	b003      	add	sp, #12
 800660e:	4770      	bx	lr
 8006610:	20000018 	.word	0x20000018

08006614 <abort>:
 8006614:	b508      	push	{r3, lr}
 8006616:	2006      	movs	r0, #6
 8006618:	f000 f834 	bl	8006684 <raise>
 800661c:	2001      	movs	r0, #1
 800661e:	f7fb f888 	bl	8001732 <_exit>

08006622 <_malloc_usable_size_r>:
 8006622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006626:	1f18      	subs	r0, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	bfbc      	itt	lt
 800662c:	580b      	ldrlt	r3, [r1, r0]
 800662e:	18c0      	addlt	r0, r0, r3
 8006630:	4770      	bx	lr

08006632 <_raise_r>:
 8006632:	291f      	cmp	r1, #31
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4605      	mov	r5, r0
 8006638:	460c      	mov	r4, r1
 800663a:	d904      	bls.n	8006646 <_raise_r+0x14>
 800663c:	2316      	movs	r3, #22
 800663e:	6003      	str	r3, [r0, #0]
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	bd38      	pop	{r3, r4, r5, pc}
 8006646:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006648:	b112      	cbz	r2, 8006650 <_raise_r+0x1e>
 800664a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800664e:	b94b      	cbnz	r3, 8006664 <_raise_r+0x32>
 8006650:	4628      	mov	r0, r5
 8006652:	f000 f831 	bl	80066b8 <_getpid_r>
 8006656:	4622      	mov	r2, r4
 8006658:	4601      	mov	r1, r0
 800665a:	4628      	mov	r0, r5
 800665c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006660:	f000 b818 	b.w	8006694 <_kill_r>
 8006664:	2b01      	cmp	r3, #1
 8006666:	d00a      	beq.n	800667e <_raise_r+0x4c>
 8006668:	1c59      	adds	r1, r3, #1
 800666a:	d103      	bne.n	8006674 <_raise_r+0x42>
 800666c:	2316      	movs	r3, #22
 800666e:	6003      	str	r3, [r0, #0]
 8006670:	2001      	movs	r0, #1
 8006672:	e7e7      	b.n	8006644 <_raise_r+0x12>
 8006674:	2100      	movs	r1, #0
 8006676:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800667a:	4620      	mov	r0, r4
 800667c:	4798      	blx	r3
 800667e:	2000      	movs	r0, #0
 8006680:	e7e0      	b.n	8006644 <_raise_r+0x12>
	...

08006684 <raise>:
 8006684:	4b02      	ldr	r3, [pc, #8]	@ (8006690 <raise+0xc>)
 8006686:	4601      	mov	r1, r0
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	f7ff bfd2 	b.w	8006632 <_raise_r>
 800668e:	bf00      	nop
 8006690:	20000018 	.word	0x20000018

08006694 <_kill_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4d07      	ldr	r5, [pc, #28]	@ (80066b4 <_kill_r+0x20>)
 8006698:	2300      	movs	r3, #0
 800669a:	4604      	mov	r4, r0
 800669c:	4608      	mov	r0, r1
 800669e:	4611      	mov	r1, r2
 80066a0:	602b      	str	r3, [r5, #0]
 80066a2:	f7fb f836 	bl	8001712 <_kill>
 80066a6:	1c43      	adds	r3, r0, #1
 80066a8:	d102      	bne.n	80066b0 <_kill_r+0x1c>
 80066aa:	682b      	ldr	r3, [r5, #0]
 80066ac:	b103      	cbz	r3, 80066b0 <_kill_r+0x1c>
 80066ae:	6023      	str	r3, [r4, #0]
 80066b0:	bd38      	pop	{r3, r4, r5, pc}
 80066b2:	bf00      	nop
 80066b4:	20000610 	.word	0x20000610

080066b8 <_getpid_r>:
 80066b8:	f7fb b823 	b.w	8001702 <_getpid>

080066bc <_init>:
 80066bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066be:	bf00      	nop
 80066c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c2:	bc08      	pop	{r3}
 80066c4:	469e      	mov	lr, r3
 80066c6:	4770      	bx	lr

080066c8 <_fini>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	bf00      	nop
 80066cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ce:	bc08      	pop	{r3}
 80066d0:	469e      	mov	lr, r3
 80066d2:	4770      	bx	lr
